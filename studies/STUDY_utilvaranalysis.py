from logistigate.logistigate import utilities as util  # Pull from the submodule "develop" branch
from logistigate.logistigate import methods, lg
from logistigate.logistigate import lossfunctions as lf
from logistigate.logistigate import samplingplanfunctions as sampf
from logistigate.logistigate.priors import prior_normal_assort
import os
import numpy as np
from numpy.random import choice
import scipy.special as sps
import scipy.stats as spstat
import matplotlib.pyplot as plt
import random
import time
from math import comb
import matplotlib.cm as cm

def STUDYutilVar():
    '''Look at impact of different MCMC usages on utility calculation variance, using case study setting'''
    rd3_N = np.array([[1., 1., 10., 1., 3., 0., 1., 6., 7., 5., 0., 0., 4.],
                      [1., 1., 4., 2., 0., 1., 1., 2., 0., 4., 0., 0., 1.],
                      [3., 17., 31., 4., 2., 0., 1., 6., 0., 23., 1., 2., 5.],
                      [1., 1., 15., 2., 0., 0., 0., 1., 0., 6., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
    rd3_Y = np.array([[0., 0., 7., 0., 3., 0., 1., 0., 1., 0., 0., 0., 4.],
                      [0., 0., 2., 2., 0., 1., 1., 0., 0., 1., 0., 0., 1.],
                      [0., 0., 15., 3., 2., 0., 0., 2., 0., 1., 1., 2., 5.],
                      [0., 0., 5., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])

    (numTN, numSN) = rd3_N.shape
    s, r = 1., 1.
    CSdict3 = util.generateRandDataDict(numImp=numSN, numOut=numTN, diagSens=s, diagSpec=r,
                                        numSamples=0, dataType='Tracked', randSeed=2)
    CSdict3['diagSens'], CSdict3['diagSpec'] = s, r
    CSdict3 = util.GetVectorForms(CSdict3)
    CSdict3['N'], CSdict3['Y'] = rd3_N, rd3_Y

    SNpriorMean = np.repeat(sps.logit(0.1), numSN)
    # Establish test nodes according to assessment by regulators
    TNpriorMean = sps.logit(np.array([0.1, 0.1, 0.15, 0.15, 0.15, 0.1, 0.15, 0.1]))
    TNvar, SNvar = 2., 4.
    CSdict3['prior'] = prior_normal_assort(np.concatenate((SNpriorMean, TNpriorMean)),
                                           np.diag(np.concatenate((np.repeat(SNvar, numSN), np.repeat(TNvar, numTN)))))

    ##### REMOVE LATER
    # CSdict3['TNnames'] = ['ASHANTI', 'BRONG AHAFO', 'CENTRAL', 'EASTERN REGION', 'GREATER ACCRA', 'NORTHERN SECTOR', 'VOLTA', 'WESTERN']
    CSdict3['TNnames'] = ['MOD_39', 'MOD_17', 'MODHIGH_95', 'MODHIGH_26',
                          'MODHIGH_EXPL_1', 'MOD_EXPL_1', 'MODHIGH_EXPL_2', 'MOD_EXPL_2']
    CSdict3['SNnames'] = ['ACME FORMULATION PVT. LTD.', 'AS GRINDEKS', 'BELCO PHARMA', 'BHARAT PARENTERALS LTD',
                          'HUBEI TIANYAO PHARMACEUTICALS CO LTD.', 'MACIN REMEDIES INDIA LTD',
                          'NORTH CHINA PHARMACEUTICAL CO. LTD', 'NOVARTIS PHARMA', 'PFIZER',
                          'PIRAMAL HEALTHCARE UK LIMITED', 'PUSHKAR PHARMA',
                          'SHANDOND SHENGLU PHARMACEUTICAL CO.LTD.', 'SHANXI SHUGUANG PHARM']

    # Region catchment proportions
    TNcach = np.array([0.17646, 0.05752, 0.09275, 0.09488, 0.17695, 0.22799, 0.07805, 0.0954])
    tempQ = CSdict3['N'][:4] / np.sum(CSdict3['N'][:4], axis=1).reshape(4, 1)
    tempTNcach = TNcach[:4] / np.sum(TNcach[:4])
    SNcach = np.matmul(tempTNcach, tempQ)
    # Normalize market weights s.t. sum of TN terms equals sum of SN terms equals number of TNs
    # TNcach = TNcach * TNcach.shape[0] / TNcach.sum()
    # SNcach = SNcach * TNcach.sum() / SNcach.sum()
    ###################

    CSdict3['MCMCdict'] = {'MCMCtype': 'NUTS', 'Madapt': 5000, 'delta': 0.4}
    CSdict3['SNnum'], CSdict3['TNnum'] = numSN, numTN
    # Generate posterior draws
    numdraws = 100000  # Evaluate choice here
    CSdict3['numPostSamples'] = numdraws

    # Generate 10 MCMC chains of 100k each, with different
    M = 10  # Number of chains
    # Sample initial points from prior
    np.random.seed(10)
    newBetaArr = CSdict3['prior'].rand(M)
    # Generate chains from initial points
    CSdict3['MCMCdict'] = {'MCMCtype': 'NUTS', 'Madapt': 5000, 'delta': 0.4, 'initBeta': newBetaArr[0]}
    CSdict3 = methods.GeneratePostSamples(CSdict3)
    chainArr = CSdict3['postSamples']
    chainArr = chainArr.reshape((1, numdraws, numSN + numTN))
    # Generate new chains with different initial points
    for m in range(1, M):
        CSdict3['MCMCdict'] = {'MCMCtype': 'NUTS', 'Madapt': 5000, 'delta': 0.4, 'initBeta': newBetaArr[m]}
        CSdict3 = methods.GeneratePostSamples(CSdict3)
        chainArr = np.concatenate((chainArr, CSdict3['postSamples'].reshape((1, numdraws, numSN + numTN))))
    # Save array for later use
    # np.save('chainArr.npy', chainArr)
    # chainArr = np.load('chainArr.npy')

    # Set sampling design and budget
    des = np.zeros(numTN)
    des[2] = 1.
    sampBudget = 50

    # Loss and utility dictionaries
    paramdict = lf.build_diffscore_checkrisk_dict(scoreunderestwt=5., riskthreshold=0.15, riskslope=0.6,
                                                  marketvec=np.ones(numTN + numSN), candneighnum=1000)

    # Set parameter lists
    bayesNumList = [1000, 5000, 10000]
    bayesNeighNumList = [100, 1000]
    targNumList = [1000, 5000]
    dataNumList = [500, 1000]
    numReps = 10
    numchains = 5

    # Iterate through each chain 10 times
    resArr = np.zeros(
        (len(bayesNumList) * len(bayesNeighNumList) * len(targNumList) * len(dataNumList) * numchains, numReps))
    resInd = -1
    iterStr = []
    for bayesNumInd, bayesNum in enumerate(bayesNumList):
        for bayesNeighNumInd, bayesNeighNum in enumerate(bayesNeighNumList):
            for targNumInd, targNum in enumerate(targNumList):
                for dataNumInd, dataNum in enumerate(dataNumList):
                    for m in range(numchains):
                        resInd += 1
                        iterName = str(bayesNum) + ', ' + str(bayesNeighNum) + ', ' + str(targNum) + ', ' + str(
                            dataNum) + ', ' + str(m)
                        print(iterName)
                        iterStr.append(str(bayesNum) + '\n' + str(bayesNeighNum) + '\n' + str(targNum) + '\n' + str(
                            dataNum) + '\n' + str(m))
                        for rep in range(numReps):
                            dictTemp = CSdict3.copy()
                            dictTemp.update({'postSamples': chainArr[m][choice(np.arange(numdraws), size=targNum,
                                                                               replace=False)],
                                             'numPostSamples': targNum})
                            # Bayes draws
                            setDraws = chainArr[m][choice(np.arange(numdraws), size=bayesNum, replace=False)]
                            lossDict.update({'bayesEstNeighborNum': bayesNeighNum})
                            lossDict.update({'bayesDraws': setDraws})
                            print('Generating loss matrix...')
                            tempLossMat = lf.lossMatSetBayesDraws(dictTemp['postSamples'], lossDict.copy(),
                                                                  lossDict['bayesDraws'])
                            tempLossDict = lossDict.copy()
                            tempLossDict.update({'lossMat': tempLossMat})
                            newBayesDraws, newLossMat = lf.add_cand_neighbors(tempLossDict.copy(), chainArr[m],
                                                                              dictTemp['postSamples'])
                            tempLossDict.update({'bayesDraws': newBayesDraws, 'lossMat': newLossMat})
                            baseLoss = (np.sum(newLossMat, axis=1) / newLossMat.shape[1]).min()
                            utilDict.update({'dataDraws': setDraws[
                                choice(np.arange(len(setDraws)), size=dataNum, replace=False)]})
                            currCompUtil = baseLoss - \
                                           sampf.sampling_plan_loss(priordatadict=dictTemp, lossdict=tempLossDict,
                                                                    designlist=[des], numtests=sampBudget,
                                                                    utildict=utilDict)[0]
                            resArr[resInd, rep] = currCompUtil
                    plt.boxplot(resArr.T)
                    plt.show()
                    plt.close()

    for j in range(6):
        lo, hi = 20 * j, 20 * j + 20
        plt.boxplot(resArr[lo:hi, :].T)
        plt.xticks(np.arange(1, hi - lo + 1), iterStr[lo:hi], fontsize=6)
        plt.subplots_adjust(bottom=0.15)
        plt.ylim([0, 0.5])
        plt.title('Inspection of Variance\n$|\Gamma_{Bayes}|$, $|\Gamma_{BayesNeigh}|$,'
                  '$|\Gamma_{targ}|$, $|\Gamma_{data}|$, Chain Index')
        plt.show()
        plt.close()
    '''
    resArr = np.array([[0.20732985495794676, 0.23332562013353586, 0.15382395791664383, 0.2540323670554496, 0.2796894013831728, 0.2732330403819958, 0.2117279130841081, 0.24515121658727068, 0.29135938303479847, 0.27901888140909836], [0.1637764303764051, 0.19362347007299086, 0.2719798236867046, 0.3220536965263534, 0.24041479708549574, 0.23723641378917026, 0.3112883438352405, 0.2347338945184445, 0.09548088917418696, 0.35365677101617443], [0.23572108027507843, 0.36987566828153984, 0.25130954037912234, 0.19273996907083557, 0.23030855332011857, 0.15309826733790333, 0.18975191332146357, 0.2738457434503738, 0.12523127940033252, 0.32044731644510893], [0.25890449577592545, 0.10762759078311745, 0.15854926744521425, 0.25946367248507496, 0.3648431618506782, 0.1646706044098405, 0.11283332596641493, 0.14235984764329412, 0.25477421952135604, 0.2217661730428886], [0.11732958428411866, 0.14345858806729161, 0.22768593077075927, 0.12506510350463618, 0.1938870854913155, 0.10695183281706422, 0.17369811130000734, 0.18689720518228015, 0.15352125965663088, 0.1873267016736495], [0.1720919526492084, 0.20905138096653797, 0.2762661995040596, 0.247823147475132, 0.2722995552508385, 0.1433280860616568, 0.24417839588897916, 0.27532028243370377, 0.20055350294091578, 0.1852238741140555], [0.15814154716491524, 0.23043142927502602, 0.14441231182342928, 0.1923261617969465, 0.28525424770753105, 0.25770126441102814, 0.12313839554379413, 0.30944872233919707, 0.2200663742261213, 0.2263648594522749], [0.2625831310770059, 0.2031383753032232, 0.37350730345505045, 0.2689905756391182, 0.23030043806838485, 0.08910992524792372, 0.2417099047003659, 0.1987881451583826, 0.26450561021528785, 0.3319308940138548], [0.24330579260026575, 0.17167004425360233, 0.1398359250304031, 0.21040040544066585, 0.3067613093707058, 0.19039061703580984, 0.2876935450446658, 0.26528455634996106, 0.21054500376553875, 0.17923566407879177], [0.17954378190663878, 0.34007160199135145, 0.20550730582546217, 0.18476808054755, 0.20135714580953223, 0.1792589845971837, 0.12279228660754082, 0.1958976189199957, 0.11203126072940606, 0.11344729986712565], [0.2764180789417505, 0.3279579775587713, 0.1425488149020797, 0.2234731449452907, 0.2731359206671886, 0.23359413064456636, 0.29470748856244544, 0.17117579874609312, 0.22611523531743138, 0.24842891539373557], [0.11944628495009901, 0.29043333679520966, 0.12213322383921943, 0.30192232355592363, 0.15567713522977833, 0.27081157922708865, 0.30870696411408804, 0.0920678072045753, 0.3311993988953481, 0.18737097715792128], [0.23994514693516233, 0.1352851302320479, 0.18066980339423155, 0.29305857586028683, 0.18484233005399187, 0.2236535392500567, 0.3270897190527098, 0.13580067808718432, 0.2957001695985406, 0.1965077703193412], [0.2061708746503168, 0.14659285398901511, 0.17869046336427097, 0.11504198202340188, 0.12372784538977744, 0.18275252032193467, 0.15581241243487431, 0.2746011880729302, 0.2469705638366464, 0.19397137377478213], [0.2057400615852023, 0.19101416865689913, 0.1437842315918405, 0.13919399830377488, 0.16373084304153052, 0.1366098518135903, 0.11782689489003806, 0.12019160595054679, 0.4517066145493782, 0.23580114473966063], [0.2776967989147474, 0.1492497128443908, 0.13673532673080224, 0.3022651980109643, 0.23682170803221858, 0.18377405971864658, 0.16578770292359257, 0.1490429844429655, 0.2693629978576624, 0.1784379174172539], [0.1948466853848405, 0.2167205620073238, 0.30389203114901076, 0.2658170601627132, 0.141637815490661, 0.1172952742365947, 0.14907470175240078, 0.25049565592725465, 0.3475208604383955, 0.30106626055289265], [0.19235836594126132, 0.12977738544417017, 0.1994795655280135, 0.1866365460858903, 0.16132260168911383, 0.20016331266276532, 0.3644841018492748, 0.18385890719624998, 0.14110127216057977, 0.14420885011545614], [0.17615137884396326, 0.19508228483565215, 0.21229762128403795, 0.12971405021298477, 0.16533491737751582, 0.1546116798289363, 0.1395734557807291, 0.11441473149413195, 0.2838740324327125, 0.27500098092756264], [0.1309880919551789, 0.274726663310199, 0.21312628508052, 0.11148917218490473, 0.17395980214994067, 0.17526594547035534, 0.24657049012921384, 0.20663371567771982, 0.1359046862982103, 0.07711009322109508], [0.2178095054096567, 0.2137578650894354, 0.2515626582622801, 0.22124667359328676, 0.2458118747389908, 0.25632329702752843, 0.22811592137415238, 0.19232765192974854, 0.2630005219988347, 0.14804380851772647], [0.2170128814305352, 0.2753887708420426, 0.2910492795740951, 0.24011048124988132, 0.3141380067801207, 0.26970647482041654, 0.2425984451589578, 0.222012988772053, 0.24743187662993416, 0.2937682568947233], [0.18325648085353885, 0.2836169425203323, 0.20042521445816153, 0.3944659322617512, 0.17033903597393074, 0.20080604372741462, 0.17037800691782623, 0.12699785287517074, 0.28902426576828555, 0.1839339083080298], [0.3031628027521549, 0.2940956778459731, 0.26269770479613586, 0.256161842389242, 0.19196371098648024, 0.3130408678449319, 0.21522184550713774, 0.30771115886376776, 0.23059237604743377, 0.245325514084755], [0.20114174143863295, 0.14637986197487773, 0.21006990359771516, 0.18174014743432076, 0.20847543946281233, 0.2511571068612386, 0.24218722360783174, 0.2753455515024772, 0.17864491258860005, 0.14350774347274253], [0.2509010166642236, 0.2172714004165459, 0.26548333572040983, 0.31277764482448145, 0.24803322072920952, 0.24840908774957482, 0.24454282417039863, 0.24218900457326953, 0.23359943971721808, 0.22804446303335046], [0.19246443398832502, 0.22777242452369384, 0.32035505675864195, 0.19267485354314706, 0.31450223437271063, 0.25049395017998544, 0.20647662705211722, 0.32198922045922984, 0.27552233939701587, 0.27475326128103994], [0.27688678337267936, 0.22231929074216872, 0.2616227338474926, 0.32371210452594745, 0.32244887267752675, 0.30490717487605457, 0.24789353252763213, 0.18307741334927607, 0.25684338460946554, 0.14029799952405098], [0.2699260950604758, 0.21579383470908642, 0.1776282879731701, 0.2495912450540816, 0.3565217458816963, 0.22931170731645834, 0.30204218337039146, 0.19470286883696408, 0.32070696991950465, 0.30159513825758344], [0.2510379189941756, 0.25840718775985616, 0.26648781600313987, 0.2687868820355557, 0.2425005884138156, 0.2742130767238229, 0.22214071314873163, 0.22595396104304566, 0.19140050558397803, 0.2478502110226115], [0.2561094238116728, 0.21821681863518938, 0.27534144478296385, 0.17533275218853284, 0.18216049227867037, 0.2668755505793081, 0.31516348373570624, 0.25171356237339815, 0.22421962912784688, 0.22169123562519122], [0.28319753916596024, 0.26392280705159177, 0.22847170215804535, 0.29283439694642865, 0.2500107609199871, 0.19230425652878802, 0.221295203282446, 0.25214434221342374, 0.20748594597178016, 0.17836527614108055], [0.30875369740899883, 0.16123049030789627, 0.2379745578257233, 0.24885688914267945, 0.2535850271614368, 0.24634539042954717, 0.24461522666989755, 0.27179372757096054, 0.13679545335329246, 0.2793341582487918], [0.2694636069910037, 0.2883079434343432, 0.23665640621623663, 0.27601998098069247, 0.28998285825725745, 0.27322291991329317, 0.23957145867285057, 0.35844147072003363, 0.21901763089007575, 0.2509976380098742], [0.18484692489495425, 0.22022896631376687, 0.24121702271783585, 0.16105367303149398, 0.2491745797401026, 0.23385798683970904, 0.2723717668771912, 0.22132441029305383, 0.25371873641391796, 0.21241494046992804], [0.225660655325306, 0.19746278035918596, 0.2658060673173157, 0.26345505150970494, 0.24659592808851416, 0.22868975358196852, 0.24673416155577366, 0.22091230697896114, 0.3066874106782316, 0.15457735298577013], [0.23300151016861603, 0.19428549413907525, 0.19578868626963075, 0.24781132676214135, 0.22776162504992303, 0.23261675482550492, 0.24488059572750842, 0.26889896863668694, 0.26960172675906513, 0.29026943709259045], [0.3108079883002741, 0.16663136180855442, 0.2724547614671686, 0.27583803795039064, 0.14678639301356355, 0.2558184633267411, 0.2813066794439254, 0.26541913691322216, 0.2974731697338129, 0.2477906540553425], [0.2629284498468456, 0.2600166399928634, 0.30952843155889553, 0.24943940328090886, 0.2196368388717791, 0.28415438823133465, 0.28018976207481616, 0.21581228217661952, 0.2617891379698265, 0.2985760466264926], [0.23053934983721192, 0.11260111669975714, 0.2553185643166471, 0.27613964033846816, 0.20129705388574015, 0.2438054225544195, 0.3085196851286436, 0.2172920165285741, 0.2966601063134999, 0.25226084384463965], [0.26329332771353586, 0.30427537148811545, 0.23100732418403025, 0.26084655017357816, 0.3502369553791116, 0.23471123769386137, 0.29690557783035443, 0.3125819708959545, 0.2878949802728301, 0.24797095437332883], [0.3976153667849349, 0.31060070512213045, 0.41945872042178145, 0.20341405423873615, 0.22617262568967256, 0.43994322305685074, 0.26165077866940445, 0.3179700026744965, 0.2718990625031146, 0.31125969181297286], [0.26058288745073366, 0.2349875934026202, 0.26007275360436743, 0.2874669079072456, 0.3637500483688014, 0.13706470295817397, 0.3342634154739783, 0.3366923072988599, 0.3668039016860285, 0.15255586449362424], [0.4204097406463454, 0.3146270903744197, 0.31629968071998205, 0.29110410840062784, 0.3546783336564663, 0.24926248043304566, 0.30063565174881424, 0.19568147763967136, 0.3006124803727399, 0.2314842891965383], [0.24742248165286185, 0.20953423208376476, 0.2556649230389576, 0.25306292478767656, 0.3604070847857761, 0.4016249751890424, 0.21000210572424072, 0.35041828962480004, 0.34221784514761255, 0.31012622361546827], [0.345496154550335, 0.2882960196766784, 0.2378509705996268, 0.22653330334162858, 0.24124389922211664, 0.17942753006167766, 0.232070907434899, 0.26392955686829644, 0.29033319369317256, 0.24275707648241918], [0.38845224814078083, 0.3003543389906409, 0.4472741995493905, 0.3834870990890442, 0.22133986807499495, 0.22723985304657246, 0.2282415777662079, 0.31847195561239294, 0.18278447896591743, 0.24357288015831013], [0.27603580759298785, 0.39011029067929215, 0.10169514315121209, 0.2530906596875049, 0.24519832896224036, 0.25608690825875957, 0.311486154772576, 0.3392581952071452, 0.3371582275610949, 0.3811401983208751], [0.2655003346724203, 0.36801027820691035, 0.34046829373352283, 0.28205201763682686, 0.23919825022592534, 0.28745549403650017, 0.2720919871892935, 0.28641989015376046, 0.3004201971013183, 0.2630805039158908], [0.23496410737508988, 0.24085329275558776, 0.22503265129701733, 0.2419817722959805, 0.323949831903942, 0.19803438030183518, 0.23156223387304076, 0.21853494971981302, 0.2071435091941516, 0.25982193987561564], [0.2230635332669082, 0.21021626724119535, 0.3251228223920575, 0.20982457594069714, 0.25828408102240763, 0.21177885582876677, 0.3630488090640345, 0.3158300363455466, 0.2864468268464204, 0.2589471194320163], [0.25162250887095006, 0.20630612393127779, 0.3007661890399471, 0.2886971811690242, 0.2640511635475016, 0.33084415273768997, 0.2851473432435849, 0.2147394481453042, 0.43453580762701316, 0.2789073668389168], [0.27820608114613243, 0.34492889034528673, 0.2932580373270124, 0.35194439847485404, 0.18710132350347264, 0.2812360230782387, 0.25758723871648925, 0.29058888754168244, 0.2852872345891182, 0.2548513100969432], [0.22604077653735155, 0.3720649510462284, 0.2669764130392629, 0.23967312180470834, 0.24267932659600744, 0.23276056189278016, 0.19437441851390114, 0.3278319915534227, 0.24522506534550637, 0.24736380868792684], [0.19620698262112501, 0.19627307185437903, 0.3071865163860332, 0.20646212783942453, 0.23875366565041833, 0.35112229687646845, 0.2306269792053235, 0.21688333516436664, 0.24558591022260812, 0.2251411023489629], [0.21810440230466943, 0.35124543239410366, 0.21583025567786418, 0.17791077671367095, 0.40225928955795887, 0.25689176769031974, 0.2605397222519734, 0.2534837514792967, 0.2452427102294683, 0.27318592778452944], [0.21231711843925893, 0.21210136239420496, 0.2014824550921266, 0.4161584013420887, 0.33120775416304404, 0.2936219381327949, 0.3679515647592053, 0.17639800134221728, 0.26153928084672984, 0.2364888781095824], [0.26398611005867156, 0.25551687278579127, 0.33543017715082524, 0.2936388626782307, 0.3674803860158202, 0.27883918092848115, 0.10606536117699239, 0.2891237976944878, 0.20960673873603541, 0.22368714282749336], [0.23795438686328296, 0.2218813007144198, 0.3481320089577129, 0.21940096973046908, 0.2683361054449822, 0.2958698146090821, 0.23821774195081735, 0.2629873730193766, 0.26467417393505643, 0.2563122511507969], [0.2701057829678071, 0.3191002337021236, 0.21788790350509446, 0.3118527055757556, 0.20151848485042745, 0.28243480259244924, 0.17297546961065846, 0.20827088322311393, 0.18964155716510556, 0.21663248609666308], [0.3033296225613995, 0.2760377644507499, 0.3974369399384723, 0.23461576957954078, 0.27019963992539164, 0.28570815441340347, 0.26890212790632084, 0.23585490904322093, 0.32423585569916735, 0.25373559665002343], [0.3037291582357349, 0.35694034183622625, 0.3520971089858542, 0.39172561677877926, 0.3850790654762517, 0.2629399840558375, 0.27587752007421873, 0.2858120183278796, 0.23379212780553438, 0.3742002111955305], [0.3304852565305185, 0.2933399092798594, 0.16243765415781874, 0.3038162221963119, 0.1695090883519046, 0.15743586644638086, 0.36402286264920525, 0.2526999023052592, 0.21022677186699124, 0.20240731646508792], [0.3478409934114777, 0.30399881617303137, 0.347881151053675, 0.31193863889502227, 0.2932960721038058, 0.32251430313228546, 0.313954549946057, 0.2615350795751694, 0.3361251312949767, 0.288468280848603], [0.3386866128185724, 0.2964480100864635, 0.26155726979605953, 0.28332108181530336, 0.2678387797705155, 0.2700952853250378, 0.279484486128168, 0.2804944466133965, 0.243037123169906, 0.2912797366804929], [0.2880409800914374, 0.29118053577564273, 0.33693930000090067, 0.22958809658547885, 0.33727633675268365, 0.2805495172638608, 0.304858729032099, 0.2892448809951227, 0.29552587048611256, 0.3292370472239048], [0.32775548138967503, 0.31425718300699446, 0.24790059432839273, 0.2366552268294897, 0.32818147645941353, 0.2758784884914749, 0.3779494859856598, 0.28888223437763294, 0.34906523444713233, 0.3280048978473422], [0.23004451162862605, 0.21256669279808182, 0.2615047567125375, 0.31530111145408357, 0.3488353177852912, 0.16539320030828675, 0.20230245025648186, 0.2685023841165659, 0.3080423028498189, 0.32826130795077546], [0.27932851499946665, 0.34055565584983505, 0.2854194791008853, 0.26873157515183355, 0.25852414709601, 0.27257119716953904, 0.3363603065145715, 0.240710007451296, 0.277288358664304, 0.22688512973478003], [0.22939687008862109, 0.327292457153864, 0.2858048023958042, 0.2604182021550767, 0.2604030494856242, 0.24245059530723, 0.29565758625285676, 0.3100045586168467, 0.2997954607336468, 0.2688174525633067], [0.2632571827687289, 0.3031139503487492, 0.25909751222037114, 0.2688027990179722, 0.2838640079703665, 0.30951455184911936, 0.28783292033038466, 0.27373466964831605, 0.2727771520413995, 0.25394811045436994], [0.23417828160064724, 0.36159936147285476, 0.236035815802766, 0.35148001560901365, 0.28568599601234457, 0.29885496082958296, 0.3030365004539366, 0.29030208818728953, 0.3194255247491524, 0.3243251434491583], [0.2591541584824415, 0.2857346578337543, 0.2616231845193404, 0.18885511756691775, 0.2370037945029777, 0.21704209373146766, 0.2490209883748138, 0.32747932522922785, 0.18422602059911242, 0.19661525405289915], [0.3217718553279796, 0.3143319118275283, 0.3098151355198606, 0.25498399156182616, 0.3023162192935591, 0.29418595422695626, 0.25066389979657666, 0.315659140722544, 0.29428801282405814, 0.2994800269980402], [0.2581693724158054, 0.232280830135128, 0.2776643458084518, 0.25843821295086755, 0.284017826782367, 0.28393291262639053, 0.2861550031557383, 0.28662479661184737, 0.22633077053253814, 0.27143975654101116], [0.27041345800904537, 0.23205479624731185, 0.30535600465467416, 0.2539182536997675, 0.26294555488787985, 0.26197272473046285, 0.26817959162736793, 0.22413186667914164, 0.2623714081446966, 0.2758184419268592], [0.2424569659285658, 0.2567297549917713, 0.3047590487450682, 0.27615039381319706, 0.24206384295969485, 0.31360017629385384, 0.25662107256191513, 0.23151370224636825, 0.26233500389073594, 0.253907363867679], [0.1898548712443331, 0.2339971394043343, 0.2721928447561113, 0.17690189036079174, 0.2094814898087094, 0.1461518894715108, 0.17634079850915274, 0.35994889694282195, 0.1469471720089226, 0.29439815683747783], [0.2480830295844676, 0.29863841455989704, 0.27479153617842655, 0.2824330878998853, 0.282497656527243, 0.29705328098180006, 0.3064033483675619, 0.31699269891982595, 0.3133056814544677, 0.262406124875449], [0.2661975275116988, 0.26759757063087397, 0.2770630499914142, 0.28831794920392806, 0.2591396206098646, 0.25048103419327017, 0.263353939648018, 0.29198337570208865, 0.27075077561090444, 0.3041421449129298], [0.35207725970107084, 0.2682384188355851, 0.3136219382534362, 0.2750455760149375, 0.25632244802921234, 0.31854450537345613, 0.34141142918091427, 0.29108289687970323, 0.2917093291352191, 0.3329358855924549], [0.29788669242470256, 0.3287268815052049, 0.4340278308105372, 0.2979663174331093, 0.37649779754212176, 0.23770441070384507, 0.298650389227725, 0.2825573855153025, 0.2685451513908803, 0.39754831388576184], [0.41611528609876514, 0.1589806424261866, 0.34663092302859244, 0.3915337748680865, 0.420466690592193, 0.38679446963714126, 0.2854030287097298, 0.27161210099923316, 0.2579309996733419, 0.3536960663184763], [0.3106619350193647, 0.2801711747757456, 0.3124705992230319, 0.34119350581915775, 0.3050581919411339, 0.3081896778397022, 0.27355051546433895, 0.3049764632851151, 0.2410379828358784, 0.31118242798656137], [0.29724260359351096, 0.22709050379092988, 0.2982333934705941, 0.2704104842227557, 0.2615748682444661, 0.26504601395385974, 0.24893161631278282, 0.237961526696437, 0.2380057705426024, 0.2576049823007649], [0.2863053863118963, 0.2580337760982325, 0.24555772080858507, 0.3063871176978772, 0.3067674262444804, 0.26489384906093516, 0.23661658758042892, 0.3274564971033205, 0.29312039911825627, 0.29690406945980374], [0.43634790306523374, 0.5235049656950985, 0.30539931734799985, 0.41193248725199494, 0.3499281986983136, 0.32828342636927843, 0.43455475632245966, 0.4024863851675273, 0.2744340410458719, 0.41994471765755126], [0.35795390579455866, 0.39860212011958085, 0.3785831020170307, 0.38486394193642637, 0.29519578685277237, 0.2731071170189714, 0.3687821220262055, 0.365334569060201, 0.28403353117768937, 0.2576611977724994], [0.2886738082826086, 0.32742782283754623, 0.3362035956634428, 0.287555697790868, 0.29927410736848303, 0.2939378370070673, 0.28916516556585137, 0.3068179199816208, 0.3022406765742698, 0.30505388200730543], [0.25949098941984117, 0.29213475169324177, 0.2589182280783606, 0.27855724138805504, 0.32438607749739656, 0.24604499843533523, 0.41035722164945465, 0.2780484352337278, 0.24797346299030876, 0.30581156043427393], [0.30677037378758953, 0.26226289327291186, 0.27563683839951336, 0.2750762637873021, 0.23412658065591652, 0.26051908967255066, 0.33519183321715484, 0.24943921446614503, 0.3007039865609986, 0.27031636642888346], [0.26109121011074876, 0.28711489687145164, 0.4046370837437778, 0.3615236804337889, 0.386714477233542, 0.27298857586942216, 0.2284743399143947, 0.40112492512788434, 0.23856266359844813, 0.3127498272674383], [0.351593815699637, 0.39986338925413856, 0.3909540026826752, 0.2676351602213094, 0.3453759861729919, 0.24871847665827262, 0.19108379857684143, 0.3603984338436832, 0.22038530694572556, 0.35180020294249736], [0.26098582996004094, 0.3625052461239662, 0.26738846590025256, 0.25109918759343186, 0.31759981210275345, 0.3219802664615723, 0.2674181509362037, 0.3158584858336071, 0.2629765895802674, 0.2853183218615256], [0.2750432065614601, 0.2270305297894506, 0.248332487919114, 0.29974419842185096, 0.3902116783453611, 0.2933055363345156, 0.2751199682853622, 0.22327147684821957, 0.2567955587491273, 0.24597260682732758], [0.26072138454412563, 0.24654483228206914, 0.26506275313036465, 0.30206771257109644, 0.32049369158331587, 0.31905614279492944, 0.263968314869119, 0.23651876190432652, 0.2652534079165836, 0.23382504739780874], [0.23947940423781855, 0.28306544147997226, 0.3611863613069368, 0.43870315605446253, 0.22549325468051684, 0.36812753921578745, 0.3923070022361572, 0.4348198164138801, 0.3520973626188062, 0.31095516230578646], [0.28535274596796745, 0.38465660688185555, 0.1333397834931458, 0.32920612461571475, 0.23492716867025276, 0.27849112799736586, 0.4014452660050396, 0.32585870081249535, 0.265787436260295, 0.2669602101084947], [0.27181064114008713, 0.2595613724837813, 0.2406221105059303, 0.2964092099721345, 0.2572447434336733, 0.3553096218445515, 0.37416221924459103, 0.2801038390134707, 0.36470049017163664, 0.29975660394247194], [0.24902958380501294, 0.2213085719962833, 0.2211012726759285, 0.21314613716900466, 0.24764574788417226, 0.2094241093969691, 0.20904724229455818, 0.24304089288502562, 0.23421374899254976, 0.2624086856577761], [0.32539993252789934, 0.36412162329080644, 0.28731281902128547, 0.32216065781279335, 0.3002204236418291, 0.264922885456663, 0.3018997936757919, 0.2813527917323242, 0.316012055671854, 0.2894436459876566], [0.341047209408027, 0.32162597420019523, 0.4568612225691262, 0.3057616101873242, 0.3652316492019496, 0.2789339795529786, 0.31964560952710164, 0.34182972757208674, 0.3884863811973869, 0.32265693131192297], [0.31968529264844125, 0.407510017407013, 0.2539838774245391, 0.20657363173714094, 0.2512642666558742, 0.32039208022783416, 0.19100475327477007, 0.21764636907461155, 0.20775324896524028, 0.2186965712634552], [0.32109841443144216, 0.32139338261828776, 0.35568326237685577, 0.32511409142489045, 0.3128734154202788, 0.3150941233601019, 0.3292923205700924, 0.36966447025224314, 0.3335181275205503, 0.3346677361727117], [0.29297977270502606, 0.27470036238135354, 0.29372015512000527, 0.2585154043038136, 0.2921608280211476, 0.3439867046767522, 0.32766621669936, 0.26504013630639633, 0.2968752618959485, 0.291320195301501], [0.3590323581777217, 0.3078918913440538, 0.2820316032240604, 0.3147866455148782, 0.27772963574361365, 0.29737303603093723, 0.3305362660976221, 0.2842629551818341, 0.30999995931015745, 0.3291547561169117], [0.30328989918727833, 0.2727258195082376, 0.29966366165466685, 0.37529828770541673, 0.3126191067806645, 0.25690870784137765, 0.34977071676996463, 0.382868594053448, 0.3581402097193265, 0.3553055687308757], [0.21909451644895883, 0.2250747808727076, 0.1925746451734125, 0.24816388187817306, 0.3351299991537511, 0.35018708028397816, 0.17515519231125998, 0.334531252734922, 0.1789333809377185, 0.21195688203065366], [0.2684848995093767, 0.32045959945045244, 0.2938656607844008, 0.35519054530590655, 0.2976616491901387, 0.32525022469073894, 0.324669359200636, 0.3388271391371753, 0.34267692225293755, 0.3465957942904767], [0.30797989299812745, 0.27336575013940934, 0.33329202427918503, 0.32525269246721766, 0.30921620374374514, 0.31472652420547176, 0.27765863062509455, 0.33970414989951436, 0.2956647568480397, 0.26669392581376883], [0.29931492956728123, 0.2829739942554683, 0.2544076144355305, 0.23967742583437834, 0.27310480809025783, 0.2596786263253228, 0.3217895581234522, 0.27910151020414187, 0.27401480678250856, 0.29752790716778277], [0.2678091075887137, 0.31300400776966963, 0.4076924654780023, 0.3189371168983297, 0.2864788933325846, 0.31822466472970046, 0.29509038741543403, 0.3594754979574102, 0.33221580233373116, 0.2732157728179949], [0.19728458017950246, 0.21740115525399784, 0.19907773600581935, 0.3005516845434091, 0.16440046676045927, 0.2717216588358755, 0.18124990255894247, 0.20706233040633704, 0.21418696014097627, 0.2738017982385341], [0.3156210291390953, 0.29732911497465064, 0.2919751925112064, 0.2738223258643142, 0.3179268412751801, 0.2772321346843345, 0.31607135392274843, 0.31042361392529516, 0.28536340214239386, 0.3046812987449581], [0.28854557780693346, 0.28838554544979145, 0.3008377093480301, 0.2754789365380299, 0.2572211165472784, 0.2932518824842347, 0.2786033868266502, 0.25159144625930097, 0.28186806814079013, 0.27835034795378677], [0.25801592929014694, 0.27226195636745354, 0.33955679510945336, 0.28254919131479594, 0.2695951232927456, 0.28696114584954513, 0.35891100096783823, 0.28534410215331674, 0.2830681210150061, 0.26488379929148387], [0.3306069125400013, 0.27007625492866305, 0.36084016381227757, 0.29264643703111526, 0.3407068946905305, 0.2918673240467258, 0.2969917395481003, 0.3863912053743799, 0.2675344183265582, 0.2879589650107386], [0.2089819149567571, 0.3481448028618406, 0.28884118366625566, 0.19953149984404117, 0.2518326320985338, 0.3321749554864062, 0.2551979830481148, 0.2143734445998815, 0.32449938528945754, 0.19202984033745585], [0.33636088790578267, 0.31627918611056405, 0.3334594412416605, 0.33653052627746227, 0.3077007837913137, 0.2975214412401277, 0.2913224483501833, 0.28800838793135686, 0.318345087834476, 0.3096110375273833], [0.3099716872772329, 0.2825857489224779, 0.2972159988165082, 0.25770358440561436, 0.30502113013401155, 0.2970829408870288, 0.2985565770883851, 0.31871313094013276, 0.2868919741777991, 0.2734252377005064]])
    '''
    # Get variance along different experiment dimensions
    resLen = resArr.shape[0]

    # Target draws; every 10 rows
    temp1 = np.arange(1, 13).tolist()[::2]
    temp2 = np.arange(1, 13).tolist()[1::2]
    inds1 = [10 * (j - 1) + i for j in temp1 for i in range(10)]
    inds2 = [10 * (j - 1) + i for j in temp2 for i in range(10)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varTarg1000 = np.var(grp1, ddof=1)  # 4.35x10^-3
    varTarg5000 = np.var(grp2, ddof=1)  # 3.70x10^-3
    meanTarg1000 = np.average(grp1)  # 0.274
    meanTarg5000 = np.average(grp2)  # 0.260
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grp1.flatten(), grp2.flatten())
    print(bartPval)  # 0.046
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grp1.flatten(), grp2.flatten())
    print(levenePval)  # 0.023
    # t test for means
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp2.flatten())
    print(ttestPval)  # 4.8x10^-5

    # Data draws; every 5 rows
    temp1 = np.arange(1, 25).tolist()[::2]
    temp2 = np.arange(1, 25).tolist()[1::2]
    inds1 = [5 * (j - 1) + i for j in temp1 for i in range(5)]
    inds2 = [5 * (j - 1) + i for j in temp2 for i in range(5)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varData500 = np.var(grp1, ddof=1)  # 4.11x10^-3
    varData1000 = np.var(grp2, ddof=1)  # 4.05x10^-3
    meanData500 = np.average(grp1)  # 0.268
    meanData1000 = np.average(grp2)  # 0.266
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grp1.flatten(), grp2.flatten())
    print(bartPval)  # 0.844
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grp1.flatten(), grp2.flatten())
    print(levenePval)  # 0.750
    # t test for means
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp2.flatten())
    print(ttestPval)  # 0.742

    # Bayes draws; groups of 40
    inds1 = [i for i in range(40)]
    inds2 = [i for i in range(40, 80)]
    inds3 = [i for i in range(80, 120)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    grp3 = resArr[inds3]
    varBayes1000 = np.var(grp1, ddof=1)  # 3.71x10^-3
    varBayes5000 = np.var(grp2, ddof=1)  # 3.02x10^-3
    varBayes10000 = np.var(grp3, ddof=1)  # 2.88x10^-3
    meanBayes1000 = np.average(grp1)  # 0.227
    meanBayes5000 = np.average(grp2)  # 0.276
    meanBayes10000 = np.average(grp3)  # 0.298
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grp1.flatten(), grp2.flatten())
    print(bartPval)  # 0.042
    _, bartPval = spstat.bartlett(grp1.flatten(), grp3.flatten())
    print(bartPval)  # 0.012
    _, bartPval = spstat.bartlett(grp2.flatten(), grp3.flatten())
    print(bartPval)  # 0.633
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grp1.flatten(), grp2.flatten())
    print(levenePval)  # 0.007
    _, levenePval = spstat.levene(grp1.flatten(), grp3.flatten())
    print(levenePval)  # 0.0007
    _, levenePval = spstat.levene(grp2.flatten(), grp3.flatten())
    print(levenePval)  # 0.487
    # t test for means
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp2.flatten())
    print(ttestPval)  # 1.30x10^-29
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp3.flatten())
    print(ttestPval)  # 3.60x10^-58
    _, ttestPval = spstat.ttest_ind(grp2.flatten(), grp3.flatten())
    print(ttestPval)  # 5.51x10^-9

    # Bayes neighbors amount; every 20 rows
    temp1 = np.arange(1, 6).tolist()[::2]
    temp2 = np.arange(1, 6).tolist()[1::2]
    inds1 = [20 * (j - 1) + i for j in temp1 for i in range(20)]
    inds2 = [20 * (j - 1) + i for j in temp2 for i in range(20)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varNeigh100 = np.var(grp1, ddof=1)  # 5.49x10^-3
    varNeigh1000 = np.var(grp2, ddof=1)  # 2.42x10^-3
    meanNeigh100 = np.average(grp1)  # 0.262
    meanNeigh1000 = np.average(grp2)  # 0.261
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grp1.flatten(), grp2.flatten())
    print(bartPval)  # 7.79x10^-18
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grp1.flatten(), grp2.flatten())
    print(levenePval)  # 2.44x10^-13
    # t test for means
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp2.flatten())
    print(ttestPval)  # 0.914

    # Now do comparisons against maximal factor set
    # Bayes draws
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(35, 40)
    inds2 = np.arange(75, 80)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]

    varTargMax = np.var(grpMax, ddof=1)  # 1.61x10^-3
    varTarg1000 = np.var(grp1, ddof=1)  # 1.87x10^-3
    varTarg5000 = np.var(grp2, ddof=1)  # 1.78x10^-3
    meanTargMax = np.average(grpMax)  # 0.294
    meanTarg1000 = np.average(grp1)  # 0.246
    meanTarg5000 = np.average(grp2)  # 0.262
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grpMax.flatten(), grp1.flatten())
    print(bartPval)  # 0.599
    _, bartPval = spstat.bartlett(grpMax.flatten(), grp2.flatten())
    print(bartPval)  # 0.732
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grpMax.flatten(), grp1.flatten())
    print(levenePval)  # 0.619
    _, levenePval = spstat.levene(grpMax.flatten(), grp2.flatten())
    print(levenePval)  # 0.972
    # t test for means
    _, ttestPval = spstat.ttest_ind(grpMax.flatten(), grp1.flatten())
    print(ttestPval)  # 1.17x10^-7
    _, ttestPval = spstat.ttest_ind(grpMax.flatten(), grp2.flatten())
    print(ttestPval)  # 1.56x10^-4

    # Bayes neighbors
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(95, 100)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]

    varNeighMax = np.var(grpMax, ddof=1)  # 1.61x10^-3
    varNeigh100 = np.var(grp1, ddof=1)  # 4.10x10^-3
    meanNeighMax = np.average(grpMax)  # 0.294
    meanNeigh100 = np.average(grp1)  # 0.287
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grpMax.flatten(), grp1.flatten())
    print(bartPval)  # 0.0013
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grpMax.flatten(), grp1.flatten())
    print(levenePval)  # 0.0102
    # t test for means
    _, ttestPval = spstat.ttest_ind(grpMax.flatten(), grp1.flatten())
    print(ttestPval)  # 0.492

    # Target draws
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(105, 110)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]

    varTargMax = np.var(grpMax, ddof=1)  # 1.61x10^-3
    varTarg1000 = np.var(grp1, ddof=1)  # 2.40x10^-3
    meanTargMax = np.average(grpMax)  # 0.294
    meanTarg1000 = np.average(grp1)  # 0.302
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grpMax.flatten(), grp1.flatten())
    print(bartPval)  # 0.168
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grpMax.flatten(), grp1.flatten())
    print(levenePval)  # 0.235
    # t test for means
    _, ttestPval = spstat.ttest_ind(grpMax.flatten(), grp1.flatten())
    print(ttestPval)  # 0.395

    # Data draws
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(110, 115)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]

    varDataMax = np.var(grpMax, ddof=1)  # 1.61x10^-3
    varData500 = np.var(grp1, ddof=1)  # 1.92x10^-3
    meanDataMax = np.average(grpMax)  # 0.294
    meanData500 = np.average(grp1)  # 0.279
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grpMax.flatten(), grp1.flatten())
    print(bartPval)  # 0.547
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grpMax.flatten(), grp1.flatten())
    print(levenePval)  # 0.893
    # t test for means
    _, ttestPval = spstat.ttest_ind(grpMax.flatten(), grp1.flatten())
    print(ttestPval)  # 0.081

    '''
    # Form CIs for mean and variance
    alpha = 0.05  # significance level = 5%

    n = len(arr)  # sample sizes
    s2 = np.var(arr, ddof=1)  # sample variance
    df = n - 1  # degrees of freedom

    upper = (n - 1) * s2 / stats.chi2.ppf(alpha / 2, df)
    lower = (n - 1) * s2 / stats.chi2.ppf(1 - alpha / 2, df)
    '''

    ##########################
    # Set new parameter lists for new set of experiments (PART 2)
    bayesNumList = [10000, 15000]
    bayesNeighNumList = [1000, 2000]
    targNumList = [1000, 5000]
    dataNumList = [500, 2000]
    numReps = 10
    numchains = 5

    # Iterate through each chain 10 times
    resArr = np.zeros(
        (len(bayesNumList) * len(bayesNeighNumList) * len(targNumList) * len(dataNumList) * numchains, numReps))
    resInd = -1
    iterStr = ['' for i in range(resArr.shape[0])]
    for bayesNumInd, bayesNum in enumerate(bayesNumList):
        for bayesNeighNumInd, bayesNeighNum in enumerate(bayesNeighNumList):
            for targNumInd, targNum in enumerate(targNumList):
                for dataNumInd, dataNum in enumerate(dataNumList):
                    for m in range(numchains):
                        resInd += 1
                        iterName = str(bayesNum) + ', ' + str(bayesNeighNum) + ', ' + str(targNum) + ', ' + str(
                            dataNum) + ', ' + str(m)
                        print(iterName)
                        iterStr[resInd] = str(bayesNum) + '\n' + str(bayesNeighNum) + '\n' + str(targNum) + '\n' + str(
                            dataNum) + '\n' + str(m)
                        for rep in range(numReps):
                            dictTemp = CSdict3.copy()
                            dictTemp.update({'postSamples': chainArr[m][choice(np.arange(numdraws), size=targNum,
                                                                               replace=False)],
                                             'numPostSamples': targNum})
                            # Bayes draws
                            setDraws = chainArr[m][choice(np.arange(numdraws), size=bayesNum, replace=False)]
                            lossDict.update({'bayesEstNeighborNum': bayesNeighNum})
                            lossDict.update({'bayesDraws': setDraws})
                            print('Generating loss matrix...')
                            tempLossMat = lf.lossMatSetBayesDraws(dictTemp['postSamples'], lossDict.copy(),
                                                                  lossDict['bayesDraws'])
                            tempLossDict = lossDict.copy()
                            tempLossDict.update({'lossMat': tempLossMat})
                            newBayesDraws, newLossMat = lf.add_cand_neighbors(tempLossDict.copy(), chainArr[m],
                                                                              dictTemp['postSamples'])
                            tempLossDict.update({'bayesDraws': newBayesDraws, 'lossMat': newLossMat})
                            baseLoss = (np.sum(newLossMat, axis=1) / newLossMat.shape[1]).min()
                            utilDict.update({'dataDraws': setDraws[
                                choice(np.arange(len(setDraws)), size=dataNum, replace=False)]})
                            currCompUtil = baseLoss - \
                                           sampf.sampling_plan_loss(priordatadict=dictTemp, lossdict=tempLossDict,
                                                                    designlist=[des], numtests=sampBudget,
                                                                    utildict=utilDict)[0]
                            resArr[resInd, rep] = currCompUtil
                    for j in range(4):
                        lo, hi = 20 * j, 20 * j + 20
                        plt.boxplot(resArr[lo:hi, :].T)
                        plt.xticks(np.arange(hi - lo), iterStr[lo:hi], fontsize=6)
                        plt.subplots_adjust(bottom=0.15)
                        plt.ylim([0, 0.5])
                        plt.title('Inspection of Variance\n$|\Gamma_{Bayes}|$, $|\Gamma_{BayesNeigh}|$,'
                                  '$|\Gamma_{targ}|$, $|\Gamma_{data}|$, Chain Index')
                        plt.show()
                        plt.close()
    '''22-APR
    resArr = np.array([[0.27597401, 0.29988675, 0.30104938, 0.32304572, 0.28754081,
        0.30899874, 0.36598276, 0.30588716, 0.32687921, 0.31461262],
       [0.30394838, 0.30776385, 0.35317957, 0.37115511, 0.30540667,
        0.29961918, 0.31988304, 0.33948857, 0.3434651 , 0.28316895],
       [0.3968782 , 0.23065553, 0.20307554, 0.34674985, 0.31970884,
        0.30927183, 0.37896378, 0.22700724, 0.35593151, 0.23143222],
       [0.344063  , 0.3376288 , 0.3080869 , 0.35500965, 0.27386548,
        0.32556244, 0.28241506, 0.32806847, 0.3632143 , 0.33143567],
       [0.2886603 , 0.3174955 , 0.30768571, 0.33875895, 0.32475755,
        0.28315483, 0.31396854, 0.30894357, 0.35311935, 0.31152978],
       [0.33255513, 0.28070121, 0.309488  , 0.30038082, 0.27427409,
        0.32460188, 0.28229887, 0.27802926, 0.27637678, 0.33246518],
       [0.32581346, 0.3048616 , 0.34040124, 0.35116779, 0.3410094 ,
        0.28393519, 0.30415774, 0.28561415, 0.27822089, 0.40345423],
       [0.27478713, 0.18485624, 0.30301957, 0.36162621, 0.17181541,
        0.32749743, 0.34248156, 0.22804031, 0.36238694, 0.30185755],
       [0.35602135, 0.33869381, 0.36134128, 0.34870038, 0.33623937,
        0.31170478, 0.32546392, 0.32172619, 0.31526609, 0.31926501],
       [0.27010201, 0.31724659, 0.26119398, 0.2887594 , 0.32290632,
        0.30897668, 0.31530684, 0.29440611, 0.29958302, 0.2766982 ],
       [0.28502553, 0.28869483, 0.27046135, 0.27704691, 0.29044713,
        0.29822921, 0.29878234, 0.28113889, 0.26644756, 0.2649549 ],
       [0.33511915, 0.29460945, 0.29267883, 0.31440559, 0.3057024 ,
        0.27399106, 0.2807178 , 0.27493034, 0.41084704, 0.30513875],
       [0.33364718, 0.39136444, 0.19024355, 0.19455823, 0.36120272,
        0.30154218, 0.19628844, 0.18839294, 0.19045461, 0.27415902],
       [0.3112707 , 0.27692498, 0.27612938, 0.31214909, 0.2724307 ,
        0.3232397 , 0.28008074, 0.28479596, 0.30668176, 0.32338417],
       [0.28722452, 0.28208295, 0.33170525, 0.27173091, 0.28714747,
        0.2717415 , 0.28247114, 0.35214773, 0.27531396, 0.30954698],
       [0.28505925, 0.23744546, 0.28078685, 0.28852394, 0.32720302,
        0.28449659, 0.28657384, 0.25196582, 0.26409925, 0.26209694],
       [0.27538695, 0.29802713, 0.29924548, 0.27527414, 0.37205293,
        0.31613149, 0.313683  , 0.33365892, 0.30936946, 0.27413129],
       [0.29859219, 0.20081194, 0.19579545, 0.19655723, 0.28523956,
        0.17443124, 0.30929741, 0.20172396, 0.38849737, 0.33484309],
       [0.30758719, 0.28633595, 0.31471785, 0.30792798, 0.31697122,
        0.32209431, 0.3275952 , 0.31071383, 0.30147179, 0.30648198],
       [0.29452929, 0.26432216, 0.27801327, 0.29148763, 0.30228555,
        0.2862107 , 0.30122005, 0.27032963, 0.25975357, 0.28131405],
       [0.29186043, 0.31115992, 0.32949638, 0.3128932 , 0.34687085,
        0.32338138, 0.34168743, 0.33763609, 0.30560104, 0.27289443],
       [0.2641409 , 0.27240661, 0.37668345, 0.28794136, 0.34351839,
        0.30378014, 0.29872768, 0.32543505, 0.34410838, 0.34859564],
       [0.22899349, 0.34535897, 0.2092266 , 0.3251166 , 0.27742811,
        0.21872507, 0.34980352, 0.21998863, 0.32766387, 0.44472524],
       [0.30889688, 0.329799  , 0.35577448, 0.31324884, 0.28027963,
        0.32027111, 0.32440108, 0.35488938, 0.3459005 , 0.32497622],
       [0.35972648, 0.32350182, 0.30910376, 0.34412174, 0.33370081,
        0.34196899, 0.4157059 , 0.33848754, 0.36271978, 0.31930333],
       [0.32795483, 0.33652446, 0.30532009, 0.381963  , 0.33817567,
        0.30865661, 0.29624257, 0.30987589, 0.27561867, 0.31659691],
       [0.29670805, 0.35693328, 0.35076361, 0.34170693, 0.31728447,
        0.35025515, 0.28495422, 0.311795  , 0.34194338, 0.29704819],
       [0.19374414, 0.34494005, 0.33064966, 0.18895247, 0.25586035,
        0.24170666, 0.23327591, 0.22502701, 0.24600841, 0.24390733],
       [0.33527459, 0.31853113, 0.35523281, 0.35814034, 0.34086498,
        0.32677587, 0.34471101, 0.35096666, 0.34418165, 0.34565148],
       [0.33036952, 0.32947361, 0.32556825, 0.34693042, 0.33786042,
        0.30748901, 0.33662878, 0.28250083, 0.3152444 , 0.33495651],
       [0.30538819, 0.2969716 , 0.29841624, 0.25914698, 0.29096144,
        0.27381714, 0.31062141, 0.31972892, 0.3648432 , 0.27868679],
       [0.30566429, 0.2839846 , 0.30076283, 0.29828198, 0.32418972,
        0.28330744, 0.2703093 , 0.30207062, 0.35202722, 0.40792719],
       [0.24594494, 0.23066234, 0.15223295, 0.33474344, 0.34855582,
        0.23000266, 0.17892615, 0.2944293 , 0.33335578, 0.18822681],
       [0.32409799, 0.34414703, 0.31700796, 0.31898464, 0.35611338,
        0.31215233, 0.29876023, 0.34335044, 0.30330297, 0.30271088],
       [0.29923219, 0.35074488, 0.30000792, 0.31731633, 0.32979308,
        0.27311594, 0.28831082, 0.34917042, 0.32239028, 0.30016481],
       [0.31539954, 0.3103449 , 0.31387417, 0.30628343, 0.29285432,
        0.31369491, 0.3165334 , 0.28371692, 0.30032045, 0.35730786],
       [0.30765067, 0.29917518, 0.27820702, 0.33270822, 0.29582716,
        0.33781061, 0.27043243, 0.33478757, 0.31307516, 0.33567529],
       [0.33142464, 0.22860046, 0.2035032 , 0.21398127, 0.19489734,
        0.34309815, 0.23214545, 0.24262933, 0.30142566, 0.22186491],
       [0.33985896, 0.30810392, 0.30887206, 0.35344262, 0.32560253,
        0.33294838, 0.3450445 , 0.34901714, 0.33753679, 0.34862387],
       [0.35340422, 0.29685698, 0.26998555, 0.27973781, 0.25424301,
        0.3127374 , 0.29082191, 0.31512495, 0.30169863, 0.32110062],
       [0.34927641, 0.3735124 , 0.32372125, 0.31099356, 0.30020711,
        0.31464216, 0.25688524, 0.28510367, 0.30629913, 0.28796143],
       [0.37685604, 0.28437484, 0.34169293, 0.32890124, 0.2994338 ,
        0.32897442, 0.33041644, 0.33513027, 0.36107515, 0.25404872],
       [0.23705211, 0.23626646, 0.31371858, 0.35280343, 0.20890118,
        0.22681174, 0.21441503, 0.44297122, 0.35595195, 0.37939911],
       [0.38197318, 0.30846354, 0.34382321, 0.3342251 , 0.35028191,
        0.36983588, 0.33536754, 0.33221748, 0.34758265, 0.33864964],
       [0.38039067, 0.3026821 , 0.34543465, 0.30342327, 0.3272775 ,
        0.28832572, 0.39395401, 0.31568795, 0.30530637, 0.28145865],
       [0.30847548, 0.32466222, 0.29821698, 0.273489  , 0.38176391,
        0.33213213, 0.30954643, 0.32270349, 0.35745358, 0.33370123],
       [0.3079301 , 0.33102   , 0.33865062, 0.30618993, 0.31392291,
        0.38554554, 0.3213965 , 0.40813405, 0.36988721, 0.38415795],
       [0.2225715 , 0.21744545, 0.33890715, 0.20701091, 0.25025408,
        0.23545868, 0.26241781, 0.26816585, 0.37969687, 0.32116507],
       [0.34938355, 0.34870455, 0.33792003, 0.35983152, 0.31242364,
        0.3414859 , 0.3046545 , 0.38120305, 0.30459257, 0.35019322],
       [0.31259209, 0.3081198 , 0.29248472, 0.33212056, 0.31373884,
        0.32228437, 0.31898186, 0.31421701, 0.3356243 , 0.34217186],
       [0.27887546, 0.29124443, 0.26202007, 0.32718898, 0.2691889 ,
        0.28014468, 0.28948109, 0.26998768, 0.32625016, 0.29210264],
       [0.23941321, 0.29379704, 0.33391712, 0.30502989, 0.33167109,
        0.32178508, 0.415437  , 0.29762602, 0.29786391, 0.29075178],
       [0.31773825, 0.21563429, 0.21463498, 0.20534175, 0.22294093,
        0.36713728, 0.29885398, 0.19907902, 0.17740641, 0.18992399],
       [0.2964544 , 0.26990329, 0.30728956, 0.31975124, 0.32987084,
        0.29794371, 0.34552539, 0.29684399, 0.30991019, 0.31503308],
       [0.25906207, 0.29419014, 0.29220882, 0.28903653, 0.29434702,
        0.26271462, 0.31336007, 0.36730109, 0.28805526, 0.26371233],
       [0.2934554 , 0.30607461, 0.31774399, 0.28049999, 0.26808554,
        0.26400951, 0.27932914, 0.26768126, 0.30132073, 0.28894346],
       [0.45867504, 0.36568562, 0.3246563 , 0.32988945, 0.29655516,
        0.3282639 , 0.32431653, 0.35478675, 0.26885814, 0.32735131],
       [0.24474075, 0.18959339, 0.21485083, 0.22577744, 0.31295384,
        0.34675789, 0.32742414, 0.20139459, 0.21893201, 0.19302733],
       [0.35695645, 0.31365503, 0.3311796 , 0.31654479, 0.33313616,
        0.30527364, 0.32135945, 0.31827691, 0.32364088, 0.28672454],
       [0.29822604, 0.29349868, 0.31220522, 0.3006019 , 0.30054556,
        0.27448303, 0.29025189, 0.28701033, 0.27942957, 0.28848171],
       [0.32052861, 0.3114543 , 0.33499252, 0.32189797, 0.30789329,
        0.30752451, 0.28868449, 0.3641609 , 0.31219053, 0.3103846 ],
       [0.33020104, 0.36023303, 0.33085061, 0.3134343 , 0.39593376,
        0.32249614, 0.31285717, 0.33945568, 0.38582121, 0.28723797],
       [0.36368908, 0.27750968, 0.35618369, 0.26895882, 0.22825962,
        0.2112121 , 0.33223864, 0.26717602, 0.25714482, 0.3656594 ],
       [0.36540989, 0.35687114, 0.39176875, 0.38969862, 0.30615773,
        0.3369973 , 0.35332973, 0.35602624, 0.30550046, 0.37735837],
       [0.3791351 , 0.36750667, 0.34177008, 0.31835564, 0.421749  ,
        0.30832525, 0.37654064, 0.35451154, 0.32591876, 0.36907831],
       [0.30738113, 0.29614758, 0.33350159, 0.30665128, 0.32288939,
        0.33937634, 0.30868661, 0.31307908, 0.2846633 , 0.35097549],
       [0.4218525 , 0.33925799, 0.3771681 , 0.31716345, 0.32996881,
        0.32510837, 0.32086682, 0.39453237, 0.34486583, 0.31733519],
       [0.24940838, 0.25980674, 0.28298877, 0.26221678, 0.28276203,
        0.25183679, 0.26808985, 0.25929537, 0.26347733, 0.37044857],
       [0.37940595, 0.35952675, 0.36695347, 0.37668385, 0.32529917,
        0.36696027, 0.35396661, 0.34382545, 0.38916263, 0.33848599],
       [0.32781202, 0.36948748, 0.42150062, 0.41688437, 0.32737777,
        0.3414123 , 0.34060444, 0.31864944, 0.31764213, 0.32704243],
       [0.30863178, 0.28773624, 0.30156804, 0.29902303, 0.28644097,
        0.3118128 , 0.25921496, 0.29769457, 0.3075027 , 0.27663708],
       [0.29158127, 0.31249646, 0.31680965, 0.3473655 , 0.28856199,
        0.32273494, 0.29323787, 0.32241511, 0.29976037, 0.24617994],
       [0.3379009 , 0.31670624, 0.33453265, 0.34981356, 0.36933908,
        0.23902946, 0.21478655, 0.2119762 , 0.22432865, 0.20943269],
       [0.31584773, 0.31806662, 0.31995323, 0.31890042, 0.35425137,
        0.3488193 , 0.34123605, 0.33773845, 0.33663259, 0.32250903],
       [0.30589063, 0.3273981 , 0.33661005, 0.310657  , 0.30162745,
        0.3357336 , 0.38640263, 0.31049895, 0.31846543, 0.30010173],
       [0.31739976, 0.31619723, 0.30311884, 0.30581673, 0.30025978,
        0.31806078, 0.28035233, 0.28955718, 0.28093968, 0.30091907],
       [0.29974377, 0.37186595, 0.33147383, 0.34564877, 0.28478455,
        0.3350422 , 0.2971473 , 0.3067706 , 0.31244294, 0.31820973],
       [0.24297701, 0.23391579, 0.23714524, 0.23214727, 0.18658462,
        0.19688204, 0.24252821, 0.22220898, 0.32570754, 0.26471585],
       [0.32801805, 0.33445801, 0.32739206, 0.32443805, 0.3376865 ,
        0.34005359, 0.34239803, 0.32036799, 0.33448276, 0.33216571],
       [0.30873846, 0.30091163, 0.32356041, 0.31898997, 0.29131507,
        0.29828764, 0.33042471, 0.31100733, 0.34261162, 0.32712988]])
        '''
    # Get statistics
    # Get variance along different experiment dimensions
    resLen = resArr.shape[0]

    # Bayes draws; groups of 40
    inds1 = [i for i in range(40)]
    inds2 = [i for i in range(40, resLen)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varBayes10 = np.var(grp1, ddof=1)  # 1.92x10^-3
    varBayes15 = np.var(grp2, ddof=1)  # 2.11x10^-3
    meanBayes10 = np.average(grp1)  # 0.304
    meanBayes15 = np.average(grp2)  # 0.312

    # Bayes neighbors amount; every 20 rows
    temp1 = np.arange(1, 5).tolist()[::2]
    temp2 = np.arange(1, 5).tolist()[1::2]
    inds1 = [20 * (j - 1) + i for j in temp1 for i in range(20)]
    inds2 = [20 * (j - 1) + i for j in temp2 for i in range(20)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varNeigh1 = np.var(grp1, ddof=1)  # 2.08x10^-3
    varNeigh2 = np.var(grp2, ddof=1)  # 1.93x10^-3
    meanNeigh1 = np.average(grp1)  # 0.303
    meanNeigh2 = np.average(grp2)  # 0.313

    # Target draws; every 10 rows
    temp1 = np.arange(1, 9).tolist()[::2]
    temp2 = np.arange(1, 9).tolist()[1::2]
    inds1 = [10 * (j - 1) + i for j in temp1 for i in range(10)]
    inds2 = [10 * (j - 1) + i for j in temp2 for i in range(10)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varTarg1000 = np.var(grp1, ddof=1)  # 1.91x10^-3
    varTarg5000 = np.var(grp2, ddof=1)  # 1.89x10^-3
    meanTarg1000 = np.average(grp1)  # 0.319
    meanTarg5000 = np.average(grp2)  # 0.296

    # Data draws; every 5 rows
    temp1 = np.arange(1, 17).tolist()[::2]
    temp2 = np.arange(1, 17).tolist()[1::2]
    inds1 = [5 * (j - 1) + i for j in temp1 for i in range(5)]
    inds2 = [5 * (j - 1) + i for j in temp2 for i in range(5)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varData500 = np.var(grp1, ddof=1)  # 2.10x10^-3
    varData2000 = np.var(grp2, ddof=1)  # 1.96x10^-3
    meanData500 = np.average(grp1)  # 0.309
    meanData2000 = np.average(grp2)  # 0.307

    # Now do comparisons against maximal factor set
    # Bayes draws
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(35, 40)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]

    varBayesMax = np.var(grpMax, ddof=1)  # 1.60x10^-3
    varBayes10000 = np.var(grp1, ddof=1)  # 1.68x10^-3
    meanBayesMax = np.average(grpMax)  # 0.302
    meanBayes10000 = np.average(grp1)  # 0.301

    # Neighbors
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(55, 60)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]

    varNeighMax = np.var(grpMax, ddof=1)  # 1.60x10^-3
    varNeigh1000 = np.var(grp1, ddof=1)  # 2.23x10^-3
    meanNeighMax = np.average(grpMax)  # 0.302
    meanNeigh1000 = np.average(grp1)  # 0.297

    # Target draws
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(65, 70)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]

    varTargMax = np.var(grpMax, ddof=1)  # 1.60x10^-3
    varTarg1000 = np.var(grp1, ddof=1)  # 1.90x10^-3
    meanTargMax = np.average(grpMax)  # 0.302
    meanTarg1000 = np.average(grp1)  # 0.330

    # Data draws
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(70, 75)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]

    varDataMax = np.var(grpMax, ddof=1)  # 1.60x10^-3
    varData500 = np.var(grp1, ddof=1)  # 1.50x10^-3
    meanDataMax = np.average(grpMax)  # 0.302
    meanData500 = np.average(grp1)  # 0.306

    # Look at runs that differ by one factor from maximal set of first batch of runs
    # increase Bayes to 15k

    ############
    # Now add ability to get Bayes neighbors from multiple MCMC chains (PART 3)
    bayesNumList = [10000, 15000]
    bayesNeighNumList = [2000, 4000]
    targNum = 5000
    dataNum = 2000
    numNeighChainList = [1, 2, 3, 4]

    numReps = 10
    numchains = 5

    # Iterate through each chain 10 times
    resArr = np.zeros(
        (len(bayesNumList) * len(bayesNeighNumList) * len(numNeighChainList) * numchains, numReps))
    resInd = -1
    iterStr = ['' for i in range(resArr.shape[0])]
    for bayesNumInd, bayesNum in enumerate(bayesNumList):
        for bayesNeighNumInd, bayesNeighNum in enumerate(bayesNeighNumList):
            for numNeighChainInd, numNeighChain in enumerate(numNeighChainList):
                for m in range(numchains):
                    resInd += 1
                    iterName = str(bayesNum) + ', ' + str(bayesNeighNum) + ', ' + str(numNeighChain) + ', ' + str(m)
                    print(iterName)
                    iterStr[resInd] = str(bayesNum) + '\n' + str(bayesNeighNum) + '\n' + str(
                        numNeighChain) + '\n' + str(m)
                    for rep in range(numReps):
                        dictTemp = CSdict3.copy()
                        dictTemp.update({'postSamples': chainArr[m][choice(np.arange(numdraws), size=targNum,
                                                                           replace=False)], 'numPostSamples': targNum})
                        # Bayes draws
                        setDraws = chainArr[m][choice(np.arange(numdraws), size=bayesNum, replace=False)]
                        lossDict.update({'bayesEstNeighborNum': bayesNeighNum})
                        lossDict.update({'bayesDraws': setDraws})
                        print('Generating loss matrix...')
                        tempLossMat = lf.lossMatSetBayesDraws(dictTemp['postSamples'], lossDict.copy(),
                                                              lossDict['bayesDraws'])
                        tempLossDict = lossDict.copy()
                        tempLossDict.update({'lossMat': tempLossMat})
                        # Compile array for Bayes neighbors from random choice of chains
                        tempChainArr = chainArr[choice(np.arange(M), size=numNeighChain, replace=False).tolist()]
                        for jj in range(numNeighChain):
                            if jj == 0:
                                concChainArr = tempChainArr[0]
                            else:
                                concChainArr = np.vstack((concChainArr, tempChainArr[jj]))
                        newBayesDraws, newLossMat = lf.add_cand_neighbors(tempLossDict.copy(), concChainArr,
                                                                          dictTemp['postSamples'])
                        tempLossDict.update({'bayesDraws': newBayesDraws, 'lossMat': newLossMat})
                        baseLoss = (np.sum(newLossMat, axis=1) / newLossMat.shape[1]).min()
                        utilDict.update({'dataDraws': setDraws[
                            choice(np.arange(len(setDraws)), size=dataNum, replace=False)]})
                        currCompUtil = baseLoss - \
                                       sampf.sampling_plan_loss(priordatadict=dictTemp, lossdict=tempLossDict,
                                                                designlist=[des], numtests=sampBudget,
                                                                utildict=utilDict)[0]
                        resArr[resInd, rep] = currCompUtil
                for j in range(4):
                    lo, hi = 20 * j, 20 * j + 20
                    plt.boxplot(resArr[lo:hi, :].T)
                    plt.xticks(np.arange(1, hi - lo + 1), iterStr[lo:hi], fontsize=6)
                    plt.subplots_adjust(bottom=0.15)
                    plt.ylim([0, 0.5])
                    plt.title(
                        'Inspection of Variance\n$|\Gamma_{Bayes}|$, $|\Gamma_{BayesNeigh}|$, Num. Neigh. Chains, Chain Index')
                    plt.show()
                    plt.close()
    '''
    resArr = np.array([[0.2779316 , 0.26541592, 0.31676747, 0.34404681, 0.27310724,
        0.32002819, 0.28829626, 0.27907366, 0.2568152 , 0.29456291],
       [0.27040397, 0.3325401 , 0.21295866, 0.34016116, 0.25207318,
        0.39235419, 0.26317679, 0.31035112, 0.2829846 , 0.37246079],
       [0.23307338, 0.23415674, 0.29152091, 0.27722856, 0.31733787,
        0.28987969, 0.26951077, 0.26859488, 0.28327954, 0.26110834],
       [0.24818325, 0.34452598, 0.36141818, 0.29215368, 0.23872844,
        0.28008976, 0.2205766 , 0.25088128, 0.26095836, 0.31917039],
       [0.3087232 , 0.29920395, 0.32102196, 0.32611175, 0.23819894,
        0.36110365, 0.31782448, 0.29745541, 0.27895236, 0.22896036],
       [0.26189522, 0.28188496, 0.2664223 , 0.34962971, 0.30267351,
        0.32877899, 0.30389138, 0.33858702, 0.23354725, 0.23979945],
       [0.27879595, 0.29557235, 0.23180437, 0.29106747, 0.26817005,
        0.21792099, 0.30130255, 0.28217315, 0.29665542, 0.29507827],
       [0.27872542, 0.25600857, 0.22273559, 0.31811245, 0.27438191,
        0.30034518, 0.33357768, 0.25133742, 0.30587216, 0.30007098],
       [0.21825488, 0.27768276, 0.23329567, 0.30783236, 0.28422985,
        0.23075016, 0.33035724, 0.31814168, 0.27202542, 0.26988235],
       [0.32303864, 0.27556618, 0.28171787, 0.2897807 , 0.2742801 ,
        0.2048776 , 0.3072947 , 0.25266103, 0.28353967, 0.29040171],
       [0.31198841, 0.32629004, 0.32852536, 0.2542687 , 0.31422283,
        0.30773554, 0.23425665, 0.29666634, 0.24806321, 0.31451789],
       [0.36943602, 0.32125313, 0.22204418, 0.30462185, 0.25506843,
        0.24463514, 0.32876897, 0.18489204, 0.25987833, 0.27100255],
       [0.21425395, 0.27330661, 0.30501526, 0.29158134, 0.23915231,
        0.29573366, 0.32116625, 0.32438952, 0.25156063, 0.31420658],
       [0.26246819, 0.29428913, 0.29083174, 0.24857258, 0.30535221,
        0.29839263, 0.30231425, 0.24628741, 0.26025152, 0.28140216],
       [0.31446202, 0.28776122, 0.28941856, 0.31758623, 0.34930964,
        0.28257726, 0.33384549, 0.3092367 , 0.32894624, 0.26909403],
       [0.27466592, 0.27096388, 0.32646685, 0.25165792, 0.36700191,
        0.26432288, 0.2044264 , 0.2912096 , 0.31372379, 0.23349041],
       [0.24968727, 0.2956716 , 0.28120221, 0.26817814, 0.28994181,
        0.28249429, 0.33338555, 0.2612378 , 0.31392062, 0.25234642],
       [0.32151936, 0.31080253, 0.31479003, 0.31237514, 0.2776966 ,
        0.29520132, 0.28217975, 0.33132215, 0.27699769, 0.30612875],
       [0.35984509, 0.27521474, 0.26379909, 0.31508846, 0.2822342 ,
        0.24422925, 0.28279049, 0.27480781, 0.30893576, 0.36500423],
       [0.31269018, 0.24806528, 0.23275791, 0.34581345, 0.28955276,
        0.28571031, 0.27077392, 0.24622637, 0.31327329, 0.29705535],
       [0.33242601, 0.29411735, 0.32298606, 0.34746646, 0.31970646,
        0.32059495, 0.2899927 , 0.32749465, 0.24598207, 0.24194686],
       [0.35417408, 0.3188854 , 0.33370053, 0.31839497, 0.34880323,
        0.32394403, 0.27153698, 0.36228941, 0.25390673, 0.2287884 ],
       [0.33571647, 0.33204058, 0.24651802, 0.28785459, 0.32296764,
        0.27878437, 0.27692359, 0.32608803, 0.24660379, 0.32343916],
       [0.28470447, 0.33681172, 0.30478429, 0.27309235, 0.34840353,
        0.29775149, 0.30730089, 0.30149181, 0.32858558, 0.26010766],
       [0.24266417, 0.33360331, 0.36504511, 0.32666799, 0.31315611,
        0.29846367, 0.35604681, 0.32740939, 0.293361  , 0.32452671],
       [0.30388137, 0.29507704, 0.26887967, 0.34576741, 0.28032486,
        0.23410846, 0.25382461, 0.28827141, 0.26633125, 0.24979835],
       [0.29407103, 0.26752219, 0.35335319, 0.18996564, 0.28715081,
        0.34036144, 0.32820155, 0.36267737, 0.35520678, 0.24035758],
       [0.28285683, 0.32781329, 0.27574204, 0.26898623, 0.27326675,
        0.29464628, 0.27044767, 0.31703778, 0.31671731, 0.31151417],
       [0.28730395, 0.29681805, 0.30738819, 0.35800613, 0.22105331,
        0.29008401, 0.25631921, 0.32397739, 0.28306379, 0.31995199],
       [0.33821072, 0.38625282, 0.24930536, 0.34060987, 0.26294842,
        0.26642912, 0.32425812, 0.32666028, 0.35361712, 0.29577693],
       [0.27587487, 0.29902263, 0.2393131 , 0.3000553 , 0.20712997,
        0.27313509, 0.25247638, 0.31708501, 0.29742274, 0.2805551 ],
       [0.33793287, 0.3017518 , 0.27958106, 0.35568117, 0.28582997,
        0.28823858, 0.32091967, 0.29053009, 0.3059439 , 0.29681792],
       [0.36630064, 0.36081767, 0.30061468, 0.29755828, 0.34490748,
        0.31020329, 0.3117825 , 0.27210216, 0.3396706 , 0.24034184],
       [0.35786458, 0.27200413, 0.32420261, 0.25015354, 0.30116948,
        0.31049742, 0.33035091, 0.30191585, 0.26585336, 0.34759901],
       [0.32744233, 0.31472791, 0.27648577, 0.39180368, 0.28761758,
        0.20372596, 0.31963961, 0.34078871, 0.30709172, 0.28721538],
       [0.33262464, 0.36432568, 0.27793084, 0.31654044, 0.30382557,
        0.27075228, 0.27025935, 0.27646558, 0.36902565, 0.30326201],
       [0.31356365, 0.32589318, 0.27529768, 0.29319969, 0.29361475,
        0.2466169 , 0.30525121, 0.27921645, 0.28810543, 0.34165771],
       [0.19083796, 0.31443223, 0.35623288, 0.33456236, 0.2686475 ,
        0.24327394, 0.29577046, 0.29082052, 0.33286471, 0.31393013],
       [0.33103601, 0.31369963, 0.33127369, 0.31268031, 0.32636101,
        0.27159015, 0.27202552, 0.30704561, 0.30242455, 0.28083667],
       [0.31039746, 0.32500195, 0.26681504, 0.30474752, 0.28905536,
        0.2645744 , 0.31978151, 0.29780327, 0.30616971, 0.30930443],
       [0.2322126 , 0.30715548, 0.31575387, 0.30437655, 0.36710143,
        0.28646843, 0.3409304 , 0.29114049, 0.25031544, 0.3286491 ],
       [0.33770432, 0.24788642, 0.39723824, 0.31097296, 0.3702148 ,
        0.20094084, 0.36185264, 0.34464555, 0.31331569, 0.33379891],
       [0.24765343, 0.34462361, 0.34190972, 0.28583501, 0.36961103,
        0.30180907, 0.23381304, 0.27648284, 0.30089413, 0.37210874],
       [0.39427751, 0.22631385, 0.26140673, 0.29472433, 0.25255341,
        0.27985587, 0.27261204, 0.33378354, 0.29258155, 0.32460718],
       [0.29221295, 0.31948668, 0.27574834, 0.31235493, 0.31636345,
        0.33110628, 0.28284359, 0.32082342, 0.27887766, 0.35142318],
       [0.28386097, 0.31511776, 0.31176105, 0.30595621, 0.30360094,
        0.33729238, 0.25874128, 0.29541704, 0.29464892, 0.32994674],
       [0.26839346, 0.39262326, 0.26400335, 0.28893276, 0.27926132,
        0.34415945, 0.27389715, 0.36815501, 0.24273893, 0.35718083],
       [0.27786481, 0.31280414, 0.32035193, 0.25641845, 0.37133931,
        0.27065136, 0.35839568, 0.32086151, 0.31923185, 0.31351231],
       [0.30331553, 0.2469209 , 0.35027172, 0.23612846, 0.3020661 ,
        0.3084482 , 0.26511915, 0.321454  , 0.3116952 , 0.28826684],
       [0.33511369, 0.23866454, 0.34204698, 0.35793471, 0.26334222,
        0.25078889, 0.31350435, 0.27768608, 0.31317433, 0.29236953],
       [0.30106089, 0.31816298, 0.31745144, 0.33871166, 0.27031504,
        0.26997886, 0.33885999, 0.30303644, 0.24052962, 0.33752853],
       [0.27465946, 0.2720056 , 0.34067544, 0.35585222, 0.23351696,
        0.28999324, 0.29140278, 0.34942406, 0.32587938, 0.26966512],
       [0.28488783, 0.31958574, 0.25342009, 0.2952317 , 0.28858665,
        0.31812288, 0.36003204, 0.29711018, 0.31912902, 0.33040203],
       [0.26853204, 0.26451514, 0.32771869, 0.31390498, 0.21382849,
        0.32292938, 0.28829525, 0.2704992 , 0.31977442, 0.34180845],
       [0.32207846, 0.26734672, 0.31035546, 0.33677052, 0.33031543,
        0.26942874, 0.34542761, 0.26050968, 0.29256228, 0.34598501],
       [0.32385984, 0.33268525, 0.25656674, 0.30128191, 0.28656804,
        0.31015881, 0.30102714, 0.33325258, 0.3045334 , 0.27069781],
       [0.22863174, 0.2951421 , 0.31155381, 0.34250682, 0.30384195,
        0.27858942, 0.32586761, 0.30319457, 0.23298047, 0.30859371],
       [0.31130923, 0.30547842, 0.30731556, 0.31583701, 0.30953597,
        0.34976509, 0.27106037, 0.28422728, 0.23330889, 0.23664276],
       [0.2577421 , 0.30208751, 0.28368605, 0.23964309, 0.28075459,
        0.22536699, 0.2552513 , 0.28596364, 0.28394825, 0.29313929],
       [0.33981432, 0.33006405, 0.31049121, 0.2674707 , 0.29892672,
        0.27851153, 0.2709054 , 0.27394449, 0.32906999, 0.33912514],
       [0.23071955, 0.29619869, 0.34257698, 0.34722427, 0.28682695,
        0.3188437 , 0.34418387, 0.32396729, 0.38443629, 0.31473212],
       [0.36119826, 0.3294802 , 0.26466023, 0.25614808, 0.35952493,
        0.31687106, 0.31548192, 0.33456705, 0.30961612, 0.2959887 ],
       [0.37269016, 0.30920386, 0.26978399, 0.35596725, 0.29337827,
        0.35159371, 0.22298788, 0.26268794, 0.27329543, 0.32414493],
       [0.38835234, 0.33108683, 0.33510481, 0.29297405, 0.34326801,
        0.31549864, 0.35863427, 0.28256626, 0.3556118 , 0.32415956],
       [0.32735627, 0.33574972, 0.31677577, 0.31365142, 0.33326277,
        0.29630911, 0.34563815, 0.29845754, 0.29773436, 0.26098026],
       [0.32618327, 0.26062082, 0.34900132, 0.34771056, 0.32055823,
        0.26395563, 0.33413896, 0.28497445, 0.3170359 , 0.35891647],
       [0.37051361, 0.31783846, 0.29991239, 0.24448897, 0.21690461,
        0.24901273, 0.36678875, 0.34568469, 0.26722702, 0.39263078],
       [0.35316689, 0.33831125, 0.33650709, 0.24423127, 0.35934126,
        0.2839609 , 0.36614099, 0.25497169, 0.24087551, 0.25335495],
       [0.29978129, 0.27650896, 0.22401408, 0.28995594, 0.33602063,
        0.34145961, 0.34737575, 0.24282282, 0.36188214, 0.3419127 ],
       [0.36292619, 0.31133312, 0.30799443, 0.30664702, 0.29323649,
        0.29521133, 0.30622104, 0.32185938, 0.2565798 , 0.29127927],
       [0.32965363, 0.33586078, 0.32516632, 0.31692608, 0.28354141,
        0.26565587, 0.32057729, 0.22951239, 0.2714714 , 0.32355419],
       [0.34190873, 0.30410637, 0.26505688, 0.30189687, 0.2997857 ,
        0.30658512, 0.3129252 , 0.35273386, 0.33241003, 0.29004222],
       [0.29240895, 0.29616865, 0.28376236, 0.28147818, 0.31294978,
        0.28190772, 0.32334373, 0.28167437, 0.34161483, 0.27934919],
       [0.27345466, 0.2687972 , 0.29025685, 0.28122546, 0.27646177,
        0.26226991, 0.29339031, 0.2413102 , 0.31914553, 0.31611027],
       [0.29703537, 0.24421683, 0.25687351, 0.26630075, 0.32120664,
        0.2835584 , 0.35414456, 0.35075253, 0.28007301, 0.2954181 ],
       [0.25978622, 0.31430025, 0.29477297, 0.32179893, 0.3019976 ,
        0.30275443, 0.32722505, 0.29635833, 0.33256142, 0.32921108],
       [0.36705375, 0.31371835, 0.3404555 , 0.29241508, 0.25179851,
        0.31605558, 0.35072922, 0.28736101, 0.27040347, 0.32537281],
       [0.33689553, 0.27941652, 0.27084552, 0.28914277, 0.32247947,
        0.29485586, 0.30904615, 0.32061555, 0.26017499, 0.25645405],
       [0.35080719, 0.26348728, 0.29198799, 0.32554687, 0.32645612,
        0.27327041, 0.295003  , 0.30720364, 0.25453364, 0.28190761],
       [0.2689549 , 0.25369717, 0.34096595, 0.24833995, 0.2742411 ,
        0.33632003, 0.27762874, 0.30977211, 0.2772291 , 0.31215133]])
    '''

    # Bayes draws; groups of 40
    inds1 = [i for i in range(40)]
    inds2 = [i for i in range(40, resLen)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varBayes10 = np.var(grp1)
    varBayes15 = np.var(grp2)
    meanBayes10 = np.average(grp1)
    meanBayes15 = np.average(grp2)
    # Bartlett test
    _, bartPval = spstat.bartlett(grp1.flatten(), grp2.flatten())
    print(bartPval)  # 0.821
    # t test for means
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp2.flatten())
    print(ttestPval)  # 0.0005

    # Neighbors; groups of 20
    temp1 = np.arange(1, 5).tolist()[::2]
    temp2 = np.arange(1, 5).tolist()[1::2]
    inds1 = [20 * (j - 1) + i for j in temp1 for i in range(20)]
    inds2 = [20 * (j - 1) + i for j in temp2 for i in range(20)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varNeigh2 = np.var(grp1)
    varNeigh4 = np.var(grp2)
    meanNeigh2 = np.average(grp1)
    meanNeigh4 = np.average(grp2)
    # Bartlett test
    _, bartPval = spstat.bartlett(grp1.flatten(), grp2.flatten())
    print(bartPval)  # 0.478
    # t test for means
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp2.flatten())
    print(ttestPval)  # 0.0003

    # Neighbors; groups of 5
    temp1 = np.arange(1, 17).tolist()[::4]
    temp2 = np.arange(1, 17).tolist()[1::4]
    temp3 = np.arange(1, 17).tolist()[2::4]
    temp4 = np.arange(1, 17).tolist()[3::4]
    inds1 = [5 * (j - 1) + i for j in temp1 for i in range(5)]
    inds2 = [5 * (j - 1) + i for j in temp2 for i in range(5)]
    inds3 = [5 * (j - 1) + i for j in temp3 for i in range(5)]
    inds4 = [5 * (j - 1) + i for j in temp4 for i in range(5)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    grp3 = resArr[inds3]
    grp4 = resArr[inds4]
    varNGrp1 = np.var(grp1)
    varNGrp2 = np.var(grp2)
    varNGrp3 = np.var(grp3)
    varNGrp4 = np.var(grp4)
    meanNGrp1 = np.average(grp1)
    meanNGrp2 = np.average(grp2)
    meanNGrp3 = np.average(grp3)
    meanNGrp4 = np.average(grp4)
    # Bartlett test
    _, bartPval = spstat.bartlett(grp1.flatten(), grp2.flatten(), grp3.flatten(), grp4.flatten())
    print(bartPval)  # 0.003
    _, bartPval = spstat.bartlett(grp1.flatten(), grp4.flatten())
    print(bartPval)  # 0.002
    # t test for means
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp4.flatten(), equal_var=False)
    print(ttestPval)  # 0.

    ##############
    # How do we know 5k is good choice for the target draws? When does U_est stop decreasing?
    bayesNum = 10000
    bayesNeighNum = 4000
    targNumList = [100, 250, 500, 1000, 3000, 5000, 7000]
    dataNum = 2000
    numNeighChain = 10

    numReps = 10
    numchains = 5

    # Iterate through each chain 10 times
    resArr = np.zeros((len(targNumList) * numchains, numReps))
    resInd = -1
    iterStr = ['' for i in range(resArr.shape[0])]
    for targNumInd, targNum in enumerate(targNumList):
        for m in range(numchains):
            resInd += 1
            iterName = str(targNum) + ', ' + str(m)
            print(iterName)
            iterStr[resInd] = str(targNum) + '\n' + str(m)
            for rep in range(numReps):
                dictTemp = CSdict3.copy()
                dictTemp.update({'postSamples': chainArr[m][choice(np.arange(numdraws), size=targNum,
                                                                   replace=False)], 'numPostSamples': targNum})
                # Bayes draws
                setDraws = chainArr[m][choice(np.arange(numdraws), size=bayesNum, replace=False)]
                lossDict.update({'bayesEstNeighborNum': bayesNeighNum})
                lossDict.update({'bayesDraws': setDraws})
                print('Generating loss matrix...')
                tempLossMat = lf.lossMatSetBayesDraws(dictTemp['postSamples'], lossDict.copy(),
                                                      lossDict['bayesDraws'])
                tempLossDict = lossDict.copy()
                tempLossDict.update({'lossMat': tempLossMat})
                # Compile array for Bayes neighbors from random choice of chains
                tempChainArr = chainArr[choice(np.arange(M), size=numNeighChain, replace=False).tolist()]
                for jj in range(numNeighChain):
                    if jj == 0:
                        concChainArr = tempChainArr[0]
                    else:
                        concChainArr = np.vstack((concChainArr, tempChainArr[jj]))
                newBayesDraws, newLossMat = lf.add_cand_neighbors(tempLossDict.copy(), concChainArr,
                                                                  dictTemp['postSamples'])
                tempLossDict.update({'bayesDraws': newBayesDraws, 'lossMat': newLossMat})
                baseLoss = (np.sum(newLossMat, axis=1) / newLossMat.shape[1]).min()
                utilDict.update({'dataDraws': setDraws[
                    choice(np.arange(len(setDraws)), size=dataNum, replace=False)]})
                currCompUtil = baseLoss - sampf.sampling_plan_loss(priordatadict=dictTemp, lossdict=tempLossDict,
                                                                   designlist=[des], numtests=sampBudget,
                                                                   utildict=utilDict)[0]
                resArr[resInd, rep] = currCompUtil
            # Update boxplot
            # lo, hi = 20 * j, 20 * j + 20
            # plt.boxplot(resArr[lo:hi, :].T)
            plt.boxplot(resArr.T)
            plt.xticks(np.arange(1, resArr.shape[0] + 1), iterStr, fontsize=6)
            plt.subplots_adjust(bottom=0.15)
            plt.ylim([0, 0.5])
            plt.title(
                'Inspection of Variance\n$|\Gamma_{targ}|$, Chain Index')
            plt.show()
            plt.close()
    '''26-APR
    resArr100250 = np.array([[0.50140529, 0.55126168, 0.49029986, 0.46464198, 0.45837336,
        0.45066965, 0.41209198, 0.46978659, 0.49934546, 0.46923895],
       [0.39177565, 0.48035052, 0.42346483, 0.47887026, 0.41087836,
        0.37448669, 0.47747731, 0.37189735, 0.5425913 , 0.38353733],
       [0.35260405, 0.40309502, 0.45294672, 0.51255304, 0.39410096,
        0.47334884, 0.4511105 , 0.33374687, 0.39920023, 0.40339657],
       [0.45177538, 0.45366443, 0.45947238, 0.45897926, 0.46577183,
        0.48866144, 0.37979588, 0.5279329 , 0.38170447, 0.4107596 ],
       [0.47404723, 0.50586346, 0.44126569, 0.45439147, 0.43430667,
        0.4608085 , 0.40929905, 0.49413172, 0.45369494, 0.46455937],
       [0.39133431, 0.42041077, 0.34606595, 0.41376936, 0.35776227,
        0.3536425 , 0.35449673, 0.32780737, 0.35771259, 0.32721677],
       [0.32515425, 0.27414385, 0.4419826 , 0.40606446, 0.33779062,
        0.31597167, 0.37809201, 0.37396642, 0.31435042, 0.40189718],
       [0.32933754, 0.35991575, 0.38648917, 0.41096685, 0.37871601,
        0.32775265, 0.37732363, 0.3465906 , 0.3745596 , 0.42102382],
       [0.32043037, 0.44067833, 0.29090313, 0.3569633 , 0.35843298,
        0.39886559, 0.3742737 , 0.32914038, 0.38900235, 0.38801457],
       [0.37563327, 0.36903659, 0.3984997 , 0.3872371 , 0.39459878,
        0.38254198, 0.40526602, 0.44261726, 0.33483897, 0.39376805]])
    resArr1000 = np.array([[0.29543422, 0.23018659, 0.29572667, 0.30400529, 0.28798147,
        0.30749344, 0.31172818, 0.29030707, 0.32264818, 0.34075148],
       [0.31404676, 0.29461163, 0.26086479, 0.37383886, 0.3080653 ,
        0.3024158 , 0.29058796, 0.33923388, 0.32167301, 0.35374918],
       [0.29705226, 0.34588321, 0.34012437, 0.33812139, 0.33470506,
        0.24699048, 0.28337416, 0.34205818, 0.2995167 , 0.35778803],
       [0.30948271, 0.35447861, 0.32132528, 0.29423149, 0.35358318,
        0.25637289, 0.32995915, 0.30879223, 0.3096543 , 0.28401523],
       [0.34666892, 0.30428367, 0.36359256, 0.28827808, 0.32374601,
        0.32332402, 0.32796637, 0.33926794, 0.29788653, 0.37282736]])
    resArr500 = np.array([[0.37407532, 0.30445457, 0.37972112, 0.32858337, 0.35944551,
        0.40163667, 0.37937639, 0.39067011, 0.30510025, 0.31049344],
       [0.38030088, 0.29022886, 0.27924652, 0.30975121, 0.33616545,
        0.31281565, 0.3546127 , 0.37754946, 0.35879472, 0.30920778],
       [0.37779657, 0.36302409, 0.33225466, 0.3178921 , 0.36421046,
        0.37990663, 0.24108357, 0.36107523, 0.35696927, 0.33150821],
       [0.33197066, 0.38297438, 0.38263148, 0.3384268 , 0.31969498,
        0.29847756, 0.29834003, 0.33907476, 0.22759916, 0.30496617],
       [0.30310852, 0.32502465, 0.33992754, 0.26822618, 0.29426995,
        0.27141022, 0.3962556 , 0.33542118, 0.31419785, 0.28735508]])
    '''
    '''26-APR
    resArr = np.array([[0.50140529, 0.55126168, 0.49029986, 0.46464198, 0.45837336,
        0.45066965, 0.41209198, 0.46978659, 0.49934546, 0.46923895],
       [0.39177565, 0.48035052, 0.42346483, 0.47887026, 0.41087836,
        0.37448669, 0.47747731, 0.37189735, 0.5425913 , 0.38353733],
       [0.35260405, 0.40309502, 0.45294672, 0.51255304, 0.39410096,
        0.47334884, 0.4511105 , 0.33374687, 0.39920023, 0.40339657],
       [0.45177538, 0.45366443, 0.45947238, 0.45897926, 0.46577183,
        0.48866144, 0.37979588, 0.5279329 , 0.38170447, 0.4107596 ],
       [0.47404723, 0.50586346, 0.44126569, 0.45439147, 0.43430667,
        0.4608085 , 0.40929905, 0.49413172, 0.45369494, 0.46455937],
       [0.39133431, 0.42041077, 0.34606595, 0.41376936, 0.35776227,
        0.3536425 , 0.35449673, 0.32780737, 0.35771259, 0.32721677],
       [0.32515425, 0.27414385, 0.4419826 , 0.40606446, 0.33779062,
        0.31597167, 0.37809201, 0.37396642, 0.31435042, 0.40189718],
       [0.32933754, 0.35991575, 0.38648917, 0.41096685, 0.37871601,
        0.32775265, 0.37732363, 0.3465906 , 0.3745596 , 0.42102382],
       [0.32043037, 0.44067833, 0.29090313, 0.3569633 , 0.35843298,
        0.39886559, 0.3742737 , 0.32914038, 0.38900235, 0.38801457],
       [0.37563327, 0.36903659, 0.3984997 , 0.3872371 , 0.39459878,
        0.38254198, 0.40526602, 0.44261726, 0.33483897, 0.39376805],
        [0.37407532, 0.30445457, 0.37972112, 0.32858337, 0.35944551,
        0.40163667, 0.37937639, 0.39067011, 0.30510025, 0.31049344],
       [0.38030088, 0.29022886, 0.27924652, 0.30975121, 0.33616545,
        0.31281565, 0.3546127 , 0.37754946, 0.35879472, 0.30920778],
       [0.37779657, 0.36302409, 0.33225466, 0.3178921 , 0.36421046,
        0.37990663, 0.24108357, 0.36107523, 0.35696927, 0.33150821],
       [0.33197066, 0.38297438, 0.38263148, 0.3384268 , 0.31969498,
        0.29847756, 0.29834003, 0.33907476, 0.22759916, 0.30496617],
       [0.30310852, 0.32502465, 0.33992754, 0.26822618, 0.29426995,
        0.27141022, 0.3962556 , 0.33542118, 0.31419785, 0.28735508],
       [0.29543422, 0.23018659, 0.29572667, 0.30400529, 0.28798147,
        0.30749344, 0.31172818, 0.29030707, 0.32264818, 0.34075148],
       [0.31404676, 0.29461163, 0.26086479, 0.37383886, 0.3080653 ,
        0.3024158 , 0.29058796, 0.33923388, 0.32167301, 0.35374918],
       [0.29705226, 0.34588321, 0.34012437, 0.33812139, 0.33470506,
        0.24699048, 0.28337416, 0.34205818, 0.2995167 , 0.35778803],
       [0.30948271, 0.35447861, 0.32132528, 0.29423149, 0.35358318,
        0.25637289, 0.32995915, 0.30879223, 0.3096543 , 0.28401523],
       [0.34666892, 0.30428367, 0.36359256, 0.28827808, 0.32374601,
        0.32332402, 0.32796637, 0.33926794, 0.29788653, 0.37282736],
       [0.25549132, 0.30381592, 0.27637908, 0.28224129, 0.30667664,
        0.30400084, 0.26844848, 0.2729882 , 0.343837  , 0.34685346],
       [0.30411617, 0.33507449, 0.26623957, 0.2632656 , 0.29391671,
        0.36336377, 0.32741422, 0.26356833, 0.31914789, 0.30887769],
       [0.31500317, 0.30318927, 0.30460151, 0.26505258, 0.30563538,
        0.28359129, 0.33600951, 0.28641812, 0.34258986, 0.28458254],
       [0.27512308, 0.32754478, 0.29254634, 0.27998668, 0.27005116,
        0.29594049, 0.31142984, 0.31776369, 0.27967321, 0.31636716],
       [0.31914107, 0.27231412, 0.27666105, 0.28044192, 0.32101495,
        0.30667921, 0.28677659, 0.28632908, 0.2746359 , 0.32261521],
       [0.29074794, 0.30180358, 0.26865983, 0.25916341, 0.30806278,
        0.31409518, 0.29840812, 0.27770024, 0.25819258, 0.2956419 ],
       [0.33695764, 0.22165824, 0.31966694, 0.25550912, 0.31102951,
        0.26036698, 0.30676481, 0.32265597, 0.30638283, 0.267012  ],
       [0.22271734, 0.33251509, 0.30156705, 0.25354403, 0.29238287,
        0.29342667, 0.33750123, 0.30746387, 0.28870626, 0.28220082],
       [0.21499506, 0.26814815, 0.20973981, 0.28426465, 0.27351313,
        0.22992648, 0.281794  , 0.29238153, 0.30806582, 0.31620699],
       [0.32594961, 0.28213277, 0.32208402, 0.25749293, 0.29025579,
        0.27652002, 0.31214433, 0.34222441, 0.28492866, 0.27846235],
       [0.3294513 , 0.31291074, 0.3067303 , 0.33735598, 0.25932852,
        0.29887054, 0.29194411, 0.30744739, 0.28387021, 0.31146712],
       [0.2812424 , 0.2966778 , 0.22064488, 0.2730136 , 0.27604073,
        0.28339152, 0.22185182, 0.32192728, 0.24887353, 0.25056421],
       [0.28677336, 0.29498444, 0.29169857, 0.32083128, 0.28950008,
        0.31983926, 0.35355005, 0.31691794, 0.2487355 , 0.32780415],
       [0.26188433, 0.32234931, 0.31970408, 0.28489519, 0.3214753 ,
        0.26781106, 0.33772272, 0.30779557, 0.30325071, 0.32477542],
       [0.31904626, 0.31036784, 0.33488475, 0.34943184, 0.29876351,
        0.31700563, 0.26504681, 0.33730261, 0.32971048, 0.26672061]])
    '''
    # Form 95% CIs on mean under each number of target draws, for each chain
    CIlist = []
    avglist = []
    for j in range(len(targNumList)):
        inds = [j * 5 + m for m in range(numchains)]
        data = resArr[inds].flatten().tolist()
        currAvg = np.mean(data)
        currCI = spstat.t.interval(alpha=0.95, df=len(data) - 1, loc=np.mean(data), scale=spstat.sem(data))
        CIlist.append(currCI)
    for i in range(len(CIlist)):
        plt.plot((i, i), CIlist[i], linewidth=4, color='black')
    plt.xticks(np.arange(len(targNumList)), [str(targNumList[k]) for k in range(len(targNumList))], fontsize=10)
    plt.title('95% confidence intervals for utility mean vs. $|\Gamma_{targ}|$')
    plt.ylim([0, 0.5])
    plt.ylabel('Utility')
    plt.xlabel('$|\Gamma_{targ}|$')
    plt.show()
    plt.close()

    ##############
    # How should we allocate our budget for Bayes draws (Bayes vs neighbors), and from where should the neighbors be drawn?
    bayesNumList = [5000, 7500, 10000]
    bayesBudget = 11000
    neighSubsetList = [6000, 10000, 25000, 50000, 75000, 100000]
    targNum = 5000
    dataNum = 4000

    numReps = 10
    numchains = 5

    # Iterate through each chain 10 times
    resArr = np.zeros((len(bayesNumList) * (len(neighSubsetList)) * numchains, numReps))
    resInd = -1
    iterStr = ['' for i in range(resArr.shape[0])]
    for m in range(numchains):
        for bayesNumInd, bayesNum in enumerate(bayesNumList):
            for neighSubsetInd, neighSubset in enumerate(neighSubsetList):
                resInd += 1
                iterName = str(m) + ', ' + str(bayesNum) + ', ' + str(neighSubset)
                print(iterName)
                iterStr[resInd] = str(m) + '\n' + str(bayesNum) + '\n' + str(neighSubset)
                for rep in range(numReps):
                    dictTemp = CSdict3.copy()
                    dictTemp.update({'postSamples': chainArr[m][choice(np.arange(numdraws), size=targNum,
                                                                       replace=False)], 'numPostSamples': targNum})
                    # Bayes draws
                    setDraws = chainArr[m][choice(np.arange(numdraws), size=bayesNum, replace=False)]
                    bayesNeighNum = bayesBudget - bayesNum
                    lossDict.update({'bayesEstNeighborNum': bayesNeighNum})
                    lossDict.update({'bayesDraws': setDraws})
                    print('Generating loss matrix...')
                    tempLossMat = lf.lossMatSetBayesDraws(dictTemp['postSamples'], lossDict.copy(),
                                                          lossDict['bayesDraws'])
                    tempLossDict = lossDict.copy()
                    tempLossDict.update({'lossMat': tempLossMat})
                    # Choose neighbor subset chain
                    currChain = chainArr[choice(np.arange(M), size=1, replace=False).tolist()][0]
                    subsetChain = currChain[
                        choice(np.arange(currChain.shape[0]), size=neighSubset, replace=False).tolist()]
                    newBayesDraws, newLossMat = lf.add_cand_neighbors(tempLossDict.copy(), subsetChain,
                                                                      dictTemp['postSamples'])
                    tempLossDict.update({'bayesDraws': newBayesDraws, 'lossMat': newLossMat})
                    baseLoss = (np.sum(newLossMat, axis=1) / newLossMat.shape[1]).min()
                    utilDict.update({'dataDraws': setDraws[
                        choice(np.arange(len(setDraws)), size=dataNum, replace=False)]})
                    currCompUtil = baseLoss - sampf.sampling_plan_loss(priordatadict=dictTemp, lossdict=tempLossDict,
                                                                       designlist=[des], numtests=sampBudget,
                                                                       utildict=utilDict)[0]
                    resArr[resInd, rep] = currCompUtil
                # Update boxplot
                # for j in range(m+1):
                # grpInt = 12
                # lo, hi = grpInt * j, grpInt * j + grpInt
                # plt.boxplot(resArr[lo:hi, :].T)
                plt.boxplot(resArr.T)
                plt.xticks(np.arange(1, 15 + 1), iterStr, fontsize=6)
                plt.subplots_adjust(bottom=0.15)
                plt.ylim([0, 0.5])
                plt.title(
                    'Inspection of Variance\nChain Index, $|\Gamma_{Bayes}|$, Subset Size for Neighbors')
                plt.show()
                plt.close()
    '''1-MAY runs
    resArr = np.array([
    [0.26794957, 0.2985372 , 0.44763188, 0.28803142, 0.25226487,
        0.45006919, 0.30965654, 0.29861106, 0.31440529, 0.35648431],
        [0.2383842 , 0.33998805, 0.38112007, 0.39614576, 0.35490879,
        0.34264277, 0.31367993, 0.26670433, 0.31184044, 0.31500269], 
       [0.29213904, 0.35274103, 0.31333545, 0.33236558, 0.35670471,
        0.28836937, 0.3622442 , 0.34988668, 0.35448635, 0.35286808],
       [0.36327284, 0.31211761, 0.29191011, 0.25922725, 0.36228079,
        0.37917007, 0.28103963, 0.32428352, 0.34340916, 0.33187259],
       [0.27825265, 0.26286614, 0.33868736, 0.32474883, 0.23763425,
        0.33118091, 0.35808915, 0.32901775, 0.39242525, 0.22013594],
       [0.33619073, 0.22570152, 0.28902963, 0.25911145, 0.32696415,
        0.35044584, 0.24832063, 0.25523772, 0.35419175, 0.27753966],
    [0.29463947, 0.33714778, 0.24753792, 0.33307684, 0.29718323,
        0.41687379, 0.28501816, 0.43909237, 0.27239278, 0.34621413],    
       [0.30440975, 0.39062873, 0.39655847, 0.24010844, 0.30675523,
        0.37104379, 0.38866631, 0.25770014, 0.35169741, 0.24558109],
       [0.30500494, 0.25307966, 0.25128417, 0.25240888, 0.29444528,
        0.37948829, 0.33356931, 0.37892811, 0.31627523, 0.35461703],
       [0.3125684 , 0.35113708, 0.26876659, 0.25968848, 0.20604853,
        0.35525643, 0.31531761, 0.19727268, 0.32733273, 0.32061231],
       [0.2965068 , 0.31239119, 0.27124472, 0.27032253, 0.27370182,
        0.37561137, 0.32847811, 0.31346541, 0.33276761, 0.28680243],
       [0.33232847, 0.34110797, 0.35233671, 0.33666123, 0.3438717 ,
        0.33137135, 0.28440488, 0.28041474, 0.30203913, 0.23976502],
    [0.36396916, 0.33901085, 0.23733722, 0.33635064, 0.27275545,
        0.40109206, 0.33434228, 0.33693672, 0.20961966, 0.28016342],
       [0.33614501, 0.33376392, 0.30734827, 0.28624233, 0.31301127,
        0.31189225, 0.26637955, 0.31845292, 0.32354194, 0.32401944],
       [0.35983489, 0.31972132, 0.39672934, 0.29065445, 0.34565505,
        0.30829671, 0.34620445, 0.29836921, 0.34178236, 0.32417801],
       [0.32492779, 0.30195045, 0.32127439, 0.30430937, 0.23098756,
        0.3239377 , 0.29969451, 0.34791843, 0.29973817, 0.31621439],
       [0.23654603, 0.2272105 , 0.23901307, 0.31013569, 0.3396324 ,
        0.267535  , 0.20084762, 0.23316338, 0.289267  , 0.27587806],
       [0.20346287, 0.27461868, 0.2905964 , 0.26928913, 0.28752993,
        0.28073212, 0.23106505, 0.30422988, 0.27931465, 0.30243756],
    [0.2896027 , 0.38014044, 0.23123968, 0.26864697, 0.36943204,
        0.22966483, 0.3478276 , 0.39141361, 0.43898869, 0.26625763],   
       [0.37850406, 0.26312606, 0.33056395, 0.3351937 , 0.27876865,
        0.29382621, 0.32363348, 0.42446447, 0.37166177, 0.40321324],
       [0.30515057, 0.40084913, 0.35384994, 0.29878948, 0.28811907,
        0.40827527, 0.35386553, 0.38617088, 0.26857723, 0.31325648],
       [0.33294881, 0.32025429, 0.35460179, 0.313875  , 0.35673353,
        0.34741762, 0.31651974, 0.30281699, 0.30428285, 0.30347674],
       [0.27055596, 0.2614645 , 0.3427491 , 0.333199  , 0.27905234,
        0.35890384, 0.28535628, 0.33225615, 0.38111804, 0.34804981],
       [0.27137363, 0.27107444, 0.28818841, 0.29162292, 0.24275988,
        0.28340926, 0.36671172, 0.35137098, 0.30520209, 0.26124599],
    [0.22343532, 0.36917667, 0.24545687, 0.33202278, 0.50889208,
        0.42338633, 0.28392269, 0.34061916, 0.3033188 , 0.40004486],   
       [0.40661765, 0.32829131, 0.29547258, 0.35502751, 0.29084627,
        0.3002673 , 0.29883961, 0.31071194, 0.33781981, 0.26649514],
       [0.31861974, 0.27378234, 0.34172999, 0.27084152, 0.31083238,
        0.34656211, 0.4079171 , 0.31797074, 0.27141457, 0.37776335],
       [0.26851804, 0.31366699, 0.35401395, 0.28476597, 0.20557137,
        0.3671256 , 0.33576738, 0.34108784, 0.3077003 , 0.29087272],
       [0.2912308 , 0.38519322, 0.33838384, 0.30623254, 0.26058883,
        0.24023452, 0.30063353, 0.28050465, 0.32348717, 0.31318438],
       [0.25993623, 0.32208651, 0.31172781, 0.37398658, 0.28095367,
        0.26526585, 0.28177036, 0.28353782, 0.30744925, 0.34374548],
    [0.40260777, 0.29053039, 0.36540902, 0.2787384 , 0.26955001,
        0.41927921, 0.17855587, 0.39348569, 0.37945285, 0.32415271],   
       [0.39037405, 0.27678418, 0.29979504, 0.3339427 , 0.38781906,
        0.28447542, 0.39691176, 0.31206548, 0.28213222, 0.23321726],
       [0.30780698, 0.31002378, 0.22179845, 0.32703505, 0.35546153,
        0.35147977, 0.33066928, 0.35192552, 0.3286781 , 0.31153295],
       [0.24884171, 0.34512476, 0.26079888, 0.20060127, 0.30887018,
        0.29074   , 0.37545906, 0.29731581, 0.21028065, 0.23833528],
       [0.27118448, 0.3135424 , 0.4607416 , 0.28485757, 0.32738984,
        0.19391333, 0.2657894 , 0.32924238, 0.33662536, 0.28689725],
       [0.32649371, 0.3121948 , 0.26802255, 0.24651516, 0.17818745,
        0.28036441, 0.30779482, 0.26639074, 0.28203898, 0.32475216],
    [0.33124564, 0.34759891, 0.31930994, 0.37526682, 0.34043733,
        0.32380361, 0.33949199, 0.21067178, 0.28786233, 0.3863623 ],   
       [0.36795523, 0.17563072, 0.32010512, 0.25648443, 0.41951897,
        0.31682003, 0.36787256, 0.2620599 , 0.19105261, 0.30535219],
       [0.40804395, 0.29463111, 0.26687024, 0.32750196, 0.35478661,
        0.29484486, 0.31613995, 0.30072086, 0.19616281, 0.30317536],
       [0.2435774 , 0.34860618, 0.28181263, 0.38730979, 0.33191099,
        0.3559008 , 0.33751592, 0.26854826, 0.38524605, 0.29904949],
       [0.31368128, 0.27571307, 0.30003597, 0.34949548, 0.17478907,
        0.32035072, 0.27247209, 0.30622604, 0.32817939, 0.30356158],
       [0.25537331, 0.27290574, 0.35724967, 0.29385317, 0.33430369,
        0.29240697, 0.34517995, 0.31301652, 0.30139967, 0.26480102],
    [0.22187383, 0.3595589 , 0.35500893, 0.39101756, 0.28054183,
        0.31997647, 0.14007297, 0.3225559 , 0.41348295, 0.375869  ],   
       [0.44246368, 0.30940329, 0.29537375, 0.3900035 , 0.17561897,
        0.35699319, 0.30939206, 0.32291849, 0.35724554, 0.42382374],
       [0.35979583, 0.34274044, 0.20694003, 0.3871746 , 0.28093188,
        0.34864916, 0.33006016, 0.30639414, 0.40600084, 0.22730607],
       [0.34477228, 0.37134837, 0.26619589, 0.3628991 , 0.40258648,
        0.26159665, 0.35481392, 0.23627209, 0.20225601, 0.28531568],
       [0.27997065, 0.38605298, 0.29496582, 0.22351115, 0.28353513,
        0.22454702, 0.30396028, 0.33460098, 0.3054688 , 0.36907812],
       [0.32008717, 0.3246649 , 0.29474187, 0.25876664, 0.25188971,
        0.33759011, 0.27623444, 0.33771157, 0.26355691, 0.34855617],
    [0.32467922, 0.29609828, 0.27139958, 0.38908509, 0.33257094,
        0.3416079 , 0.36334265, 0.39899235, 0.29718348, 0.26493426],   
       [0.28156506, 0.22579422, 0.26125575, 0.33960119, 0.36463803,
        0.34218712, 0.26579068, 0.32783978, 0.17922384, 0.32278474],
       [0.32611257, 0.2843213 , 0.21112746, 0.24761544, 0.30871908,
        0.32758158, 0.32054572, 0.28460003, 0.18700271, 0.29717186],
       [0.35066434, 0.35603105, 0.29737832, 0.28136814, 0.38702339,
        0.16401527, 0.27036583, 0.3225478 , 0.33259664, 0.20623179],
       [0.24440849, 0.31251479, 0.34135435, 0.27116941, 0.21035519,
        0.23837052, 0.35175112, 0.23375324, 0.28153984, 0.24271335],
       [0.31367494, 0.25761997, 0.26460988, 0.36760714, 0.31249285,
        0.2869209 , 0.3005137 , 0.23303174, 0.30371971, 0.30271333],
    [0.37049466, 0.27683382, 0.4058761 , 0.29041504, 0.30588765,
        0.32360191, 0.15397607, 0.31442799, 0.34755995, 0.43955104],   
       [0.24703103, 0.30227638, 0.28437562, 0.27732142, 0.44497976,
        0.34250288, 0.29645189, 0.30826136, 0.34665752, 0.24721934],
       [0.28284641, 0.22673299, 0.34567685, 0.33318707, 0.35199042,
        0.41915343, 0.29344137, 0.34860119, 0.3959337 , 0.3587056 ],
       [0.33211172, 0.35192715, 0.29496733, 0.40583373, 0.29670193,
        0.27437162, 0.3133279 , 0.36047023, 0.34028525, 0.32455293],
       [0.31083229, 0.30621531, 0.22952947, 0.25528614, 0.33602354,
        0.36039448, 0.3382023 , 0.26991025, 0.28891604, 0.34953105],
       [0.30856874, 0.33992621, 0.31066469, 0.32634979, 0.35800355,
        0.35774616, 0.28127007, 0.34658441, 0.27174188, 0.32702501],
    [0.26922821, 0.33722652, 0.31214077, 0.34683099, 0.31170771,
        0.39414006, 0.31198269, 0.28627466, 0.35728915, 0.43538579],   
       [0.33693316, 0.38384256, 0.22170725, 0.25475437, 0.29412971,
        0.2800564 , 0.31980473, 0.36789658, 0.31450433, 0.29810729],
       [0.21451199, 0.34502512, 0.31746878, 0.27922149, 0.23504349,
        0.33180404, 0.30743671, 0.3170355 , 0.35516693, 0.31255206],
       [0.30985599, 0.33055829, 0.28523915, 0.19649527, 0.25310138,
        0.28912048, 0.35112234, 0.31130534, 0.38188723, 0.18153532],
       [0.32987256, 0.29058979, 0.27568782, 0.25694002, 0.31739515,
        0.29471476, 0.31080371, 0.36450561, 0.21736919, 0.33797209],
       [0.26710796, 0.28967423, 0.23387517, 0.3658806 , 0.34962354,
        0.29105816, 0.21923096, 0.34525038, 0.30833079, 0.27077716],
    [0.33015452, 0.26960982, 0.29642966, 0.29177492, 0.2933548 ,
        0.31930877, 0.31266783, 0.3035967 , 0.28286253, 0.31124193],   
       [0.27881388, 0.32047689, 0.31303592, 0.28921248, 0.30847959,
        0.2930692 , 0.24253443, 0.29160585, 0.25214267, 0.29535069],
       [0.16841455, 0.31341068, 0.29504079, 0.29318608, 0.31027126,
        0.3175413 , 0.30502348, 0.26286983, 0.33314472, 0.24731468],
       [0.31549672, 0.21213612, 0.21921882, 0.3137659 , 0.31608443,
        0.20014911, 0.2412614 , 0.28973825, 0.33407815, 0.26919676],
       [0.29474998, 0.20366386, 0.28380755, 0.3802374 , 0.21177341,
        0.26868307, 0.1840242 , 0.1668031 , 0.33089645, 0.33423895],
       [0.23000968, 0.22020693, 0.31031216, 0.27994138, 0.27930517,
        0.23042083, 0.22552122, 0.27080032, 0.28249722, 0.28878138],
    [0.22826483, 0.40006901, 0.40093182, 0.39034505, 0.28091879,
        0.35803959, 0.25919281, 0.36523117, 0.2799512 , 0.27905248],   
       [0.26183383, 0.18516825, 0.33715952, 0.33815787, 0.38643891,
        0.28891198, 0.24129003, 0.21482784, 0.36235032, 0.39384513],
       [0.26123199, 0.36071561, 0.35909223, 0.25804222, 0.35142278,
        0.31399836, 0.30925886, 0.31387653, 0.21563771, 0.28753019],
       [0.33632565, 0.32207045, 0.27096354, 0.38462953, 0.32432491,
        0.30848673, 0.27352208, 0.29244869, 0.29203051, 0.36243293],
       [0.32932281, 0.38399113, 0.36235394, 0.30518135, 0.32320731,
        0.2146225 , 0.32371416, 0.34953021, 0.36485439, 0.27888461],
       [0.33904787, 0.28609646, 0.20834825, 0.30713378, 0.30579357,
        0.29761988, 0.29399763, 0.3338104 , 0.29962558, 0.38313168],
    [0.28443171, 0.3260089 , 0.2492861 , 0.19644327, 0.36328293,
        0.44600558, 0.28618487, 0.34403739, 0.22695267, 0.25231011],   
       [0.28548746, 0.3517961 , 0.31661001, 0.27511102, 0.27295888,
        0.41437442, 0.31905523, 0.20300262, 0.32819451, 0.31797505],
       [0.29256849, 0.35259858, 0.3546246 , 0.3216996 , 0.2910382 ,
        0.18911001, 0.33003812, 0.3345979 , 0.28911743, 0.2371804 ],
       [0.2314037 , 0.25942281, 0.3017478 , 0.3111784 , 0.29620136,
        0.25768569, 0.30693621, 0.27823974, 0.22019712, 0.2959819 ],
       [0.3001561 , 0.29676618, 0.31497856, 0.26364207, 0.34128549,
        0.2760351 , 0.27145773, 0.25433729, 0.27582081, 0.27601997],
       [0.30678378, 0.27094219, 0.3510728 , 0.28787519, 0.35090862,
        0.25536792, 0.33212536, 0.31652182, 0.28298559, 0.31683293],
    [0.21398872, 0.25589738, 0.30005042, 0.27611976, 0.29677594,
        0.2885756 , 0.27894511, 0.2972626 , 0.23809848, 0.25801235],   
       [0.26937782, 0.29345241, 0.29311554, 0.27093154, 0.34458057,
        0.32053974, 0.39600405, 0.28525345, 0.28555062, 0.25723839],
       [0.31272755, 0.29604667, 0.34699202, 0.35805122, 0.35618064,
        0.27485189, 0.31658583, 0.3490923 , 0.30831205, 0.32246532],
       [0.28958965, 0.29119963, 0.28120383, 0.27633127, 0.34362886,
        0.28254077, 0.25703559, 0.31193153, 0.30059943, 0.37556416],
       [0.30810767, 0.27540926, 0.34378825, 0.27492078, 0.39629003,
        0.27778064, 0.34704423, 0.2700346 , 0.26295433, 0.30622466],
       [0.30442279, 0.27481585, 0.34311501, 0.33627309, 0.25818696,
        0.18146385, 0.31641603, 0.28043059, 0.20595242, 0.26747163]])
    '''
    # Group along different dimensions
    # FIRST: across chains, every 18 runs
    resArrgrpChains = np.zeros((int(resArr.shape[0] / numchains), numReps * numchains))
    for i in range(int(resArr.shape[0] / numchains)):
        for j in range(numchains):
            for k in range(numReps):
                resArrgrpChains[i, j * numReps + k] = resArr[i + j * len(bayesNumList) * len(neighSubsetList), k]
    # plot
    iterStr = [str(bayesNum) + '\n' + str(neighSubset) for bayesNum in bayesNumList for neighSubset in neighSubsetList]
    plt.boxplot(resArrgrpChains.T, whis=(5, 95))
    plt.xticks(np.arange(1, resArrgrpChains.shape[0] + 1), iterStr, fontsize=6)
    plt.subplots_adjust(bottom=0.15)
    plt.ylim([0, 0.5])
    plt.xlabel('$|\Gamma_{cand}|$, Subset Size for Neighbors')
    plt.ylabel('Utility')
    plt.title('Inspection of variance\nMCMC candidate budget of 11,000 draws')
    plt.show()
    plt.close()
    # SECOND: across chains and size of Bayes set (before neighbors)
    resArrgrpBayes = np.zeros((len(bayesNumList), numReps * numchains * len(neighSubsetList)))
    for i in range(len(bayesNumList)):
        for j in range(len(neighSubsetList)):
            resArrgrpBayes[i, j * numReps * numchains:j * numReps * numchains + numReps * numchains] = resArrgrpChains[
                i * len(neighSubsetList) + j]
    # plot
    iterStr = [str(bayesNum) for bayesNum in bayesNumList]
    plt.boxplot(resArrgrpBayes.T, whis=(2.5, 97.5))
    plt.xticks(np.arange(1, resArrgrpBayes.shape[0] + 1), iterStr, fontsize=6)
    plt.subplots_adjust(bottom=0.15)
    plt.ylim([0, 0.5])
    plt.xlabel('$|\Gamma_{cand}|$')
    plt.ylabel('Utility')
    plt.title('Inspection of variance\nMCMC candidate budget of 11,000 draws')
    plt.show()
    plt.close()
    # THIRD: across chains and size of neighbors subset
    resArrgrpNeighSubset = np.zeros((len(neighSubsetList), len(bayesNumList) * numReps * numchains))
    for i in range(len(bayesNumList)):
        for j in range(len(neighSubsetList)):
            resArrgrpNeighSubset[j, i * numReps * numchains:i * numReps * numchains + numReps * numchains] = \
            resArrgrpChains[i * len(neighSubsetList) + j]
    # plot
    iterStr = [str(neighSubset) for neighSubset in neighSubsetList]
    plt.boxplot(resArrgrpNeighSubset.T, whis=(2.5, 97.5))
    plt.xticks(np.arange(1, resArrgrpNeighSubset.shape[0] + 1), iterStr, fontsize=6)
    plt.subplots_adjust(bottom=0.15)
    plt.ylim([0, 0.5])
    plt.xlabel('Subset Size for Neighbors')
    plt.ylabel('Utility')
    plt.title('Inspection of variance\nMCMC candidate budget of 11,000 draws')
    plt.show()
    plt.close()

    #####################
    # Try 1000 or 2000 neighbors from different numbers of chains
    bayesNumList = [9000, 10000]
    bayesBudget = 11000
    neighSubsetList = [2, 3, 4]  # [6000, 10000, 25000, 50000, 75000, 100000]
    targNum = 5000
    dataNum = 4000

    numReps = 10
    numchains = 5

    # Iterate through each chain 10 times
    resArr = np.zeros((len(bayesNumList) * (len(neighSubsetList)) * numchains, numReps))
    resInd = -1
    iterStr = ['' for i in range(resArr.shape[0])]
    for m in range(numchains):
        for bayesNumInd, bayesNum in enumerate(bayesNumList):
            for neighSubsetInd, neighSubset in enumerate(neighSubsetList):
                resInd += 1
                iterName = str(m) + ', ' + str(bayesNum) + ', ' + str(neighSubset)
                print(iterName)
                iterStr[resInd] = str(m) + '\n' + str(bayesNum)[:-3] + 'k\n' + str(neighSubset)
                for rep in range(numReps):
                    dictTemp = CSdict3.copy()
                    dictTemp.update({'postSamples': chainArr[m][choice(np.arange(numdraws), size=targNum,
                                                                       replace=False)], 'numPostSamples': targNum})
                    # Bayes draws
                    setDraws = chainArr[m][choice(np.arange(numdraws), size=bayesNum, replace=False)]
                    bayesNeighNum = bayesBudget - bayesNum
                    lossDict.update({'bayesEstNeighborNum': bayesNeighNum})
                    lossDict.update({'bayesDraws': setDraws})
                    print('Generating loss matrix...')
                    tempLossMat = lf.lossMatSetBayesDraws(dictTemp['postSamples'], lossDict.copy(),
                                                          lossDict['bayesDraws'])
                    tempLossDict = lossDict.copy()
                    tempLossDict.update({'lossMat': tempLossMat})
                    # Choose neighbor subset chains
                    tempList = np.arange(M).tolist()
                    _ = tempList.pop(m)
                    currChain = chainArr[choice(tempList, size=neighSubset, replace=False).tolist()]
                    currChain = currChain.reshape(-1, currChain.shape[-1])
                    newBayesDraws, newLossMat = lf.add_cand_neighbors(tempLossDict.copy(), currChain,
                                                                      dictTemp['postSamples'])
                    tempLossDict.update({'bayesDraws': newBayesDraws, 'lossMat': newLossMat})
                    baseLoss = (np.sum(newLossMat, axis=1) / newLossMat.shape[1]).min()
                    utilDict.update({'dataDraws': setDraws[
                        choice(np.arange(len(setDraws)), size=dataNum, replace=False)]})
                    currCompUtil = baseLoss - sampf.sampling_plan_loss(priordatadict=dictTemp, lossdict=tempLossDict,
                                                                       designlist=[des], numtests=sampBudget,
                                                                       utildict=utilDict)[0]
                    print(currCompUtil)
                    resArr[resInd, rep] = currCompUtil
                # Update boxplot
                # for j in range(m+1):
                # grpInt = 12
                # lo, hi = grpInt * j, grpInt * j + grpInt
                # plt.boxplot(resArr[lo:hi, :].T)
                plt.boxplot(resArr.T)
                plt.xticks(np.arange(1, len(bayesNumList) * len(neighSubsetList) * numchains + 1), iterStr, fontsize=6)
                plt.subplots_adjust(bottom=0.15)
                plt.ylim([0, 0.5])
                plt.title(
                    'Inspection of Variance\nChain Index, $|\Gamma_{Bayes}|$, Subset Size for Neighbors')
                plt.show()
                plt.close()
    '''3-MAY 
    resArr = np.array([[0.25922809, 0.21152128, 0.32682852, 0.25893501, 0.32011834,
        0.28215548, 0.27297519, 0.26650564, 0.31045298, 0.2645679 ],
       [0.3230986 , 0.28521224, 0.35924548, 0.24993124, 0.31195981,
        0.25652251, 0.28586066, 0.38215003, 0.23902693, 0.31648611],
       [0.29761003, 0.30882144, 0.25701065, 0.30945767, 0.26094028,
        0.28010222, 0.33711718, 0.29854542, 0.30494601, 0.22191231],
       [0.28954285, 0.27460439, 0.20767969, 0.27785135, 0.29465636,
        0.22568909, 0.29560497, 0.30929118, 0.28629857, 0.21720021],
       [0.30356474, 0.30494993, 0.27077994, 0.31956465, 0.28306147,
        0.24108853, 0.26122869, 0.3188711 , 0.23632392, 0.31103161],
       [0.29015315, 0.27638898, 0.23173049, 0.21591692, 0.24468154,
        0.28166943, 0.26083968, 0.26252673, 0.23643664, 0.24118169],
       [0.18438034, 0.27356838, 0.27836005, 0.26915907, 0.26132407,
        0.27354044, 0.25969724, 0.31052583, 0.22458093, 0.29044082],
       [0.27100395, 0.27137226, 0.27633042, 0.25615459, 0.22026362,
        0.30351852, 0.25313671, 0.2317474 , 0.34658715, 0.2622793 ],
       [0.33131845, 0.25680283, 0.300622  , 0.2679166 , 0.29347658,
        0.27422057, 0.24624902, 0.28273852, 0.22584319, 0.28801134],
       [0.24995948, 0.30401154, 0.20861646, 0.2726624 , 0.27375451,
        0.24014154, 0.33156145, 0.26875123, 0.36709413, 0.35229585],
       [0.31403779, 0.23157339, 0.23566022, 0.18776647, 0.28597954,
        0.26653115, 0.29764197, 0.19435326, 0.26690076, 0.22843424],
       [0.19341255, 0.29125951, 0.23215109, 0.29377385, 0.33836449,
        0.26270407, 0.31751753, 0.25738438, 0.26216884, 0.24705414],
       [0.37529377, 0.3153836 , 0.32620638, 0.22944943, 0.33157841,
        0.29657338, 0.30739368, 0.29578012, 0.26598823, 0.34270502],
       [0.30782033, 0.2139943 , 0.3052116 , 0.23991447, 0.22301481,
        0.31587201, 0.28087781, 0.29250498, 0.25358727, 0.21884791],
       [0.31450126, 0.32525344, 0.27814883, 0.30155466, 0.2419084 ,
        0.24833339, 0.30156364, 0.31751027, 0.30254939, 0.273288  ],
       [0.27783384, 0.2519637 , 0.30806866, 0.25598413, 0.26093893,
        0.36259527, 0.31958982, 0.31166859, 0.29636058, 0.37123185],
       [0.17582672, 0.28805628, 0.28615316, 0.25663649, 0.31951682,
        0.32150738, 0.33015777, 0.31830566, 0.25839788, 0.25585878],
       [0.31277656, 0.30222114, 0.32333517, 0.25085039, 0.28781000,
        0.27248311, 0.28523775, 0.24532471, 0.21938785, 0.26152519],
       [0.29830379, 0.31787553, 0.27022063, 0.28725251, 0.28880356,
        0.30313368, 0.25084996, 0.28622102, 0.28921489, 0.26092372],
       [0.30592784, 0.28870080, 0.24569696, 0.24477332, 0.16957959,
        0.31127054, 0.28782311, 0.23963443, 0.28232114, 0.28903679],
       [0.25857384, 0.21291755, 0.32195873, 0.36668731, 0.24775703,
        0.27879734, 0.29317291, 0.25800559, 0.30840201, 0.24977427],
       [0.24571063, 0.28345675, 0.31627879, 0.30403176, 0.30733257,
        0.31502799, 0.24012870, 0.23345152, 0.27098700, 0.284235920],
       [0.26833579, 0.25771007, 0.30568973, 0.32185814, 0.301857543,
        0.27972620, 0.20096337, 0.21995261, 0.31048568, 0.293934046],
       [0.34076973, 0.34468448, 0.31501417, 0.16974808, 0.215928550,
        0.22545628, 0.23191922, 0.28772824, 0.31413229, 0.242711858],
       [0.26787791, 0.31233091, 0.29541348, 0.28425291, 0.225579176,
        0.24412762, 0.25547475, 0.26815710, 0.27063183, 0.291785361],
       [0.34841454, 0.22783146, 0.2985446 , 0.31035026, 0.20202024,
        0.21049854, 0.29707281, 0.29170477, 0.3124121 , 0.26305462],
       [0.2467164 , 0.23565219, 0.30721213, 0.3376722 , 0.2612509 ,
        0.20933646, 0.20013272, 0.29398333, 0.25255538, 0.2815461 ],
       [0.22804299, 0.24988717, 0.31335701, 0.23403021, 0.30341107,
        0.2953812 , 0.19870525, 0.24555795, 0.27522187, 0.24021073],
       [0.35858237, 0.31743247, 0.32146631, 0.2099853 , 0.25281713,
        0.24413824, 0.23037512, 0.27599441, 0.24880482, 0.26963728],
       [0.29652756, 0.23082959, 0.29138305, 0.37512254, 0.26834901,
        0.31614206, 0.29325937, 0.27591864, 0.25317988, 0.26786767]])
    '''
    # Plot summaries
    # FIRST: across chains, every 6 runs
    resArrgrpChains = np.zeros((int(resArr.shape[0] / numchains), numReps * numchains))
    for i in range(int(resArr.shape[0] / numchains)):
        for j in range(numchains):
            for k in range(numReps):
                resArrgrpChains[i, j * numReps + k] = resArr[i + j * len(bayesNumList) * len(neighSubsetList), k]
    # plot
    iterStr = [str(bayesNum) + '\n' + str(neighSubset) for bayesNum in bayesNumList for neighSubset in neighSubsetList]
    plt.boxplot(resArrgrpChains.T, whis=(2.5, 97.5))
    plt.xticks(np.arange(1, resArrgrpChains.shape[0] + 1), iterStr, fontsize=6)
    plt.subplots_adjust(bottom=0.15)
    plt.ylim([0, 0.5])
    plt.xlabel('$|\Gamma_{cand}|$, Subset Size for Neighbors (x$10^{-5}$)')
    plt.ylabel('Utility')
    plt.title('Inspection of variance\nMCMC candidate budget of 11,000 draws')
    plt.show()
    plt.close()
    # SECOND: across chains and size of Bayes set (before neighbors)
    resArrgrpBayes = np.zeros((len(bayesNumList), numReps * numchains * len(neighSubsetList)))
    for i in range(len(bayesNumList)):
        for j in range(len(neighSubsetList)):
            resArrgrpBayes[i, j * numReps * numchains:j * numReps * numchains + numReps * numchains] = resArrgrpChains[
                i * len(neighSubsetList) + j]
    # plot
    iterStr = [str(bayesNum) for bayesNum in bayesNumList]
    plt.boxplot(resArrgrpBayes.T, whis=(2.5, 97.5))
    plt.xticks(np.arange(1, resArrgrpBayes.shape[0] + 1), iterStr, fontsize=6)
    plt.subplots_adjust(bottom=0.15)
    plt.ylim([0, 0.5])
    plt.xlabel('$|\Gamma_{cand}|$')
    plt.ylabel('Utility')
    plt.title('Inspection of variance\nMCMC candidate budget of 11,000 draws')
    plt.show()
    plt.close()
    # THIRD: across chains and size of neighbors subset
    resArrgrpNeighSubset = np.zeros((len(neighSubsetList), len(bayesNumList) * numReps * numchains))
    for i in range(len(bayesNumList)):
        for j in range(len(neighSubsetList)):
            resArrgrpNeighSubset[j, i * numReps * numchains:i * numReps * numchains + numReps * numchains] = \
                resArrgrpChains[i * len(neighSubsetList) + j]
    # plot
    iterStr = [str(neighSubset) for neighSubset in neighSubsetList]
    plt.boxplot(resArrgrpNeighSubset.T, whis=(2.5, 97.5))
    plt.xticks(np.arange(1, resArrgrpNeighSubset.shape[0] + 1), iterStr, fontsize=6)
    plt.subplots_adjust(bottom=0.15)
    plt.ylim([0, 0.5])
    plt.xlabel('Subset Size for Neighbors (x$10^{-5}$)')
    plt.ylabel('Utility')
    plt.title('Inspection of variance\nMCMC candidate budget of 11,000 draws')
    plt.show()
    plt.close()

    #####################
    # Use 2000 neighbors from different numbers of chains
    bayesNumList = [10000]
    bayesBudget = 11000
    neighSubsetList = [5, 7, 9]  # [6000, 10000, 25000, 50000, 75000, 100000]
    targNum = 5000
    dataNum = 4000

    numReps = 10
    numchains = 5

    # Iterate through each chain 10 times
    resArr = np.zeros((len(bayesNumList) * (len(neighSubsetList)) * numchains, numReps))
    resInd = -1
    iterStr = ['' for i in range(resArr.shape[0])]
    for m in range(2, numchains):
        for bayesNumInd, bayesNum in enumerate(bayesNumList):
            for neighSubsetInd, neighSubset in enumerate(neighSubsetList):
                resInd += 1
                iterName = str(m) + ', ' + str(bayesNum) + ', ' + str(neighSubset)
                print(iterName)
                iterStr[resInd] = str(m) + '\n' + str(bayesNum)[:-3] + 'k\n' + str(neighSubset)
                for rep in range(numReps):
                    dictTemp = CSdict3.copy()
                    dictTemp.update({'postSamples': chainArr[m][choice(np.arange(numdraws), size=targNum,
                                                                       replace=False)], 'numPostSamples': targNum})
                    # Bayes draws
                    setDraws = chainArr[m][choice(np.arange(numdraws), size=bayesNum, replace=False)]
                    bayesNeighNum = bayesBudget - bayesNum
                    lossDict.update({'bayesEstNeighborNum': bayesNeighNum})
                    lossDict.update({'bayesDraws': setDraws})
                    print('Generating loss matrix...')
                    tempLossMat = lf.lossMatSetBayesDraws(dictTemp['postSamples'], lossDict.copy(),
                                                          lossDict['bayesDraws'])
                    tempLossDict = lossDict.copy()
                    tempLossDict.update({'lossMat': tempLossMat})
                    # Choose neighbor subset chains
                    tempList = np.arange(M).tolist()
                    _ = tempList.pop(m)
                    currChain = chainArr[choice(tempList, size=neighSubset, replace=False).tolist()]
                    currChain = currChain.reshape(-1, currChain.shape[-1])
                    newBayesDraws, newLossMat = lf.add_cand_neighbors(tempLossDict.copy(), currChain,
                                                                      dictTemp['postSamples'])
                    tempLossDict.update({'bayesDraws': newBayesDraws, 'lossMat': newLossMat})
                    baseLoss = (np.sum(newLossMat, axis=1) / newLossMat.shape[1]).min()
                    utilDict.update({'dataDraws': setDraws[
                        choice(np.arange(len(setDraws)), size=dataNum, replace=False)]})
                    currCompUtil = baseLoss - sampf.sampling_plan_loss(priordatadict=dictTemp, lossdict=tempLossDict,
                                                                       designlist=[des], numtests=sampBudget,
                                                                       utildict=utilDict)[0]
                    print(currCompUtil)
                    resArr[resInd, rep] = currCompUtil
                # Update boxplot
                # for j in range(m+1):
                # grpInt = 12
                # lo, hi = grpInt * j, grpInt * j + grpInt
                # plt.boxplot(resArr[lo:hi, :].T)
                plt.boxplot(resArr.T)
                plt.xticks(np.arange(1, len(bayesNumList) * len(neighSubsetList) * numchains + 1), iterStr, fontsize=6)
                plt.subplots_adjust(bottom=0.15)
                plt.ylim([0, 0.5])
                plt.title(
                    'Inspection of Variance\nChain Index, $|\Gamma_{Bayes}|$, Subset Size for Neighbors')
                plt.show()
                plt.close()
    '''3-MAY
    resArr = np.array([[0.25091356, 0.26578754, 0.28009681, 0.26617603, 0.26966997,
        0.24734779, 0.26559043, 0.26209389, 0.24337063, 0.25309241],
       [0.27851429, 0.29124887, 0.2632589 , 0.22087786, 0.34332638,
        0.28740539, 0.26860753, 0.29470801, 0.26048674, 0.26493664],
       [0.26971316, 0.24012333, 0.3017403 , 0.24797099, 0.22936935,
        0.24037549, 0.23905638, 0.24830222, 0.29834837, 0.25073623],
       [0.2166433 , 0.24707857, 0.3107805 , 0.19465986, 0.20561039,
        0.28620077, 0.34461903, 0.24387989, 0.33132418, 0.34187895],
       [0.36439964, 0.31266924, 0.36169479, 0.38758014, 0.25915442,
        0.22651117, 0.3852711 , 0.26752768, 0.23350854, 0.33664745],
       [0.29070239, 0.20562591, 0.34691735, 0.25414029, 0.30629949,
        0.30605699, 0.29157516, 0.21761012, 0.21466255, 0.22403394],
       [0.23825019, 0.24039479, 0.30328736, 0.31951914, 0.23877912,
        0.31656134, 0.26756235, 0.27258088, 0.21837939, 0.25673434],
       [0.28154281, 0.27450496, 0.26033216, 0.24010871, 0.31439967,
        0.32880938, 0.25042772, 0.33296975, 0.24214992, 0.3143101 ],
       [0.23430612, 0.28616991, 0.23680262, 0.23577066, 0.23267101,
        0.26749397, 0.24484787, 0.23964729, 0.23262728, 0.28488416],
       [0.29349275, 0.3118262 , 0.23898682, 0.28306828, 0.26785167,
        0.31346797, 0.26471779, 0.20906989, 0.26408018, 0.15623832],
       [0.27231028, 0.2317226 , 0.22269545, 0.29776274, 0.23279939,
        0.24808182, 0.24238886, 0.24854095, 0.22633168, 0.28750402],
       [0.23243343, 0.30036177, 0.25210219, 0.25421199, 0.23484861,
        0.26059472, 0.27154754, 0.26278736, 0.25107496, 0.24852336],
       [0.2579124 , 0.3476853 , 0.28990342, 0.26856414, 0.28088435,
        0.28133192, 0.29778149, 0.24802686, 0.22528811, 0.2500689 ],
       [0.30038217, 0.21375809, 0.27216944, 0.26751241, 0.3127653 ,
        0.2751479 , 0.22919457, 0.2532322 , 0.33275403, 0.24600407],
       [0.29409664, 0.29483346, 0.30337485, 0.24252076, 0.29371231,
        0.23971879, 0.28625707, 0.29625051, 0.29418604, 0.24534115]])
    '''

    ##################
    # Compare with apples-to-apples runs from 1st iteration
    '''3-MAY
    resArrgrpChains = np.array([[0.36396916, 0.33901085, 0.23733722, 0.33635064, 0.27275545,
        0.40109206, 0.33434228, 0.33693672, 0.20961966, 0.28016342,
        0.2896027 , 0.38014044, 0.23123968, 0.26864697, 0.36943204,
        0.22966483, 0.3478276 , 0.39141361, 0.43898869, 0.26625763,
        0.22343532, 0.36917667, 0.24545687, 0.33202278, 0.50889208,
        0.42338633, 0.28392269, 0.34061916, 0.3033188 , 0.40004486,
        0.40260777, 0.29053039, 0.36540902, 0.2787384 , 0.26955001,
        0.41927921, 0.17855587, 0.39348569, 0.37945285, 0.32415271,
        0.33124564, 0.34759891, 0.31930994, 0.37526682, 0.34043733,
        0.32380361, 0.33949199, 0.21067178, 0.28786233, 0.3863623 ],
       [0.33614501, 0.33376392, 0.30734827, 0.28624233, 0.31301127,
        0.31189225, 0.26637955, 0.31845292, 0.32354194, 0.32401944,
        0.37850406, 0.26312606, 0.33056395, 0.3351937 , 0.27876865,
        0.29382621, 0.32363348, 0.42446447, 0.37166177, 0.40321324,
        0.40661765, 0.32829131, 0.29547258, 0.35502751, 0.29084627,
        0.3002673 , 0.29883961, 0.31071194, 0.33781981, 0.26649514,
        0.39037405, 0.27678418, 0.29979504, 0.3339427 , 0.38781906,
        0.28447542, 0.39691176, 0.31206548, 0.28213222, 0.23321726,
        0.36795523, 0.17563072, 0.32010512, 0.25648443, 0.41951897,
        0.31682003, 0.36787256, 0.2620599 , 0.19105261, 0.30535219],
       [0.35983489, 0.31972132, 0.39672934, 0.29065445, 0.34565505,
        0.30829671, 0.34620445, 0.29836921, 0.34178236, 0.32417801,
        0.30515057, 0.40084913, 0.35384994, 0.29878948, 0.28811907,
        0.40827527, 0.35386553, 0.38617088, 0.26857723, 0.31325648,
        0.31861974, 0.27378234, 0.34172999, 0.27084152, 0.31083238,
        0.34656211, 0.4079171 , 0.31797074, 0.27141457, 0.37776335,
        0.30780698, 0.31002378, 0.22179845, 0.32703505, 0.35546153,
        0.35147977, 0.33066928, 0.35192552, 0.3286781 , 0.31153295,
        0.40804395, 0.29463111, 0.26687024, 0.32750196, 0.35478661,
        0.29484486, 0.31613995, 0.30072086, 0.19616281, 0.30317536],
       [0.32492779, 0.30195045, 0.32127439, 0.30430937, 0.23098756,
        0.3239377 , 0.29969451, 0.34791843, 0.29973817, 0.31621439,
        0.33294881, 0.32025429, 0.35460179, 0.313875  , 0.35673353,
        0.34741762, 0.31651974, 0.30281699, 0.30428285, 0.30347674,
        0.26851804, 0.31366699, 0.35401395, 0.28476597, 0.20557137,
        0.3671256 , 0.33576738, 0.34108784, 0.3077003 , 0.29087272,
        0.24884171, 0.34512476, 0.26079888, 0.20060127, 0.30887018,
        0.29074   , 0.37545906, 0.29731581, 0.21028065, 0.23833528,
        0.2435774 , 0.34860618, 0.28181263, 0.38730979, 0.33191099,
        0.3559008 , 0.33751592, 0.26854826, 0.38524605, 0.29904949],
       [0.23654603, 0.2272105 , 0.23901307, 0.31013569, 0.3396324 ,
        0.267535  , 0.20084762, 0.23316338, 0.289267  , 0.27587806,
        0.27055596, 0.2614645 , 0.3427491 , 0.333199  , 0.27905234,
        0.35890384, 0.28535628, 0.33225615, 0.38111804, 0.34804981,
        0.2912308 , 0.38519322, 0.33838384, 0.30623254, 0.26058883,
        0.24023452, 0.30063353, 0.28050465, 0.32348717, 0.31318438,
        0.27118448, 0.3135424 , 0.4607416 , 0.28485757, 0.32738984,
        0.19391333, 0.2657894 , 0.32924238, 0.33662536, 0.28689725,
        0.31368128, 0.27571307, 0.30003597, 0.34949548, 0.17478907,
        0.32035072, 0.27247209, 0.30622604, 0.32817939, 0.30356158],
       [0.20346287, 0.27461868, 0.2905964 , 0.26928913, 0.28752993,
        0.28073212, 0.23106505, 0.30422988, 0.27931465, 0.30243756,
        0.27137363, 0.27107444, 0.28818841, 0.29162292, 0.24275988,
        0.28340926, 0.36671172, 0.35137098, 0.30520209, 0.26124599,
        0.25993623, 0.32208651, 0.31172781, 0.37398658, 0.28095367,
        0.26526585, 0.28177036, 0.28353782, 0.30744925, 0.34374548,
        0.32649371, 0.3121948 , 0.26802255, 0.24651516, 0.17818745,
        0.28036441, 0.30779482, 0.26639074, 0.28203898, 0.32475216,
        0.25537331, 0.27290574, 0.35724967, 0.29385317, 0.33430369,
        0.29240697, 0.34517995, 0.31301652, 0.30139967, 0.26480102],
        [0.28954285, 0.27460439, 0.20767969, 0.27785135, 0.29465636,
        0.22568909, 0.29560497, 0.30929118, 0.28629857, 0.21720021,
        0.24995948, 0.30401154, 0.20861646, 0.2726624 , 0.27375451,
        0.24014154, 0.33156145, 0.26875123, 0.36709413, 0.35229585,
        0.27783384, 0.2519637 , 0.30806866, 0.25598413, 0.26093893,
        0.36259527, 0.31958982, 0.31166859, 0.29636058, 0.37123185,
        0.24571063, 0.28345675, 0.31627879, 0.30403176, 0.30733257,
        0.31502799, 0.2401287 , 0.23345152, 0.270987  , 0.28423592,
        0.22804299, 0.24988717, 0.31335701, 0.23403021, 0.30341107,
        0.2953812 , 0.19870525, 0.24555795, 0.27522187, 0.24021073],
       [0.30356474, 0.30494993, 0.27077994, 0.31956465, 0.28306147,
        0.24108853, 0.26122869, 0.3188711 , 0.23632392, 0.31103161,
        0.31403779, 0.23157339, 0.23566022, 0.18776647, 0.28597954,
        0.26653115, 0.29764197, 0.19435326, 0.26690076, 0.22843424,
        0.17582672, 0.28805628, 0.28615316, 0.25663649, 0.31951682,
        0.32150738, 0.33015777, 0.31830566, 0.25839788, 0.25585878,
        0.26833579, 0.25771007, 0.30568973, 0.32185814, 0.30185754,
        0.2797262 , 0.20096337, 0.21995261, 0.31048568, 0.29393405,
        0.35858237, 0.31743247, 0.32146631, 0.2099853 , 0.25281713,
        0.24413824, 0.23037512, 0.27599441, 0.24880482, 0.26963728],
       [0.29015315, 0.27638898, 0.23173049, 0.21591692, 0.24468154,
        0.28166943, 0.26083968, 0.26252673, 0.23643664, 0.24118169,
        0.19341255, 0.29125951, 0.23215109, 0.29377385, 0.33836449,
        0.26270407, 0.31751753, 0.25738438, 0.26216884, 0.24705414,
        0.31277656, 0.30222114, 0.32333517, 0.25085039, 0.28781   ,
        0.27248311, 0.28523775, 0.24532471, 0.21938785, 0.26152519,
        0.34076973, 0.34468448, 0.31501417, 0.16974808, 0.21592855,
        0.22545628, 0.23191922, 0.28772824, 0.31413229, 0.24271186,
        0.29652756, 0.23082959, 0.29138305, 0.37512254, 0.26834901,
        0.31614206, 0.29325937, 0.27591864, 0.25317988, 0.26786767]])
    '''
    iterStr = [str(neighSubset) for neighSubset in [6, 10, 25, 50, 75, 100, 200, 300, 400]]
    plt.boxplot(resArrgrpChains.T, whis=(2.5, 97.5))
    plt.xticks(np.arange(1, resArrgrpChains.shape[0] + 1), iterStr, fontsize=6)
    plt.subplots_adjust(bottom=0.15)
    plt.ylim([0, 0.5])
    plt.xlabel('Subset Size for Neighbors (x$10^{-3}$)')
    plt.ylabel('Utility')
    plt.title('Inspection of variance\n$|\Gamma_{cand}|=10,000$, $|\Gamma_{candNeigh}|=1,000$')
    plt.show()
    plt.close()
    # Variance estimates
    temp = []
    for i in range(9):
        temp.append(np.std(resArrgrpChains[i], ddof=1))
    plt.plot(temp)
    plt.title('Sample standard deviation for different subset sizes for neighbors')
    plt.ylim([0, 0.07])
    plt.xticks(np.arange(9), iterStr)
    plt.show()
    plt.close()

    #############
    # What is a suitable number of data draws? Show expected loss vs number of draws
    bayesNum = 10000
    bayesNeighNum = 1000
    targNum = 5000
    dataNum = 10000

    numReps = 10
    numchains = 10

    # Iterate through each chain numReps times
    resArr = np.zeros((numReps * numchains, dataNum))
    resInd = -1
    for m in range(numchains):
        for rep in range(numReps):
            resInd += 1
            dictTemp = CSdict3.copy()
            dictTemp.update({'postSamples': chainArr[m][choice(np.arange(numdraws), size=targNum,
                                                               replace=False)], 'numPostSamples': targNum})
            # Bayes draws
            setDraws = chainArr[m][choice(np.arange(numdraws), size=bayesNum, replace=False)]
            lossDict.update({'bayesEstNeighborNum': bayesNeighNum})
            lossDict.update({'bayesDraws': setDraws})
            print('Generating loss matrix...')
            tempLossMat = lf.lossMatSetBayesDraws(dictTemp['postSamples'], lossDict.copy(),
                                                  lossDict['bayesDraws'])
            tempLossDict = lossDict.copy()
            tempLossDict.update({'lossMat': tempLossMat})
            # Choose neighbor subset chain
            newBayesDraws, newLossMat = lf.add_cand_neighbors(tempLossDict.copy(), chainArr[m],
                                                              dictTemp['postSamples'])
            tempLossDict.update({'bayesDraws': newBayesDraws, 'lossMat': newLossMat})
            # Get weights matrix
            utilDict.update({'dataDraws': setDraws[
                choice(np.arange(len(setDraws)), size=dataNum, replace=False)]})
            # baseLoss = (np.sum(newLossMat, axis=1) / newLossMat.shape[1]).min()
            # Generate W
            Ntilde = des.copy()
            sampNodeInd = 0
            for currind in range(numTN):  # Identify the test node we're analyzing
                if Ntilde[currind] > 0:
                    sampNodeInd = currind  # TN of focus
            Ntotal, Qvec = sampBudget, dictTemp['Q'][sampNodeInd]
            datadraws = utilDict['dataDraws']
            numdrawsfordata, numpriordraws = datadraws.shape[0], dictTemp['postSamples'].shape[0]
            zMatTarg = zProbTrVec(numSN, dictTemp['postSamples'], sens=s, spec=r)[:, sampNodeInd,
                       :]  # Matrix of SFP probabilities, as a function of SFP rate draws
            zMatData = zProbTrVec(numSN, datadraws, sens=s, spec=r)[:, sampNodeInd, :]  # Probs. using data draws
            NMat = np.random.multinomial(Ntotal, Qvec, size=numdrawsfordata)  # How many samples from each SN
            YMat = np.random.binomial(NMat, zMatData)  # How many samples were positive
            tempW = np.zeros(shape=(numpriordraws, numdrawsfordata))
            for nodeInd in range(numSN):  # Loop through each SN
                # Get zProbs corresponding to current SN
                bigZtemp = np.transpose(
                    np.reshape(np.tile(zMatTarg[:, nodeInd], numdrawsfordata), (numdrawsfordata, numpriordraws)))
                bigNtemp = np.reshape(np.tile(NMat[:, nodeInd], numpriordraws), (numpriordraws, numdrawsfordata))
                bigYtemp = np.reshape(np.tile(YMat[:, nodeInd], numpriordraws), (numpriordraws, numdrawsfordata))
                combNYtemp = np.reshape(np.tile(sps.comb(NMat[:, nodeInd], YMat[:, nodeInd]), numpriordraws),
                                        (numpriordraws, numdrawsfordata))
                tempW += (bigYtemp * np.log(bigZtemp)) + ((bigNtemp - bigYtemp) * np.log(1 - bigZtemp)) + np.log(
                    combNYtemp)
            wtsMat = np.exp(tempW)  # Turn weights into likelihoods
            # Normalize so each column sums to 1; the likelihood of each data set is accounted for in the data draws
            wtsMat = np.divide(wtsMat * 1, np.reshape(np.tile(np.sum(wtsMat, axis=0), numpriordraws),
                                                      (numpriordraws, numdrawsfordata)))
            wtLossMat = np.matmul(tempLossDict['lossMat'], wtsMat)
            wtLossMins = wtLossMat.min(axis=0)
            wtLossMinsCumul = np.cumsum(wtLossMins) / np.arange(1, 1 + numdrawsfordata)
            resArr[resInd] = wtLossMinsCumul.copy()
    # np.save('resArrDataDraws.npy', resArr)
    # chainArr = np.load('chainArr.npy')

    return

def STUDYutilVarOLD():
    '''Look at impact of different MCMC usages on utility calculation variance, using case study setting'''
    rd3_N = np.array([[1., 1., 10., 1., 3., 0., 1., 6., 7., 5., 0., 0., 4.],
                      [1., 1., 4., 2., 0., 1., 1., 2., 0., 4., 0., 0., 1.],
                      [3., 17., 31., 4., 2., 0., 1., 6., 0., 23., 1., 2., 5.],
                      [1., 1., 15., 2., 0., 0., 0., 1., 0., 6., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
    rd3_Y = np.array([[0., 0., 7., 0., 3., 0., 1., 0., 1., 0., 0., 0., 4.],
                      [0., 0., 2., 2., 0., 1., 1., 0., 0., 1., 0., 0., 1.],
                      [0., 0., 15., 3., 2., 0., 0., 2., 0., 1., 1., 2., 5.],
                      [0., 0., 5., 2., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                      [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])

    (numTN, numSN) = rd3_N.shape
    s, r = 1., 1.
    CSdict3 = util.generateRandDataDict(numImp=numSN, numOut=numTN, diagSens=s, diagSpec=r,
                                        numSamples=0, dataType='Tracked', randSeed=2)
    CSdict3['diagSens'], CSdict3['diagSpec'] = s, r
    CSdict3 = util.GetVectorForms(CSdict3)
    CSdict3['N'], CSdict3['Y'] = rd3_N, rd3_Y

    SNpriorMean = np.repeat(sps.logit(0.1), numSN)
    # Establish test nodes according to assessment by regulators
    TNpriorMean = sps.logit(np.array([0.1, 0.1, 0.15, 0.15, 0.15, 0.1, 0.15, 0.1]))
    TNvar, SNvar = 2., 4.
    CSdict3['prior'] = prior_normal_assort(np.concatenate((SNpriorMean, TNpriorMean)),
                                           np.diag(np.concatenate((np.repeat(SNvar, numSN), np.repeat(TNvar, numTN)))))

    ##### REMOVE LATER
    # CSdict3['TNnames'] = ['ASHANTI', 'BRONG AHAFO', 'CENTRAL', 'EASTERN REGION', 'GREATER ACCRA', 'NORTHERN SECTOR', 'VOLTA', 'WESTERN']
    CSdict3['TNnames'] = ['MOD_39', 'MOD_17', 'MODHIGH_95', 'MODHIGH_26',
                          'MODHIGH_EXPL_1', 'MOD_EXPL_1', 'MODHIGH_EXPL_2', 'MOD_EXPL_2']
    CSdict3['SNnames'] = ['ACME FORMULATION PVT. LTD.', 'AS GRINDEKS', 'BELCO PHARMA', 'BHARAT PARENTERALS LTD',
                          'HUBEI TIANYAO PHARMACEUTICALS CO LTD.', 'MACIN REMEDIES INDIA LTD',
                          'NORTH CHINA PHARMACEUTICAL CO. LTD', 'NOVARTIS PHARMA', 'PFIZER',
                          'PIRAMAL HEALTHCARE UK LIMITED', 'PUSHKAR PHARMA',
                          'SHANDOND SHENGLU PHARMACEUTICAL CO.LTD.', 'SHANXI SHUGUANG PHARM']

    # Region catchment proportions
    TNcach = np.array([0.17646, 0.05752, 0.09275, 0.09488, 0.17695, 0.22799, 0.07805, 0.0954])
    tempQ = CSdict3['N'][:4] / np.sum(CSdict3['N'][:4], axis=1).reshape(4, 1)
    tempTNcach = TNcach[:4] / np.sum(TNcach[:4])
    SNcach = np.matmul(tempTNcach, tempQ)
    # Normalize market weights s.t. sum of TN terms equals sum of SN terms equals number of TNs
    # TNcach = TNcach * TNcach.shape[0] / TNcach.sum()
    # SNcach = SNcach * TNcach.sum() / SNcach.sum()
    ###################

    CSdict3['MCMCdict'] = {'MCMCtype': 'NUTS', 'Madapt': 5000, 'delta': 0.4}
    CSdict3['SNnum'], CSdict3['TNnum'] = numSN, numTN
    # Generate posterior draws
    numdraws = 100000  # Evaluate choice here
    CSdict3['numPostSamples'] = numdraws

    # Generate 10 MCMC chains of 100k each, with different
    M = 10  # Number of chains
    # Sample initial points from prior
    np.random.seed(10)
    newBetaArr = CSdict3['prior'].rand(M)
    # Generate chains from initial points
    CSdict3['MCMCdict'] = {'MCMCtype': 'NUTS', 'Madapt': 5000, 'delta': 0.4, 'initBeta': newBetaArr[0]}
    CSdict3 = methods.GeneratePostSamples(CSdict3)
    chainArr = CSdict3['postSamples']
    chainArr = chainArr.reshape((1, numdraws, numSN + numTN))
    # Generate new chains with different initial points
    for m in range(1, M):
        CSdict3['MCMCdict'] = {'MCMCtype': 'NUTS', 'Madapt': 5000, 'delta': 0.4, 'initBeta': newBetaArr[m]}
        CSdict3 = methods.GeneratePostSamples(CSdict3)
        chainArr = np.concatenate((chainArr, CSdict3['postSamples'].reshape((1, numdraws, numSN + numTN))))
    # Save array for later use
    # np.save('chainArr.npy', chainArr)
    # chainArr = np.load('chainArr.npy')

    # Set sampling design and budget
    des = np.zeros(numTN)
    des[2] = 1.
    sampBudget = 50

    # Loss and utility dictionaries
    paramdict = lf.build_diffscore_checkrisk_dict(scoreunderestwt=5., riskthreshold=0.15, riskslope=0.6,
                                                  marketvec=np.ones(numTN + numSN), candneighnum=1000)

    # Set parameter lists
    bayesNumList = [1000, 5000, 10000]
    bayesNeighNumList = [100, 1000]
    targNumList = [1000, 5000]
    dataNumList = [500, 1000]
    numReps = 10
    numchains = 5

    # Iterate through each chain 10 times
    resArr = np.zeros(
        (len(bayesNumList) * len(bayesNeighNumList) * len(targNumList) * len(dataNumList) * numchains, numReps))
    resInd = -1
    iterStr = []
    for bayesNumInd, bayesNum in enumerate(bayesNumList):
        for bayesNeighNumInd, bayesNeighNum in enumerate(bayesNeighNumList):
            for targNumInd, targNum in enumerate(targNumList):
                for dataNumInd, dataNum in enumerate(dataNumList):
                    for m in range(numchains):
                        resInd += 1
                        iterName = str(bayesNum) + ', ' + str(bayesNeighNum) + ', ' + str(targNum) + ', ' + str(
                            dataNum) + ', ' + str(m)
                        print(iterName)
                        iterStr.append(str(bayesNum) + '\n' + str(bayesNeighNum) + '\n' + str(targNum) + '\n' + str(
                            dataNum) + '\n' + str(m))
                        for rep in range(numReps):
                            dictTemp = CSdict3.copy()
                            dictTemp.update({'postSamples': chainArr[m][choice(np.arange(numdraws), size=targNum,
                                                                               replace=False)],
                                             'numPostSamples': targNum})
                            # Bayes draws
                            setDraws = chainArr[m][choice(np.arange(numdraws), size=bayesNum, replace=False)]
                            lossDict.update({'bayesEstNeighborNum': bayesNeighNum})
                            lossDict.update({'bayesDraws': setDraws})
                            print('Generating loss matrix...')
                            tempLossMat = lf.lossMatSetBayesDraws(dictTemp['postSamples'], lossDict.copy(),
                                                                  lossDict['bayesDraws'])
                            tempLossDict = lossDict.copy()
                            tempLossDict.update({'lossMat': tempLossMat})
                            newBayesDraws, newLossMat = lf.add_cand_neighbors(tempLossDict.copy(), chainArr[m],
                                                                              dictTemp['postSamples'])
                            tempLossDict.update({'bayesDraws': newBayesDraws, 'lossMat': newLossMat})
                            baseLoss = (np.sum(newLossMat, axis=1) / newLossMat.shape[1]).min()
                            utilDict.update({'dataDraws': setDraws[
                                choice(np.arange(len(setDraws)), size=dataNum, replace=False)]})
                            currCompUtil = baseLoss - \
                                           sampf.sampling_plan_loss(priordatadict=dictTemp, lossdict=tempLossDict,
                                                                    designlist=[des], numtests=sampBudget,
                                                                    utildict=utilDict)[0]
                            resArr[resInd, rep] = currCompUtil
                    plt.boxplot(resArr.T)
                    plt.show()
                    plt.close()

    for j in range(6):
        lo, hi = 20 * j, 20 * j + 20
        plt.boxplot(resArr[lo:hi, :].T)
        plt.xticks(np.arange(1, hi - lo + 1), iterStr[lo:hi], fontsize=6)
        plt.subplots_adjust(bottom=0.15)
        plt.ylim([0, 0.5])
        plt.title('Inspection of Variance\n$|\Gamma_{Bayes}|$, $|\Gamma_{BayesNeigh}|$,'
                  '$|\Gamma_{targ}|$, $|\Gamma_{data}|$, Chain Index')
        plt.show()
        plt.close()
    '''
    resArr = np.array([[0.20732985495794676, 0.23332562013353586, 0.15382395791664383, 0.2540323670554496, 0.2796894013831728, 0.2732330403819958, 0.2117279130841081, 0.24515121658727068, 0.29135938303479847, 0.27901888140909836], [0.1637764303764051, 0.19362347007299086, 0.2719798236867046, 0.3220536965263534, 0.24041479708549574, 0.23723641378917026, 0.3112883438352405, 0.2347338945184445, 0.09548088917418696, 0.35365677101617443], [0.23572108027507843, 0.36987566828153984, 0.25130954037912234, 0.19273996907083557, 0.23030855332011857, 0.15309826733790333, 0.18975191332146357, 0.2738457434503738, 0.12523127940033252, 0.32044731644510893], [0.25890449577592545, 0.10762759078311745, 0.15854926744521425, 0.25946367248507496, 0.3648431618506782, 0.1646706044098405, 0.11283332596641493, 0.14235984764329412, 0.25477421952135604, 0.2217661730428886], [0.11732958428411866, 0.14345858806729161, 0.22768593077075927, 0.12506510350463618, 0.1938870854913155, 0.10695183281706422, 0.17369811130000734, 0.18689720518228015, 0.15352125965663088, 0.1873267016736495], [0.1720919526492084, 0.20905138096653797, 0.2762661995040596, 0.247823147475132, 0.2722995552508385, 0.1433280860616568, 0.24417839588897916, 0.27532028243370377, 0.20055350294091578, 0.1852238741140555], [0.15814154716491524, 0.23043142927502602, 0.14441231182342928, 0.1923261617969465, 0.28525424770753105, 0.25770126441102814, 0.12313839554379413, 0.30944872233919707, 0.2200663742261213, 0.2263648594522749], [0.2625831310770059, 0.2031383753032232, 0.37350730345505045, 0.2689905756391182, 0.23030043806838485, 0.08910992524792372, 0.2417099047003659, 0.1987881451583826, 0.26450561021528785, 0.3319308940138548], [0.24330579260026575, 0.17167004425360233, 0.1398359250304031, 0.21040040544066585, 0.3067613093707058, 0.19039061703580984, 0.2876935450446658, 0.26528455634996106, 0.21054500376553875, 0.17923566407879177], [0.17954378190663878, 0.34007160199135145, 0.20550730582546217, 0.18476808054755, 0.20135714580953223, 0.1792589845971837, 0.12279228660754082, 0.1958976189199957, 0.11203126072940606, 0.11344729986712565], [0.2764180789417505, 0.3279579775587713, 0.1425488149020797, 0.2234731449452907, 0.2731359206671886, 0.23359413064456636, 0.29470748856244544, 0.17117579874609312, 0.22611523531743138, 0.24842891539373557], [0.11944628495009901, 0.29043333679520966, 0.12213322383921943, 0.30192232355592363, 0.15567713522977833, 0.27081157922708865, 0.30870696411408804, 0.0920678072045753, 0.3311993988953481, 0.18737097715792128], [0.23994514693516233, 0.1352851302320479, 0.18066980339423155, 0.29305857586028683, 0.18484233005399187, 0.2236535392500567, 0.3270897190527098, 0.13580067808718432, 0.2957001695985406, 0.1965077703193412], [0.2061708746503168, 0.14659285398901511, 0.17869046336427097, 0.11504198202340188, 0.12372784538977744, 0.18275252032193467, 0.15581241243487431, 0.2746011880729302, 0.2469705638366464, 0.19397137377478213], [0.2057400615852023, 0.19101416865689913, 0.1437842315918405, 0.13919399830377488, 0.16373084304153052, 0.1366098518135903, 0.11782689489003806, 0.12019160595054679, 0.4517066145493782, 0.23580114473966063], [0.2776967989147474, 0.1492497128443908, 0.13673532673080224, 0.3022651980109643, 0.23682170803221858, 0.18377405971864658, 0.16578770292359257, 0.1490429844429655, 0.2693629978576624, 0.1784379174172539], [0.1948466853848405, 0.2167205620073238, 0.30389203114901076, 0.2658170601627132, 0.141637815490661, 0.1172952742365947, 0.14907470175240078, 0.25049565592725465, 0.3475208604383955, 0.30106626055289265], [0.19235836594126132, 0.12977738544417017, 0.1994795655280135, 0.1866365460858903, 0.16132260168911383, 0.20016331266276532, 0.3644841018492748, 0.18385890719624998, 0.14110127216057977, 0.14420885011545614], [0.17615137884396326, 0.19508228483565215, 0.21229762128403795, 0.12971405021298477, 0.16533491737751582, 0.1546116798289363, 0.1395734557807291, 0.11441473149413195, 0.2838740324327125, 0.27500098092756264], [0.1309880919551789, 0.274726663310199, 0.21312628508052, 0.11148917218490473, 0.17395980214994067, 0.17526594547035534, 0.24657049012921384, 0.20663371567771982, 0.1359046862982103, 0.07711009322109508], [0.2178095054096567, 0.2137578650894354, 0.2515626582622801, 0.22124667359328676, 0.2458118747389908, 0.25632329702752843, 0.22811592137415238, 0.19232765192974854, 0.2630005219988347, 0.14804380851772647], [0.2170128814305352, 0.2753887708420426, 0.2910492795740951, 0.24011048124988132, 0.3141380067801207, 0.26970647482041654, 0.2425984451589578, 0.222012988772053, 0.24743187662993416, 0.2937682568947233], [0.18325648085353885, 0.2836169425203323, 0.20042521445816153, 0.3944659322617512, 0.17033903597393074, 0.20080604372741462, 0.17037800691782623, 0.12699785287517074, 0.28902426576828555, 0.1839339083080298], [0.3031628027521549, 0.2940956778459731, 0.26269770479613586, 0.256161842389242, 0.19196371098648024, 0.3130408678449319, 0.21522184550713774, 0.30771115886376776, 0.23059237604743377, 0.245325514084755], [0.20114174143863295, 0.14637986197487773, 0.21006990359771516, 0.18174014743432076, 0.20847543946281233, 0.2511571068612386, 0.24218722360783174, 0.2753455515024772, 0.17864491258860005, 0.14350774347274253], [0.2509010166642236, 0.2172714004165459, 0.26548333572040983, 0.31277764482448145, 0.24803322072920952, 0.24840908774957482, 0.24454282417039863, 0.24218900457326953, 0.23359943971721808, 0.22804446303335046], [0.19246443398832502, 0.22777242452369384, 0.32035505675864195, 0.19267485354314706, 0.31450223437271063, 0.25049395017998544, 0.20647662705211722, 0.32198922045922984, 0.27552233939701587, 0.27475326128103994], [0.27688678337267936, 0.22231929074216872, 0.2616227338474926, 0.32371210452594745, 0.32244887267752675, 0.30490717487605457, 0.24789353252763213, 0.18307741334927607, 0.25684338460946554, 0.14029799952405098], [0.2699260950604758, 0.21579383470908642, 0.1776282879731701, 0.2495912450540816, 0.3565217458816963, 0.22931170731645834, 0.30204218337039146, 0.19470286883696408, 0.32070696991950465, 0.30159513825758344], [0.2510379189941756, 0.25840718775985616, 0.26648781600313987, 0.2687868820355557, 0.2425005884138156, 0.2742130767238229, 0.22214071314873163, 0.22595396104304566, 0.19140050558397803, 0.2478502110226115], [0.2561094238116728, 0.21821681863518938, 0.27534144478296385, 0.17533275218853284, 0.18216049227867037, 0.2668755505793081, 0.31516348373570624, 0.25171356237339815, 0.22421962912784688, 0.22169123562519122], [0.28319753916596024, 0.26392280705159177, 0.22847170215804535, 0.29283439694642865, 0.2500107609199871, 0.19230425652878802, 0.221295203282446, 0.25214434221342374, 0.20748594597178016, 0.17836527614108055], [0.30875369740899883, 0.16123049030789627, 0.2379745578257233, 0.24885688914267945, 0.2535850271614368, 0.24634539042954717, 0.24461522666989755, 0.27179372757096054, 0.13679545335329246, 0.2793341582487918], [0.2694636069910037, 0.2883079434343432, 0.23665640621623663, 0.27601998098069247, 0.28998285825725745, 0.27322291991329317, 0.23957145867285057, 0.35844147072003363, 0.21901763089007575, 0.2509976380098742], [0.18484692489495425, 0.22022896631376687, 0.24121702271783585, 0.16105367303149398, 0.2491745797401026, 0.23385798683970904, 0.2723717668771912, 0.22132441029305383, 0.25371873641391796, 0.21241494046992804], [0.225660655325306, 0.19746278035918596, 0.2658060673173157, 0.26345505150970494, 0.24659592808851416, 0.22868975358196852, 0.24673416155577366, 0.22091230697896114, 0.3066874106782316, 0.15457735298577013], [0.23300151016861603, 0.19428549413907525, 0.19578868626963075, 0.24781132676214135, 0.22776162504992303, 0.23261675482550492, 0.24488059572750842, 0.26889896863668694, 0.26960172675906513, 0.29026943709259045], [0.3108079883002741, 0.16663136180855442, 0.2724547614671686, 0.27583803795039064, 0.14678639301356355, 0.2558184633267411, 0.2813066794439254, 0.26541913691322216, 0.2974731697338129, 0.2477906540553425], [0.2629284498468456, 0.2600166399928634, 0.30952843155889553, 0.24943940328090886, 0.2196368388717791, 0.28415438823133465, 0.28018976207481616, 0.21581228217661952, 0.2617891379698265, 0.2985760466264926], [0.23053934983721192, 0.11260111669975714, 0.2553185643166471, 0.27613964033846816, 0.20129705388574015, 0.2438054225544195, 0.3085196851286436, 0.2172920165285741, 0.2966601063134999, 0.25226084384463965], [0.26329332771353586, 0.30427537148811545, 0.23100732418403025, 0.26084655017357816, 0.3502369553791116, 0.23471123769386137, 0.29690557783035443, 0.3125819708959545, 0.2878949802728301, 0.24797095437332883], [0.3976153667849349, 0.31060070512213045, 0.41945872042178145, 0.20341405423873615, 0.22617262568967256, 0.43994322305685074, 0.26165077866940445, 0.3179700026744965, 0.2718990625031146, 0.31125969181297286], [0.26058288745073366, 0.2349875934026202, 0.26007275360436743, 0.2874669079072456, 0.3637500483688014, 0.13706470295817397, 0.3342634154739783, 0.3366923072988599, 0.3668039016860285, 0.15255586449362424], [0.4204097406463454, 0.3146270903744197, 0.31629968071998205, 0.29110410840062784, 0.3546783336564663, 0.24926248043304566, 0.30063565174881424, 0.19568147763967136, 0.3006124803727399, 0.2314842891965383], [0.24742248165286185, 0.20953423208376476, 0.2556649230389576, 0.25306292478767656, 0.3604070847857761, 0.4016249751890424, 0.21000210572424072, 0.35041828962480004, 0.34221784514761255, 0.31012622361546827], [0.345496154550335, 0.2882960196766784, 0.2378509705996268, 0.22653330334162858, 0.24124389922211664, 0.17942753006167766, 0.232070907434899, 0.26392955686829644, 0.29033319369317256, 0.24275707648241918], [0.38845224814078083, 0.3003543389906409, 0.4472741995493905, 0.3834870990890442, 0.22133986807499495, 0.22723985304657246, 0.2282415777662079, 0.31847195561239294, 0.18278447896591743, 0.24357288015831013], [0.27603580759298785, 0.39011029067929215, 0.10169514315121209, 0.2530906596875049, 0.24519832896224036, 0.25608690825875957, 0.311486154772576, 0.3392581952071452, 0.3371582275610949, 0.3811401983208751], [0.2655003346724203, 0.36801027820691035, 0.34046829373352283, 0.28205201763682686, 0.23919825022592534, 0.28745549403650017, 0.2720919871892935, 0.28641989015376046, 0.3004201971013183, 0.2630805039158908], [0.23496410737508988, 0.24085329275558776, 0.22503265129701733, 0.2419817722959805, 0.323949831903942, 0.19803438030183518, 0.23156223387304076, 0.21853494971981302, 0.2071435091941516, 0.25982193987561564], [0.2230635332669082, 0.21021626724119535, 0.3251228223920575, 0.20982457594069714, 0.25828408102240763, 0.21177885582876677, 0.3630488090640345, 0.3158300363455466, 0.2864468268464204, 0.2589471194320163], [0.25162250887095006, 0.20630612393127779, 0.3007661890399471, 0.2886971811690242, 0.2640511635475016, 0.33084415273768997, 0.2851473432435849, 0.2147394481453042, 0.43453580762701316, 0.2789073668389168], [0.27820608114613243, 0.34492889034528673, 0.2932580373270124, 0.35194439847485404, 0.18710132350347264, 0.2812360230782387, 0.25758723871648925, 0.29058888754168244, 0.2852872345891182, 0.2548513100969432], [0.22604077653735155, 0.3720649510462284, 0.2669764130392629, 0.23967312180470834, 0.24267932659600744, 0.23276056189278016, 0.19437441851390114, 0.3278319915534227, 0.24522506534550637, 0.24736380868792684], [0.19620698262112501, 0.19627307185437903, 0.3071865163860332, 0.20646212783942453, 0.23875366565041833, 0.35112229687646845, 0.2306269792053235, 0.21688333516436664, 0.24558591022260812, 0.2251411023489629], [0.21810440230466943, 0.35124543239410366, 0.21583025567786418, 0.17791077671367095, 0.40225928955795887, 0.25689176769031974, 0.2605397222519734, 0.2534837514792967, 0.2452427102294683, 0.27318592778452944], [0.21231711843925893, 0.21210136239420496, 0.2014824550921266, 0.4161584013420887, 0.33120775416304404, 0.2936219381327949, 0.3679515647592053, 0.17639800134221728, 0.26153928084672984, 0.2364888781095824], [0.26398611005867156, 0.25551687278579127, 0.33543017715082524, 0.2936388626782307, 0.3674803860158202, 0.27883918092848115, 0.10606536117699239, 0.2891237976944878, 0.20960673873603541, 0.22368714282749336], [0.23795438686328296, 0.2218813007144198, 0.3481320089577129, 0.21940096973046908, 0.2683361054449822, 0.2958698146090821, 0.23821774195081735, 0.2629873730193766, 0.26467417393505643, 0.2563122511507969], [0.2701057829678071, 0.3191002337021236, 0.21788790350509446, 0.3118527055757556, 0.20151848485042745, 0.28243480259244924, 0.17297546961065846, 0.20827088322311393, 0.18964155716510556, 0.21663248609666308], [0.3033296225613995, 0.2760377644507499, 0.3974369399384723, 0.23461576957954078, 0.27019963992539164, 0.28570815441340347, 0.26890212790632084, 0.23585490904322093, 0.32423585569916735, 0.25373559665002343], [0.3037291582357349, 0.35694034183622625, 0.3520971089858542, 0.39172561677877926, 0.3850790654762517, 0.2629399840558375, 0.27587752007421873, 0.2858120183278796, 0.23379212780553438, 0.3742002111955305], [0.3304852565305185, 0.2933399092798594, 0.16243765415781874, 0.3038162221963119, 0.1695090883519046, 0.15743586644638086, 0.36402286264920525, 0.2526999023052592, 0.21022677186699124, 0.20240731646508792], [0.3478409934114777, 0.30399881617303137, 0.347881151053675, 0.31193863889502227, 0.2932960721038058, 0.32251430313228546, 0.313954549946057, 0.2615350795751694, 0.3361251312949767, 0.288468280848603], [0.3386866128185724, 0.2964480100864635, 0.26155726979605953, 0.28332108181530336, 0.2678387797705155, 0.2700952853250378, 0.279484486128168, 0.2804944466133965, 0.243037123169906, 0.2912797366804929], [0.2880409800914374, 0.29118053577564273, 0.33693930000090067, 0.22958809658547885, 0.33727633675268365, 0.2805495172638608, 0.304858729032099, 0.2892448809951227, 0.29552587048611256, 0.3292370472239048], [0.32775548138967503, 0.31425718300699446, 0.24790059432839273, 0.2366552268294897, 0.32818147645941353, 0.2758784884914749, 0.3779494859856598, 0.28888223437763294, 0.34906523444713233, 0.3280048978473422], [0.23004451162862605, 0.21256669279808182, 0.2615047567125375, 0.31530111145408357, 0.3488353177852912, 0.16539320030828675, 0.20230245025648186, 0.2685023841165659, 0.3080423028498189, 0.32826130795077546], [0.27932851499946665, 0.34055565584983505, 0.2854194791008853, 0.26873157515183355, 0.25852414709601, 0.27257119716953904, 0.3363603065145715, 0.240710007451296, 0.277288358664304, 0.22688512973478003], [0.22939687008862109, 0.327292457153864, 0.2858048023958042, 0.2604182021550767, 0.2604030494856242, 0.24245059530723, 0.29565758625285676, 0.3100045586168467, 0.2997954607336468, 0.2688174525633067], [0.2632571827687289, 0.3031139503487492, 0.25909751222037114, 0.2688027990179722, 0.2838640079703665, 0.30951455184911936, 0.28783292033038466, 0.27373466964831605, 0.2727771520413995, 0.25394811045436994], [0.23417828160064724, 0.36159936147285476, 0.236035815802766, 0.35148001560901365, 0.28568599601234457, 0.29885496082958296, 0.3030365004539366, 0.29030208818728953, 0.3194255247491524, 0.3243251434491583], [0.2591541584824415, 0.2857346578337543, 0.2616231845193404, 0.18885511756691775, 0.2370037945029777, 0.21704209373146766, 0.2490209883748138, 0.32747932522922785, 0.18422602059911242, 0.19661525405289915], [0.3217718553279796, 0.3143319118275283, 0.3098151355198606, 0.25498399156182616, 0.3023162192935591, 0.29418595422695626, 0.25066389979657666, 0.315659140722544, 0.29428801282405814, 0.2994800269980402], [0.2581693724158054, 0.232280830135128, 0.2776643458084518, 0.25843821295086755, 0.284017826782367, 0.28393291262639053, 0.2861550031557383, 0.28662479661184737, 0.22633077053253814, 0.27143975654101116], [0.27041345800904537, 0.23205479624731185, 0.30535600465467416, 0.2539182536997675, 0.26294555488787985, 0.26197272473046285, 0.26817959162736793, 0.22413186667914164, 0.2623714081446966, 0.2758184419268592], [0.2424569659285658, 0.2567297549917713, 0.3047590487450682, 0.27615039381319706, 0.24206384295969485, 0.31360017629385384, 0.25662107256191513, 0.23151370224636825, 0.26233500389073594, 0.253907363867679], [0.1898548712443331, 0.2339971394043343, 0.2721928447561113, 0.17690189036079174, 0.2094814898087094, 0.1461518894715108, 0.17634079850915274, 0.35994889694282195, 0.1469471720089226, 0.29439815683747783], [0.2480830295844676, 0.29863841455989704, 0.27479153617842655, 0.2824330878998853, 0.282497656527243, 0.29705328098180006, 0.3064033483675619, 0.31699269891982595, 0.3133056814544677, 0.262406124875449], [0.2661975275116988, 0.26759757063087397, 0.2770630499914142, 0.28831794920392806, 0.2591396206098646, 0.25048103419327017, 0.263353939648018, 0.29198337570208865, 0.27075077561090444, 0.3041421449129298], [0.35207725970107084, 0.2682384188355851, 0.3136219382534362, 0.2750455760149375, 0.25632244802921234, 0.31854450537345613, 0.34141142918091427, 0.29108289687970323, 0.2917093291352191, 0.3329358855924549], [0.29788669242470256, 0.3287268815052049, 0.4340278308105372, 0.2979663174331093, 0.37649779754212176, 0.23770441070384507, 0.298650389227725, 0.2825573855153025, 0.2685451513908803, 0.39754831388576184], [0.41611528609876514, 0.1589806424261866, 0.34663092302859244, 0.3915337748680865, 0.420466690592193, 0.38679446963714126, 0.2854030287097298, 0.27161210099923316, 0.2579309996733419, 0.3536960663184763], [0.3106619350193647, 0.2801711747757456, 0.3124705992230319, 0.34119350581915775, 0.3050581919411339, 0.3081896778397022, 0.27355051546433895, 0.3049764632851151, 0.2410379828358784, 0.31118242798656137], [0.29724260359351096, 0.22709050379092988, 0.2982333934705941, 0.2704104842227557, 0.2615748682444661, 0.26504601395385974, 0.24893161631278282, 0.237961526696437, 0.2380057705426024, 0.2576049823007649], [0.2863053863118963, 0.2580337760982325, 0.24555772080858507, 0.3063871176978772, 0.3067674262444804, 0.26489384906093516, 0.23661658758042892, 0.3274564971033205, 0.29312039911825627, 0.29690406945980374], [0.43634790306523374, 0.5235049656950985, 0.30539931734799985, 0.41193248725199494, 0.3499281986983136, 0.32828342636927843, 0.43455475632245966, 0.4024863851675273, 0.2744340410458719, 0.41994471765755126], [0.35795390579455866, 0.39860212011958085, 0.3785831020170307, 0.38486394193642637, 0.29519578685277237, 0.2731071170189714, 0.3687821220262055, 0.365334569060201, 0.28403353117768937, 0.2576611977724994], [0.2886738082826086, 0.32742782283754623, 0.3362035956634428, 0.287555697790868, 0.29927410736848303, 0.2939378370070673, 0.28916516556585137, 0.3068179199816208, 0.3022406765742698, 0.30505388200730543], [0.25949098941984117, 0.29213475169324177, 0.2589182280783606, 0.27855724138805504, 0.32438607749739656, 0.24604499843533523, 0.41035722164945465, 0.2780484352337278, 0.24797346299030876, 0.30581156043427393], [0.30677037378758953, 0.26226289327291186, 0.27563683839951336, 0.2750762637873021, 0.23412658065591652, 0.26051908967255066, 0.33519183321715484, 0.24943921446614503, 0.3007039865609986, 0.27031636642888346], [0.26109121011074876, 0.28711489687145164, 0.4046370837437778, 0.3615236804337889, 0.386714477233542, 0.27298857586942216, 0.2284743399143947, 0.40112492512788434, 0.23856266359844813, 0.3127498272674383], [0.351593815699637, 0.39986338925413856, 0.3909540026826752, 0.2676351602213094, 0.3453759861729919, 0.24871847665827262, 0.19108379857684143, 0.3603984338436832, 0.22038530694572556, 0.35180020294249736], [0.26098582996004094, 0.3625052461239662, 0.26738846590025256, 0.25109918759343186, 0.31759981210275345, 0.3219802664615723, 0.2674181509362037, 0.3158584858336071, 0.2629765895802674, 0.2853183218615256], [0.2750432065614601, 0.2270305297894506, 0.248332487919114, 0.29974419842185096, 0.3902116783453611, 0.2933055363345156, 0.2751199682853622, 0.22327147684821957, 0.2567955587491273, 0.24597260682732758], [0.26072138454412563, 0.24654483228206914, 0.26506275313036465, 0.30206771257109644, 0.32049369158331587, 0.31905614279492944, 0.263968314869119, 0.23651876190432652, 0.2652534079165836, 0.23382504739780874], [0.23947940423781855, 0.28306544147997226, 0.3611863613069368, 0.43870315605446253, 0.22549325468051684, 0.36812753921578745, 0.3923070022361572, 0.4348198164138801, 0.3520973626188062, 0.31095516230578646], [0.28535274596796745, 0.38465660688185555, 0.1333397834931458, 0.32920612461571475, 0.23492716867025276, 0.27849112799736586, 0.4014452660050396, 0.32585870081249535, 0.265787436260295, 0.2669602101084947], [0.27181064114008713, 0.2595613724837813, 0.2406221105059303, 0.2964092099721345, 0.2572447434336733, 0.3553096218445515, 0.37416221924459103, 0.2801038390134707, 0.36470049017163664, 0.29975660394247194], [0.24902958380501294, 0.2213085719962833, 0.2211012726759285, 0.21314613716900466, 0.24764574788417226, 0.2094241093969691, 0.20904724229455818, 0.24304089288502562, 0.23421374899254976, 0.2624086856577761], [0.32539993252789934, 0.36412162329080644, 0.28731281902128547, 0.32216065781279335, 0.3002204236418291, 0.264922885456663, 0.3018997936757919, 0.2813527917323242, 0.316012055671854, 0.2894436459876566], [0.341047209408027, 0.32162597420019523, 0.4568612225691262, 0.3057616101873242, 0.3652316492019496, 0.2789339795529786, 0.31964560952710164, 0.34182972757208674, 0.3884863811973869, 0.32265693131192297], [0.31968529264844125, 0.407510017407013, 0.2539838774245391, 0.20657363173714094, 0.2512642666558742, 0.32039208022783416, 0.19100475327477007, 0.21764636907461155, 0.20775324896524028, 0.2186965712634552], [0.32109841443144216, 0.32139338261828776, 0.35568326237685577, 0.32511409142489045, 0.3128734154202788, 0.3150941233601019, 0.3292923205700924, 0.36966447025224314, 0.3335181275205503, 0.3346677361727117], [0.29297977270502606, 0.27470036238135354, 0.29372015512000527, 0.2585154043038136, 0.2921608280211476, 0.3439867046767522, 0.32766621669936, 0.26504013630639633, 0.2968752618959485, 0.291320195301501], [0.3590323581777217, 0.3078918913440538, 0.2820316032240604, 0.3147866455148782, 0.27772963574361365, 0.29737303603093723, 0.3305362660976221, 0.2842629551818341, 0.30999995931015745, 0.3291547561169117], [0.30328989918727833, 0.2727258195082376, 0.29966366165466685, 0.37529828770541673, 0.3126191067806645, 0.25690870784137765, 0.34977071676996463, 0.382868594053448, 0.3581402097193265, 0.3553055687308757], [0.21909451644895883, 0.2250747808727076, 0.1925746451734125, 0.24816388187817306, 0.3351299991537511, 0.35018708028397816, 0.17515519231125998, 0.334531252734922, 0.1789333809377185, 0.21195688203065366], [0.2684848995093767, 0.32045959945045244, 0.2938656607844008, 0.35519054530590655, 0.2976616491901387, 0.32525022469073894, 0.324669359200636, 0.3388271391371753, 0.34267692225293755, 0.3465957942904767], [0.30797989299812745, 0.27336575013940934, 0.33329202427918503, 0.32525269246721766, 0.30921620374374514, 0.31472652420547176, 0.27765863062509455, 0.33970414989951436, 0.2956647568480397, 0.26669392581376883], [0.29931492956728123, 0.2829739942554683, 0.2544076144355305, 0.23967742583437834, 0.27310480809025783, 0.2596786263253228, 0.3217895581234522, 0.27910151020414187, 0.27401480678250856, 0.29752790716778277], [0.2678091075887137, 0.31300400776966963, 0.4076924654780023, 0.3189371168983297, 0.2864788933325846, 0.31822466472970046, 0.29509038741543403, 0.3594754979574102, 0.33221580233373116, 0.2732157728179949], [0.19728458017950246, 0.21740115525399784, 0.19907773600581935, 0.3005516845434091, 0.16440046676045927, 0.2717216588358755, 0.18124990255894247, 0.20706233040633704, 0.21418696014097627, 0.2738017982385341], [0.3156210291390953, 0.29732911497465064, 0.2919751925112064, 0.2738223258643142, 0.3179268412751801, 0.2772321346843345, 0.31607135392274843, 0.31042361392529516, 0.28536340214239386, 0.3046812987449581], [0.28854557780693346, 0.28838554544979145, 0.3008377093480301, 0.2754789365380299, 0.2572211165472784, 0.2932518824842347, 0.2786033868266502, 0.25159144625930097, 0.28186806814079013, 0.27835034795378677], [0.25801592929014694, 0.27226195636745354, 0.33955679510945336, 0.28254919131479594, 0.2695951232927456, 0.28696114584954513, 0.35891100096783823, 0.28534410215331674, 0.2830681210150061, 0.26488379929148387], [0.3306069125400013, 0.27007625492866305, 0.36084016381227757, 0.29264643703111526, 0.3407068946905305, 0.2918673240467258, 0.2969917395481003, 0.3863912053743799, 0.2675344183265582, 0.2879589650107386], [0.2089819149567571, 0.3481448028618406, 0.28884118366625566, 0.19953149984404117, 0.2518326320985338, 0.3321749554864062, 0.2551979830481148, 0.2143734445998815, 0.32449938528945754, 0.19202984033745585], [0.33636088790578267, 0.31627918611056405, 0.3334594412416605, 0.33653052627746227, 0.3077007837913137, 0.2975214412401277, 0.2913224483501833, 0.28800838793135686, 0.318345087834476, 0.3096110375273833], [0.3099716872772329, 0.2825857489224779, 0.2972159988165082, 0.25770358440561436, 0.30502113013401155, 0.2970829408870288, 0.2985565770883851, 0.31871313094013276, 0.2868919741777991, 0.2734252377005064]])
    '''
    # Get variance along different experiment dimensions
    resLen = resArr.shape[0]

    # Target draws; every 10 rows
    temp1 = np.arange(1, 13).tolist()[::2]
    temp2 = np.arange(1, 13).tolist()[1::2]
    inds1 = [10 * (j - 1) + i for j in temp1 for i in range(10)]
    inds2 = [10 * (j - 1) + i for j in temp2 for i in range(10)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varTarg1000 = np.var(grp1, ddof=1)  # 4.35x10^-3
    varTarg5000 = np.var(grp2, ddof=1)  # 3.70x10^-3
    meanTarg1000 = np.average(grp1)  # 0.274
    meanTarg5000 = np.average(grp2)  # 0.260
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grp1.flatten(), grp2.flatten())
    print(bartPval)  # 0.046
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grp1.flatten(), grp2.flatten())
    print(levenePval)  # 0.023
    # t test for means
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp2.flatten())
    print(ttestPval)  # 4.8x10^-5

    # Data draws; every 5 rows
    temp1 = np.arange(1, 25).tolist()[::2]
    temp2 = np.arange(1, 25).tolist()[1::2]
    inds1 = [5 * (j - 1) + i for j in temp1 for i in range(5)]
    inds2 = [5 * (j - 1) + i for j in temp2 for i in range(5)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varData500 = np.var(grp1, ddof=1)  # 4.11x10^-3
    varData1000 = np.var(grp2, ddof=1)  # 4.05x10^-3
    meanData500 = np.average(grp1)  # 0.268
    meanData1000 = np.average(grp2)  # 0.266
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grp1.flatten(), grp2.flatten())
    print(bartPval)  # 0.844
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grp1.flatten(), grp2.flatten())
    print(levenePval)  # 0.750
    # t test for means
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp2.flatten())
    print(ttestPval)  # 0.742

    # Bayes draws; groups of 40
    inds1 = [i for i in range(40)]
    inds2 = [i for i in range(40, 80)]
    inds3 = [i for i in range(80, 120)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    grp3 = resArr[inds3]
    varBayes1000 = np.var(grp1, ddof=1)  # 3.71x10^-3
    varBayes5000 = np.var(grp2, ddof=1)  # 3.02x10^-3
    varBayes10000 = np.var(grp3, ddof=1)  # 2.88x10^-3
    meanBayes1000 = np.average(grp1)  # 0.227
    meanBayes5000 = np.average(grp2)  # 0.276
    meanBayes10000 = np.average(grp3)  # 0.298
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grp1.flatten(), grp2.flatten())
    print(bartPval)  # 0.042
    _, bartPval = spstat.bartlett(grp1.flatten(), grp3.flatten())
    print(bartPval)  # 0.012
    _, bartPval = spstat.bartlett(grp2.flatten(), grp3.flatten())
    print(bartPval)  # 0.633
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grp1.flatten(), grp2.flatten())
    print(levenePval)  # 0.007
    _, levenePval = spstat.levene(grp1.flatten(), grp3.flatten())
    print(levenePval)  # 0.0007
    _, levenePval = spstat.levene(grp2.flatten(), grp3.flatten())
    print(levenePval)  # 0.487
    # t test for means
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp2.flatten())
    print(ttestPval)  # 1.30x10^-29
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp3.flatten())
    print(ttestPval)  # 3.60x10^-58
    _, ttestPval = spstat.ttest_ind(grp2.flatten(), grp3.flatten())
    print(ttestPval)  # 5.51x10^-9

    # Bayes neighbors amount; every 20 rows
    temp1 = np.arange(1, 6).tolist()[::2]
    temp2 = np.arange(1, 6).tolist()[1::2]
    inds1 = [20 * (j - 1) + i for j in temp1 for i in range(20)]
    inds2 = [20 * (j - 1) + i for j in temp2 for i in range(20)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varNeigh100 = np.var(grp1, ddof=1)  # 5.49x10^-3
    varNeigh1000 = np.var(grp2, ddof=1)  # 2.42x10^-3
    meanNeigh100 = np.average(grp1)  # 0.262
    meanNeigh1000 = np.average(grp2)  # 0.261
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grp1.flatten(), grp2.flatten())
    print(bartPval)  # 7.79x10^-18
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grp1.flatten(), grp2.flatten())
    print(levenePval)  # 2.44x10^-13
    # t test for means
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp2.flatten())
    print(ttestPval)  # 0.914

    # Now do comparisons against maximal factor set
    # Bayes draws
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(35, 40)
    inds2 = np.arange(75, 80)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]

    varTargMax = np.var(grpMax, ddof=1)  # 1.61x10^-3
    varTarg1000 = np.var(grp1, ddof=1)  # 1.87x10^-3
    varTarg5000 = np.var(grp2, ddof=1)  # 1.78x10^-3
    meanTargMax = np.average(grpMax)  # 0.294
    meanTarg1000 = np.average(grp1)  # 0.246
    meanTarg5000 = np.average(grp2)  # 0.262
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grpMax.flatten(), grp1.flatten())
    print(bartPval)  # 0.599
    _, bartPval = spstat.bartlett(grpMax.flatten(), grp2.flatten())
    print(bartPval)  # 0.732
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grpMax.flatten(), grp1.flatten())
    print(levenePval)  # 0.619
    _, levenePval = spstat.levene(grpMax.flatten(), grp2.flatten())
    print(levenePval)  # 0.972
    # t test for means
    _, ttestPval = spstat.ttest_ind(grpMax.flatten(), grp1.flatten())
    print(ttestPval)  # 1.17x10^-7
    _, ttestPval = spstat.ttest_ind(grpMax.flatten(), grp2.flatten())
    print(ttestPval)  # 1.56x10^-4

    # Bayes neighbors
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(95, 100)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]

    varNeighMax = np.var(grpMax, ddof=1)  # 1.61x10^-3
    varNeigh100 = np.var(grp1, ddof=1)  # 4.10x10^-3
    meanNeighMax = np.average(grpMax)  # 0.294
    meanNeigh100 = np.average(grp1)  # 0.287
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grpMax.flatten(), grp1.flatten())
    print(bartPval)  # 0.0013
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grpMax.flatten(), grp1.flatten())
    print(levenePval)  # 0.0102
    # t test for means
    _, ttestPval = spstat.ttest_ind(grpMax.flatten(), grp1.flatten())
    print(ttestPval)  # 0.492

    # Target draws
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(105, 110)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]

    varTargMax = np.var(grpMax, ddof=1)  # 1.61x10^-3
    varTarg1000 = np.var(grp1, ddof=1)  # 2.40x10^-3
    meanTargMax = np.average(grpMax)  # 0.294
    meanTarg1000 = np.average(grp1)  # 0.302
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grpMax.flatten(), grp1.flatten())
    print(bartPval)  # 0.168
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grpMax.flatten(), grp1.flatten())
    print(levenePval)  # 0.235
    # t test for means
    _, ttestPval = spstat.ttest_ind(grpMax.flatten(), grp1.flatten())
    print(ttestPval)  # 0.395

    # Data draws
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(110, 115)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]

    varDataMax = np.var(grpMax, ddof=1)  # 1.61x10^-3
    varData500 = np.var(grp1, ddof=1)  # 1.92x10^-3
    meanDataMax = np.average(grpMax)  # 0.294
    meanData500 = np.average(grp1)  # 0.279
    # Bartlett variance test
    _, bartPval = spstat.bartlett(grpMax.flatten(), grp1.flatten())
    print(bartPval)  # 0.547
    # Levene test (non-normal data)
    _, levenePval = spstat.levene(grpMax.flatten(), grp1.flatten())
    print(levenePval)  # 0.893
    # t test for means
    _, ttestPval = spstat.ttest_ind(grpMax.flatten(), grp1.flatten())
    print(ttestPval)  # 0.081

    '''
    # Form CIs for mean and variance
    alpha = 0.05  # significance level = 5%

    n = len(arr)  # sample sizes
    s2 = np.var(arr, ddof=1)  # sample variance
    df = n - 1  # degrees of freedom

    upper = (n - 1) * s2 / stats.chi2.ppf(alpha / 2, df)
    lower = (n - 1) * s2 / stats.chi2.ppf(1 - alpha / 2, df)
    '''

    ##########################
    # Set new parameter lists for new set of experiments (PART 2)
    bayesNumList = [10000, 15000]
    bayesNeighNumList = [1000, 2000]
    targNumList = [1000, 5000]
    dataNumList = [500, 2000]
    numReps = 10
    numchains = 5

    # Iterate through each chain 10 times
    resArr = np.zeros(
        (len(bayesNumList) * len(bayesNeighNumList) * len(targNumList) * len(dataNumList) * numchains, numReps))
    resInd = -1
    iterStr = ['' for i in range(resArr.shape[0])]
    for bayesNumInd, bayesNum in enumerate(bayesNumList):
        for bayesNeighNumInd, bayesNeighNum in enumerate(bayesNeighNumList):
            for targNumInd, targNum in enumerate(targNumList):
                for dataNumInd, dataNum in enumerate(dataNumList):
                    for m in range(numchains):
                        resInd += 1
                        iterName = str(bayesNum) + ', ' + str(bayesNeighNum) + ', ' + str(targNum) + ', ' + str(
                            dataNum) + ', ' + str(m)
                        print(iterName)
                        iterStr[resInd] = str(bayesNum) + '\n' + str(bayesNeighNum) + '\n' + str(targNum) + '\n' + str(
                            dataNum) + '\n' + str(m)
                        for rep in range(numReps):
                            dictTemp = CSdict3.copy()
                            dictTemp.update({'postSamples': chainArr[m][choice(np.arange(numdraws), size=targNum,
                                                                               replace=False)],
                                             'numPostSamples': targNum})
                            # Bayes draws
                            setDraws = chainArr[m][choice(np.arange(numdraws), size=bayesNum, replace=False)]
                            lossDict.update({'bayesEstNeighborNum': bayesNeighNum})
                            lossDict.update({'bayesDraws': setDraws})
                            print('Generating loss matrix...')
                            tempLossMat = lf.lossMatSetBayesDraws(dictTemp['postSamples'], lossDict.copy(),
                                                                  lossDict['bayesDraws'])
                            tempLossDict = lossDict.copy()
                            tempLossDict.update({'lossMat': tempLossMat})
                            newBayesDraws, newLossMat = lf.add_cand_neighbors(tempLossDict.copy(), chainArr[m],
                                                                              dictTemp['postSamples'])
                            tempLossDict.update({'bayesDraws': newBayesDraws, 'lossMat': newLossMat})
                            baseLoss = (np.sum(newLossMat, axis=1) / newLossMat.shape[1]).min()
                            utilDict.update({'dataDraws': setDraws[
                                choice(np.arange(len(setDraws)), size=dataNum, replace=False)]})
                            currCompUtil = baseLoss - \
                                           sampf.sampling_plan_loss(priordatadict=dictTemp, lossdict=tempLossDict,
                                                                    designlist=[des], numtests=sampBudget,
                                                                    utildict=utilDict)[0]
                            resArr[resInd, rep] = currCompUtil
                    for j in range(4):
                        lo, hi = 20 * j, 20 * j + 20
                        plt.boxplot(resArr[lo:hi, :].T)
                        plt.xticks(np.arange(hi - lo), iterStr[lo:hi], fontsize=6)
                        plt.subplots_adjust(bottom=0.15)
                        plt.ylim([0, 0.5])
                        plt.title('Inspection of Variance\n$|\Gamma_{Bayes}|$, $|\Gamma_{BayesNeigh}|$,'
                                  '$|\Gamma_{targ}|$, $|\Gamma_{data}|$, Chain Index')
                        plt.show()
                        plt.close()
    '''22-APR
    resArr = np.array([[0.27597401, 0.29988675, 0.30104938, 0.32304572, 0.28754081,
        0.30899874, 0.36598276, 0.30588716, 0.32687921, 0.31461262],
       [0.30394838, 0.30776385, 0.35317957, 0.37115511, 0.30540667,
        0.29961918, 0.31988304, 0.33948857, 0.3434651 , 0.28316895],
       [0.3968782 , 0.23065553, 0.20307554, 0.34674985, 0.31970884,
        0.30927183, 0.37896378, 0.22700724, 0.35593151, 0.23143222],
       [0.344063  , 0.3376288 , 0.3080869 , 0.35500965, 0.27386548,
        0.32556244, 0.28241506, 0.32806847, 0.3632143 , 0.33143567],
       [0.2886603 , 0.3174955 , 0.30768571, 0.33875895, 0.32475755,
        0.28315483, 0.31396854, 0.30894357, 0.35311935, 0.31152978],
       [0.33255513, 0.28070121, 0.309488  , 0.30038082, 0.27427409,
        0.32460188, 0.28229887, 0.27802926, 0.27637678, 0.33246518],
       [0.32581346, 0.3048616 , 0.34040124, 0.35116779, 0.3410094 ,
        0.28393519, 0.30415774, 0.28561415, 0.27822089, 0.40345423],
       [0.27478713, 0.18485624, 0.30301957, 0.36162621, 0.17181541,
        0.32749743, 0.34248156, 0.22804031, 0.36238694, 0.30185755],
       [0.35602135, 0.33869381, 0.36134128, 0.34870038, 0.33623937,
        0.31170478, 0.32546392, 0.32172619, 0.31526609, 0.31926501],
       [0.27010201, 0.31724659, 0.26119398, 0.2887594 , 0.32290632,
        0.30897668, 0.31530684, 0.29440611, 0.29958302, 0.2766982 ],
       [0.28502553, 0.28869483, 0.27046135, 0.27704691, 0.29044713,
        0.29822921, 0.29878234, 0.28113889, 0.26644756, 0.2649549 ],
       [0.33511915, 0.29460945, 0.29267883, 0.31440559, 0.3057024 ,
        0.27399106, 0.2807178 , 0.27493034, 0.41084704, 0.30513875],
       [0.33364718, 0.39136444, 0.19024355, 0.19455823, 0.36120272,
        0.30154218, 0.19628844, 0.18839294, 0.19045461, 0.27415902],
       [0.3112707 , 0.27692498, 0.27612938, 0.31214909, 0.2724307 ,
        0.3232397 , 0.28008074, 0.28479596, 0.30668176, 0.32338417],
       [0.28722452, 0.28208295, 0.33170525, 0.27173091, 0.28714747,
        0.2717415 , 0.28247114, 0.35214773, 0.27531396, 0.30954698],
       [0.28505925, 0.23744546, 0.28078685, 0.28852394, 0.32720302,
        0.28449659, 0.28657384, 0.25196582, 0.26409925, 0.26209694],
       [0.27538695, 0.29802713, 0.29924548, 0.27527414, 0.37205293,
        0.31613149, 0.313683  , 0.33365892, 0.30936946, 0.27413129],
       [0.29859219, 0.20081194, 0.19579545, 0.19655723, 0.28523956,
        0.17443124, 0.30929741, 0.20172396, 0.38849737, 0.33484309],
       [0.30758719, 0.28633595, 0.31471785, 0.30792798, 0.31697122,
        0.32209431, 0.3275952 , 0.31071383, 0.30147179, 0.30648198],
       [0.29452929, 0.26432216, 0.27801327, 0.29148763, 0.30228555,
        0.2862107 , 0.30122005, 0.27032963, 0.25975357, 0.28131405],
       [0.29186043, 0.31115992, 0.32949638, 0.3128932 , 0.34687085,
        0.32338138, 0.34168743, 0.33763609, 0.30560104, 0.27289443],
       [0.2641409 , 0.27240661, 0.37668345, 0.28794136, 0.34351839,
        0.30378014, 0.29872768, 0.32543505, 0.34410838, 0.34859564],
       [0.22899349, 0.34535897, 0.2092266 , 0.3251166 , 0.27742811,
        0.21872507, 0.34980352, 0.21998863, 0.32766387, 0.44472524],
       [0.30889688, 0.329799  , 0.35577448, 0.31324884, 0.28027963,
        0.32027111, 0.32440108, 0.35488938, 0.3459005 , 0.32497622],
       [0.35972648, 0.32350182, 0.30910376, 0.34412174, 0.33370081,
        0.34196899, 0.4157059 , 0.33848754, 0.36271978, 0.31930333],
       [0.32795483, 0.33652446, 0.30532009, 0.381963  , 0.33817567,
        0.30865661, 0.29624257, 0.30987589, 0.27561867, 0.31659691],
       [0.29670805, 0.35693328, 0.35076361, 0.34170693, 0.31728447,
        0.35025515, 0.28495422, 0.311795  , 0.34194338, 0.29704819],
       [0.19374414, 0.34494005, 0.33064966, 0.18895247, 0.25586035,
        0.24170666, 0.23327591, 0.22502701, 0.24600841, 0.24390733],
       [0.33527459, 0.31853113, 0.35523281, 0.35814034, 0.34086498,
        0.32677587, 0.34471101, 0.35096666, 0.34418165, 0.34565148],
       [0.33036952, 0.32947361, 0.32556825, 0.34693042, 0.33786042,
        0.30748901, 0.33662878, 0.28250083, 0.3152444 , 0.33495651],
       [0.30538819, 0.2969716 , 0.29841624, 0.25914698, 0.29096144,
        0.27381714, 0.31062141, 0.31972892, 0.3648432 , 0.27868679],
       [0.30566429, 0.2839846 , 0.30076283, 0.29828198, 0.32418972,
        0.28330744, 0.2703093 , 0.30207062, 0.35202722, 0.40792719],
       [0.24594494, 0.23066234, 0.15223295, 0.33474344, 0.34855582,
        0.23000266, 0.17892615, 0.2944293 , 0.33335578, 0.18822681],
       [0.32409799, 0.34414703, 0.31700796, 0.31898464, 0.35611338,
        0.31215233, 0.29876023, 0.34335044, 0.30330297, 0.30271088],
       [0.29923219, 0.35074488, 0.30000792, 0.31731633, 0.32979308,
        0.27311594, 0.28831082, 0.34917042, 0.32239028, 0.30016481],
       [0.31539954, 0.3103449 , 0.31387417, 0.30628343, 0.29285432,
        0.31369491, 0.3165334 , 0.28371692, 0.30032045, 0.35730786],
       [0.30765067, 0.29917518, 0.27820702, 0.33270822, 0.29582716,
        0.33781061, 0.27043243, 0.33478757, 0.31307516, 0.33567529],
       [0.33142464, 0.22860046, 0.2035032 , 0.21398127, 0.19489734,
        0.34309815, 0.23214545, 0.24262933, 0.30142566, 0.22186491],
       [0.33985896, 0.30810392, 0.30887206, 0.35344262, 0.32560253,
        0.33294838, 0.3450445 , 0.34901714, 0.33753679, 0.34862387],
       [0.35340422, 0.29685698, 0.26998555, 0.27973781, 0.25424301,
        0.3127374 , 0.29082191, 0.31512495, 0.30169863, 0.32110062],
       [0.34927641, 0.3735124 , 0.32372125, 0.31099356, 0.30020711,
        0.31464216, 0.25688524, 0.28510367, 0.30629913, 0.28796143],
       [0.37685604, 0.28437484, 0.34169293, 0.32890124, 0.2994338 ,
        0.32897442, 0.33041644, 0.33513027, 0.36107515, 0.25404872],
       [0.23705211, 0.23626646, 0.31371858, 0.35280343, 0.20890118,
        0.22681174, 0.21441503, 0.44297122, 0.35595195, 0.37939911],
       [0.38197318, 0.30846354, 0.34382321, 0.3342251 , 0.35028191,
        0.36983588, 0.33536754, 0.33221748, 0.34758265, 0.33864964],
       [0.38039067, 0.3026821 , 0.34543465, 0.30342327, 0.3272775 ,
        0.28832572, 0.39395401, 0.31568795, 0.30530637, 0.28145865],
       [0.30847548, 0.32466222, 0.29821698, 0.273489  , 0.38176391,
        0.33213213, 0.30954643, 0.32270349, 0.35745358, 0.33370123],
       [0.3079301 , 0.33102   , 0.33865062, 0.30618993, 0.31392291,
        0.38554554, 0.3213965 , 0.40813405, 0.36988721, 0.38415795],
       [0.2225715 , 0.21744545, 0.33890715, 0.20701091, 0.25025408,
        0.23545868, 0.26241781, 0.26816585, 0.37969687, 0.32116507],
       [0.34938355, 0.34870455, 0.33792003, 0.35983152, 0.31242364,
        0.3414859 , 0.3046545 , 0.38120305, 0.30459257, 0.35019322],
       [0.31259209, 0.3081198 , 0.29248472, 0.33212056, 0.31373884,
        0.32228437, 0.31898186, 0.31421701, 0.3356243 , 0.34217186],
       [0.27887546, 0.29124443, 0.26202007, 0.32718898, 0.2691889 ,
        0.28014468, 0.28948109, 0.26998768, 0.32625016, 0.29210264],
       [0.23941321, 0.29379704, 0.33391712, 0.30502989, 0.33167109,
        0.32178508, 0.415437  , 0.29762602, 0.29786391, 0.29075178],
       [0.31773825, 0.21563429, 0.21463498, 0.20534175, 0.22294093,
        0.36713728, 0.29885398, 0.19907902, 0.17740641, 0.18992399],
       [0.2964544 , 0.26990329, 0.30728956, 0.31975124, 0.32987084,
        0.29794371, 0.34552539, 0.29684399, 0.30991019, 0.31503308],
       [0.25906207, 0.29419014, 0.29220882, 0.28903653, 0.29434702,
        0.26271462, 0.31336007, 0.36730109, 0.28805526, 0.26371233],
       [0.2934554 , 0.30607461, 0.31774399, 0.28049999, 0.26808554,
        0.26400951, 0.27932914, 0.26768126, 0.30132073, 0.28894346],
       [0.45867504, 0.36568562, 0.3246563 , 0.32988945, 0.29655516,
        0.3282639 , 0.32431653, 0.35478675, 0.26885814, 0.32735131],
       [0.24474075, 0.18959339, 0.21485083, 0.22577744, 0.31295384,
        0.34675789, 0.32742414, 0.20139459, 0.21893201, 0.19302733],
       [0.35695645, 0.31365503, 0.3311796 , 0.31654479, 0.33313616,
        0.30527364, 0.32135945, 0.31827691, 0.32364088, 0.28672454],
       [0.29822604, 0.29349868, 0.31220522, 0.3006019 , 0.30054556,
        0.27448303, 0.29025189, 0.28701033, 0.27942957, 0.28848171],
       [0.32052861, 0.3114543 , 0.33499252, 0.32189797, 0.30789329,
        0.30752451, 0.28868449, 0.3641609 , 0.31219053, 0.3103846 ],
       [0.33020104, 0.36023303, 0.33085061, 0.3134343 , 0.39593376,
        0.32249614, 0.31285717, 0.33945568, 0.38582121, 0.28723797],
       [0.36368908, 0.27750968, 0.35618369, 0.26895882, 0.22825962,
        0.2112121 , 0.33223864, 0.26717602, 0.25714482, 0.3656594 ],
       [0.36540989, 0.35687114, 0.39176875, 0.38969862, 0.30615773,
        0.3369973 , 0.35332973, 0.35602624, 0.30550046, 0.37735837],
       [0.3791351 , 0.36750667, 0.34177008, 0.31835564, 0.421749  ,
        0.30832525, 0.37654064, 0.35451154, 0.32591876, 0.36907831],
       [0.30738113, 0.29614758, 0.33350159, 0.30665128, 0.32288939,
        0.33937634, 0.30868661, 0.31307908, 0.2846633 , 0.35097549],
       [0.4218525 , 0.33925799, 0.3771681 , 0.31716345, 0.32996881,
        0.32510837, 0.32086682, 0.39453237, 0.34486583, 0.31733519],
       [0.24940838, 0.25980674, 0.28298877, 0.26221678, 0.28276203,
        0.25183679, 0.26808985, 0.25929537, 0.26347733, 0.37044857],
       [0.37940595, 0.35952675, 0.36695347, 0.37668385, 0.32529917,
        0.36696027, 0.35396661, 0.34382545, 0.38916263, 0.33848599],
       [0.32781202, 0.36948748, 0.42150062, 0.41688437, 0.32737777,
        0.3414123 , 0.34060444, 0.31864944, 0.31764213, 0.32704243],
       [0.30863178, 0.28773624, 0.30156804, 0.29902303, 0.28644097,
        0.3118128 , 0.25921496, 0.29769457, 0.3075027 , 0.27663708],
       [0.29158127, 0.31249646, 0.31680965, 0.3473655 , 0.28856199,
        0.32273494, 0.29323787, 0.32241511, 0.29976037, 0.24617994],
       [0.3379009 , 0.31670624, 0.33453265, 0.34981356, 0.36933908,
        0.23902946, 0.21478655, 0.2119762 , 0.22432865, 0.20943269],
       [0.31584773, 0.31806662, 0.31995323, 0.31890042, 0.35425137,
        0.3488193 , 0.34123605, 0.33773845, 0.33663259, 0.32250903],
       [0.30589063, 0.3273981 , 0.33661005, 0.310657  , 0.30162745,
        0.3357336 , 0.38640263, 0.31049895, 0.31846543, 0.30010173],
       [0.31739976, 0.31619723, 0.30311884, 0.30581673, 0.30025978,
        0.31806078, 0.28035233, 0.28955718, 0.28093968, 0.30091907],
       [0.29974377, 0.37186595, 0.33147383, 0.34564877, 0.28478455,
        0.3350422 , 0.2971473 , 0.3067706 , 0.31244294, 0.31820973],
       [0.24297701, 0.23391579, 0.23714524, 0.23214727, 0.18658462,
        0.19688204, 0.24252821, 0.22220898, 0.32570754, 0.26471585],
       [0.32801805, 0.33445801, 0.32739206, 0.32443805, 0.3376865 ,
        0.34005359, 0.34239803, 0.32036799, 0.33448276, 0.33216571],
       [0.30873846, 0.30091163, 0.32356041, 0.31898997, 0.29131507,
        0.29828764, 0.33042471, 0.31100733, 0.34261162, 0.32712988]])
        '''
    # Get statistics
    # Get variance along different experiment dimensions
    resLen = resArr.shape[0]

    # Bayes draws; groups of 40
    inds1 = [i for i in range(40)]
    inds2 = [i for i in range(40, resLen)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varBayes10 = np.var(grp1, ddof=1)  # 1.92x10^-3
    varBayes15 = np.var(grp2, ddof=1)  # 2.11x10^-3
    meanBayes10 = np.average(grp1)  # 0.304
    meanBayes15 = np.average(grp2)  # 0.312

    # Bayes neighbors amount; every 20 rows
    temp1 = np.arange(1, 5).tolist()[::2]
    temp2 = np.arange(1, 5).tolist()[1::2]
    inds1 = [20 * (j - 1) + i for j in temp1 for i in range(20)]
    inds2 = [20 * (j - 1) + i for j in temp2 for i in range(20)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varNeigh1 = np.var(grp1, ddof=1)  # 2.08x10^-3
    varNeigh2 = np.var(grp2, ddof=1)  # 1.93x10^-3
    meanNeigh1 = np.average(grp1)  # 0.303
    meanNeigh2 = np.average(grp2)  # 0.313

    # Target draws; every 10 rows
    temp1 = np.arange(1, 9).tolist()[::2]
    temp2 = np.arange(1, 9).tolist()[1::2]
    inds1 = [10 * (j - 1) + i for j in temp1 for i in range(10)]
    inds2 = [10 * (j - 1) + i for j in temp2 for i in range(10)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varTarg1000 = np.var(grp1, ddof=1)  # 1.91x10^-3
    varTarg5000 = np.var(grp2, ddof=1)  # 1.89x10^-3
    meanTarg1000 = np.average(grp1)  # 0.319
    meanTarg5000 = np.average(grp2)  # 0.296

    # Data draws; every 5 rows
    temp1 = np.arange(1, 17).tolist()[::2]
    temp2 = np.arange(1, 17).tolist()[1::2]
    inds1 = [5 * (j - 1) + i for j in temp1 for i in range(5)]
    inds2 = [5 * (j - 1) + i for j in temp2 for i in range(5)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varData500 = np.var(grp1, ddof=1)  # 2.10x10^-3
    varData2000 = np.var(grp2, ddof=1)  # 1.96x10^-3
    meanData500 = np.average(grp1)  # 0.309
    meanData2000 = np.average(grp2)  # 0.307

    # Now do comparisons against maximal factor set
    # Bayes draws
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(35, 40)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]

    varBayesMax = np.var(grpMax, ddof=1)  # 1.60x10^-3
    varBayes10000 = np.var(grp1, ddof=1)  # 1.68x10^-3
    meanBayesMax = np.average(grpMax)  # 0.302
    meanBayes10000 = np.average(grp1)  # 0.301

    # Neighbors
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(55, 60)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]

    varNeighMax = np.var(grpMax, ddof=1)  # 1.60x10^-3
    varNeigh1000 = np.var(grp1, ddof=1)  # 2.23x10^-3
    meanNeighMax = np.average(grpMax)  # 0.302
    meanNeigh1000 = np.average(grp1)  # 0.297

    # Target draws
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(65, 70)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]

    varTargMax = np.var(grpMax, ddof=1)  # 1.60x10^-3
    varTarg1000 = np.var(grp1, ddof=1)  # 1.90x10^-3
    meanTargMax = np.average(grpMax)  # 0.302
    meanTarg1000 = np.average(grp1)  # 0.330

    # Data draws
    maxFactInds = np.arange(resLen - 5, resLen)
    inds1 = np.arange(70, 75)
    grpMax = resArr[maxFactInds]
    grp1 = resArr[inds1]

    varDataMax = np.var(grpMax, ddof=1)  # 1.60x10^-3
    varData500 = np.var(grp1, ddof=1)  # 1.50x10^-3
    meanDataMax = np.average(grpMax)  # 0.302
    meanData500 = np.average(grp1)  # 0.306

    # Look at runs that differ by one factor from maximal set of first batch of runs
    # increase Bayes to 15k

    ############
    # Now add ability to get Bayes neighbors from multiple MCMC chains (PART 3)
    bayesNumList = [10000, 15000]
    bayesNeighNumList = [2000, 4000]
    targNum = 5000
    dataNum = 2000
    numNeighChainList = [1, 2, 3, 4]

    numReps = 10
    numchains = 5

    # Iterate through each chain 10 times
    resArr = np.zeros(
        (len(bayesNumList) * len(bayesNeighNumList) * len(numNeighChainList) * numchains, numReps))
    resInd = -1
    iterStr = ['' for i in range(resArr.shape[0])]
    for bayesNumInd, bayesNum in enumerate(bayesNumList):
        for bayesNeighNumInd, bayesNeighNum in enumerate(bayesNeighNumList):
            for numNeighChainInd, numNeighChain in enumerate(numNeighChainList):
                for m in range(numchains):
                    resInd += 1
                    iterName = str(bayesNum) + ', ' + str(bayesNeighNum) + ', ' + str(numNeighChain) + ', ' + str(m)
                    print(iterName)
                    iterStr[resInd] = str(bayesNum) + '\n' + str(bayesNeighNum) + '\n' + str(
                        numNeighChain) + '\n' + str(m)
                    for rep in range(numReps):
                        dictTemp = CSdict3.copy()
                        dictTemp.update({'postSamples': chainArr[m][choice(np.arange(numdraws), size=targNum,
                                                                           replace=False)], 'numPostSamples': targNum})
                        # Bayes draws
                        setDraws = chainArr[m][choice(np.arange(numdraws), size=bayesNum, replace=False)]
                        lossDict.update({'bayesEstNeighborNum': bayesNeighNum})
                        lossDict.update({'bayesDraws': setDraws})
                        print('Generating loss matrix...')
                        tempLossMat = lf.lossMatSetBayesDraws(dictTemp['postSamples'], lossDict.copy(),
                                                              lossDict['bayesDraws'])
                        tempLossDict = lossDict.copy()
                        tempLossDict.update({'lossMat': tempLossMat})
                        # Compile array for Bayes neighbors from random choice of chains
                        tempChainArr = chainArr[choice(np.arange(M), size=numNeighChain, replace=False).tolist()]
                        for jj in range(numNeighChain):
                            if jj == 0:
                                concChainArr = tempChainArr[0]
                            else:
                                concChainArr = np.vstack((concChainArr, tempChainArr[jj]))
                        newBayesDraws, newLossMat = lf.add_cand_neighbors(tempLossDict.copy(), concChainArr,
                                                                          dictTemp['postSamples'])
                        tempLossDict.update({'bayesDraws': newBayesDraws, 'lossMat': newLossMat})
                        baseLoss = (np.sum(newLossMat, axis=1) / newLossMat.shape[1]).min()
                        utilDict.update({'dataDraws': setDraws[
                            choice(np.arange(len(setDraws)), size=dataNum, replace=False)]})
                        currCompUtil = baseLoss - \
                                       sampf.sampling_plan_loss(priordatadict=dictTemp, lossdict=tempLossDict,
                                                                designlist=[des], numtests=sampBudget,
                                                                utildict=utilDict)[0]
                        resArr[resInd, rep] = currCompUtil
                for j in range(4):
                    lo, hi = 20 * j, 20 * j + 20
                    plt.boxplot(resArr[lo:hi, :].T)
                    plt.xticks(np.arange(1, hi - lo + 1), iterStr[lo:hi], fontsize=6)
                    plt.subplots_adjust(bottom=0.15)
                    plt.ylim([0, 0.5])
                    plt.title(
                        'Inspection of Variance\n$|\Gamma_{Bayes}|$, $|\Gamma_{BayesNeigh}|$, Num. Neigh. Chains, Chain Index')
                    plt.show()
                    plt.close()
    '''
    resArr = np.array([[0.2779316 , 0.26541592, 0.31676747, 0.34404681, 0.27310724,
        0.32002819, 0.28829626, 0.27907366, 0.2568152 , 0.29456291],
       [0.27040397, 0.3325401 , 0.21295866, 0.34016116, 0.25207318,
        0.39235419, 0.26317679, 0.31035112, 0.2829846 , 0.37246079],
       [0.23307338, 0.23415674, 0.29152091, 0.27722856, 0.31733787,
        0.28987969, 0.26951077, 0.26859488, 0.28327954, 0.26110834],
       [0.24818325, 0.34452598, 0.36141818, 0.29215368, 0.23872844,
        0.28008976, 0.2205766 , 0.25088128, 0.26095836, 0.31917039],
       [0.3087232 , 0.29920395, 0.32102196, 0.32611175, 0.23819894,
        0.36110365, 0.31782448, 0.29745541, 0.27895236, 0.22896036],
       [0.26189522, 0.28188496, 0.2664223 , 0.34962971, 0.30267351,
        0.32877899, 0.30389138, 0.33858702, 0.23354725, 0.23979945],
       [0.27879595, 0.29557235, 0.23180437, 0.29106747, 0.26817005,
        0.21792099, 0.30130255, 0.28217315, 0.29665542, 0.29507827],
       [0.27872542, 0.25600857, 0.22273559, 0.31811245, 0.27438191,
        0.30034518, 0.33357768, 0.25133742, 0.30587216, 0.30007098],
       [0.21825488, 0.27768276, 0.23329567, 0.30783236, 0.28422985,
        0.23075016, 0.33035724, 0.31814168, 0.27202542, 0.26988235],
       [0.32303864, 0.27556618, 0.28171787, 0.2897807 , 0.2742801 ,
        0.2048776 , 0.3072947 , 0.25266103, 0.28353967, 0.29040171],
       [0.31198841, 0.32629004, 0.32852536, 0.2542687 , 0.31422283,
        0.30773554, 0.23425665, 0.29666634, 0.24806321, 0.31451789],
       [0.36943602, 0.32125313, 0.22204418, 0.30462185, 0.25506843,
        0.24463514, 0.32876897, 0.18489204, 0.25987833, 0.27100255],
       [0.21425395, 0.27330661, 0.30501526, 0.29158134, 0.23915231,
        0.29573366, 0.32116625, 0.32438952, 0.25156063, 0.31420658],
       [0.26246819, 0.29428913, 0.29083174, 0.24857258, 0.30535221,
        0.29839263, 0.30231425, 0.24628741, 0.26025152, 0.28140216],
       [0.31446202, 0.28776122, 0.28941856, 0.31758623, 0.34930964,
        0.28257726, 0.33384549, 0.3092367 , 0.32894624, 0.26909403],
       [0.27466592, 0.27096388, 0.32646685, 0.25165792, 0.36700191,
        0.26432288, 0.2044264 , 0.2912096 , 0.31372379, 0.23349041],
       [0.24968727, 0.2956716 , 0.28120221, 0.26817814, 0.28994181,
        0.28249429, 0.33338555, 0.2612378 , 0.31392062, 0.25234642],
       [0.32151936, 0.31080253, 0.31479003, 0.31237514, 0.2776966 ,
        0.29520132, 0.28217975, 0.33132215, 0.27699769, 0.30612875],
       [0.35984509, 0.27521474, 0.26379909, 0.31508846, 0.2822342 ,
        0.24422925, 0.28279049, 0.27480781, 0.30893576, 0.36500423],
       [0.31269018, 0.24806528, 0.23275791, 0.34581345, 0.28955276,
        0.28571031, 0.27077392, 0.24622637, 0.31327329, 0.29705535],
       [0.33242601, 0.29411735, 0.32298606, 0.34746646, 0.31970646,
        0.32059495, 0.2899927 , 0.32749465, 0.24598207, 0.24194686],
       [0.35417408, 0.3188854 , 0.33370053, 0.31839497, 0.34880323,
        0.32394403, 0.27153698, 0.36228941, 0.25390673, 0.2287884 ],
       [0.33571647, 0.33204058, 0.24651802, 0.28785459, 0.32296764,
        0.27878437, 0.27692359, 0.32608803, 0.24660379, 0.32343916],
       [0.28470447, 0.33681172, 0.30478429, 0.27309235, 0.34840353,
        0.29775149, 0.30730089, 0.30149181, 0.32858558, 0.26010766],
       [0.24266417, 0.33360331, 0.36504511, 0.32666799, 0.31315611,
        0.29846367, 0.35604681, 0.32740939, 0.293361  , 0.32452671],
       [0.30388137, 0.29507704, 0.26887967, 0.34576741, 0.28032486,
        0.23410846, 0.25382461, 0.28827141, 0.26633125, 0.24979835],
       [0.29407103, 0.26752219, 0.35335319, 0.18996564, 0.28715081,
        0.34036144, 0.32820155, 0.36267737, 0.35520678, 0.24035758],
       [0.28285683, 0.32781329, 0.27574204, 0.26898623, 0.27326675,
        0.29464628, 0.27044767, 0.31703778, 0.31671731, 0.31151417],
       [0.28730395, 0.29681805, 0.30738819, 0.35800613, 0.22105331,
        0.29008401, 0.25631921, 0.32397739, 0.28306379, 0.31995199],
       [0.33821072, 0.38625282, 0.24930536, 0.34060987, 0.26294842,
        0.26642912, 0.32425812, 0.32666028, 0.35361712, 0.29577693],
       [0.27587487, 0.29902263, 0.2393131 , 0.3000553 , 0.20712997,
        0.27313509, 0.25247638, 0.31708501, 0.29742274, 0.2805551 ],
       [0.33793287, 0.3017518 , 0.27958106, 0.35568117, 0.28582997,
        0.28823858, 0.32091967, 0.29053009, 0.3059439 , 0.29681792],
       [0.36630064, 0.36081767, 0.30061468, 0.29755828, 0.34490748,
        0.31020329, 0.3117825 , 0.27210216, 0.3396706 , 0.24034184],
       [0.35786458, 0.27200413, 0.32420261, 0.25015354, 0.30116948,
        0.31049742, 0.33035091, 0.30191585, 0.26585336, 0.34759901],
       [0.32744233, 0.31472791, 0.27648577, 0.39180368, 0.28761758,
        0.20372596, 0.31963961, 0.34078871, 0.30709172, 0.28721538],
       [0.33262464, 0.36432568, 0.27793084, 0.31654044, 0.30382557,
        0.27075228, 0.27025935, 0.27646558, 0.36902565, 0.30326201],
       [0.31356365, 0.32589318, 0.27529768, 0.29319969, 0.29361475,
        0.2466169 , 0.30525121, 0.27921645, 0.28810543, 0.34165771],
       [0.19083796, 0.31443223, 0.35623288, 0.33456236, 0.2686475 ,
        0.24327394, 0.29577046, 0.29082052, 0.33286471, 0.31393013],
       [0.33103601, 0.31369963, 0.33127369, 0.31268031, 0.32636101,
        0.27159015, 0.27202552, 0.30704561, 0.30242455, 0.28083667],
       [0.31039746, 0.32500195, 0.26681504, 0.30474752, 0.28905536,
        0.2645744 , 0.31978151, 0.29780327, 0.30616971, 0.30930443],
       [0.2322126 , 0.30715548, 0.31575387, 0.30437655, 0.36710143,
        0.28646843, 0.3409304 , 0.29114049, 0.25031544, 0.3286491 ],
       [0.33770432, 0.24788642, 0.39723824, 0.31097296, 0.3702148 ,
        0.20094084, 0.36185264, 0.34464555, 0.31331569, 0.33379891],
       [0.24765343, 0.34462361, 0.34190972, 0.28583501, 0.36961103,
        0.30180907, 0.23381304, 0.27648284, 0.30089413, 0.37210874],
       [0.39427751, 0.22631385, 0.26140673, 0.29472433, 0.25255341,
        0.27985587, 0.27261204, 0.33378354, 0.29258155, 0.32460718],
       [0.29221295, 0.31948668, 0.27574834, 0.31235493, 0.31636345,
        0.33110628, 0.28284359, 0.32082342, 0.27887766, 0.35142318],
       [0.28386097, 0.31511776, 0.31176105, 0.30595621, 0.30360094,
        0.33729238, 0.25874128, 0.29541704, 0.29464892, 0.32994674],
       [0.26839346, 0.39262326, 0.26400335, 0.28893276, 0.27926132,
        0.34415945, 0.27389715, 0.36815501, 0.24273893, 0.35718083],
       [0.27786481, 0.31280414, 0.32035193, 0.25641845, 0.37133931,
        0.27065136, 0.35839568, 0.32086151, 0.31923185, 0.31351231],
       [0.30331553, 0.2469209 , 0.35027172, 0.23612846, 0.3020661 ,
        0.3084482 , 0.26511915, 0.321454  , 0.3116952 , 0.28826684],
       [0.33511369, 0.23866454, 0.34204698, 0.35793471, 0.26334222,
        0.25078889, 0.31350435, 0.27768608, 0.31317433, 0.29236953],
       [0.30106089, 0.31816298, 0.31745144, 0.33871166, 0.27031504,
        0.26997886, 0.33885999, 0.30303644, 0.24052962, 0.33752853],
       [0.27465946, 0.2720056 , 0.34067544, 0.35585222, 0.23351696,
        0.28999324, 0.29140278, 0.34942406, 0.32587938, 0.26966512],
       [0.28488783, 0.31958574, 0.25342009, 0.2952317 , 0.28858665,
        0.31812288, 0.36003204, 0.29711018, 0.31912902, 0.33040203],
       [0.26853204, 0.26451514, 0.32771869, 0.31390498, 0.21382849,
        0.32292938, 0.28829525, 0.2704992 , 0.31977442, 0.34180845],
       [0.32207846, 0.26734672, 0.31035546, 0.33677052, 0.33031543,
        0.26942874, 0.34542761, 0.26050968, 0.29256228, 0.34598501],
       [0.32385984, 0.33268525, 0.25656674, 0.30128191, 0.28656804,
        0.31015881, 0.30102714, 0.33325258, 0.3045334 , 0.27069781],
       [0.22863174, 0.2951421 , 0.31155381, 0.34250682, 0.30384195,
        0.27858942, 0.32586761, 0.30319457, 0.23298047, 0.30859371],
       [0.31130923, 0.30547842, 0.30731556, 0.31583701, 0.30953597,
        0.34976509, 0.27106037, 0.28422728, 0.23330889, 0.23664276],
       [0.2577421 , 0.30208751, 0.28368605, 0.23964309, 0.28075459,
        0.22536699, 0.2552513 , 0.28596364, 0.28394825, 0.29313929],
       [0.33981432, 0.33006405, 0.31049121, 0.2674707 , 0.29892672,
        0.27851153, 0.2709054 , 0.27394449, 0.32906999, 0.33912514],
       [0.23071955, 0.29619869, 0.34257698, 0.34722427, 0.28682695,
        0.3188437 , 0.34418387, 0.32396729, 0.38443629, 0.31473212],
       [0.36119826, 0.3294802 , 0.26466023, 0.25614808, 0.35952493,
        0.31687106, 0.31548192, 0.33456705, 0.30961612, 0.2959887 ],
       [0.37269016, 0.30920386, 0.26978399, 0.35596725, 0.29337827,
        0.35159371, 0.22298788, 0.26268794, 0.27329543, 0.32414493],
       [0.38835234, 0.33108683, 0.33510481, 0.29297405, 0.34326801,
        0.31549864, 0.35863427, 0.28256626, 0.3556118 , 0.32415956],
       [0.32735627, 0.33574972, 0.31677577, 0.31365142, 0.33326277,
        0.29630911, 0.34563815, 0.29845754, 0.29773436, 0.26098026],
       [0.32618327, 0.26062082, 0.34900132, 0.34771056, 0.32055823,
        0.26395563, 0.33413896, 0.28497445, 0.3170359 , 0.35891647],
       [0.37051361, 0.31783846, 0.29991239, 0.24448897, 0.21690461,
        0.24901273, 0.36678875, 0.34568469, 0.26722702, 0.39263078],
       [0.35316689, 0.33831125, 0.33650709, 0.24423127, 0.35934126,
        0.2839609 , 0.36614099, 0.25497169, 0.24087551, 0.25335495],
       [0.29978129, 0.27650896, 0.22401408, 0.28995594, 0.33602063,
        0.34145961, 0.34737575, 0.24282282, 0.36188214, 0.3419127 ],
       [0.36292619, 0.31133312, 0.30799443, 0.30664702, 0.29323649,
        0.29521133, 0.30622104, 0.32185938, 0.2565798 , 0.29127927],
       [0.32965363, 0.33586078, 0.32516632, 0.31692608, 0.28354141,
        0.26565587, 0.32057729, 0.22951239, 0.2714714 , 0.32355419],
       [0.34190873, 0.30410637, 0.26505688, 0.30189687, 0.2997857 ,
        0.30658512, 0.3129252 , 0.35273386, 0.33241003, 0.29004222],
       [0.29240895, 0.29616865, 0.28376236, 0.28147818, 0.31294978,
        0.28190772, 0.32334373, 0.28167437, 0.34161483, 0.27934919],
       [0.27345466, 0.2687972 , 0.29025685, 0.28122546, 0.27646177,
        0.26226991, 0.29339031, 0.2413102 , 0.31914553, 0.31611027],
       [0.29703537, 0.24421683, 0.25687351, 0.26630075, 0.32120664,
        0.2835584 , 0.35414456, 0.35075253, 0.28007301, 0.2954181 ],
       [0.25978622, 0.31430025, 0.29477297, 0.32179893, 0.3019976 ,
        0.30275443, 0.32722505, 0.29635833, 0.33256142, 0.32921108],
       [0.36705375, 0.31371835, 0.3404555 , 0.29241508, 0.25179851,
        0.31605558, 0.35072922, 0.28736101, 0.27040347, 0.32537281],
       [0.33689553, 0.27941652, 0.27084552, 0.28914277, 0.32247947,
        0.29485586, 0.30904615, 0.32061555, 0.26017499, 0.25645405],
       [0.35080719, 0.26348728, 0.29198799, 0.32554687, 0.32645612,
        0.27327041, 0.295003  , 0.30720364, 0.25453364, 0.28190761],
       [0.2689549 , 0.25369717, 0.34096595, 0.24833995, 0.2742411 ,
        0.33632003, 0.27762874, 0.30977211, 0.2772291 , 0.31215133]])
    '''

    # Bayes draws; groups of 40
    inds1 = [i for i in range(40)]
    inds2 = [i for i in range(40, resLen)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varBayes10 = np.var(grp1)
    varBayes15 = np.var(grp2)
    meanBayes10 = np.average(grp1)
    meanBayes15 = np.average(grp2)
    # Bartlett test
    _, bartPval = spstat.bartlett(grp1.flatten(), grp2.flatten())
    print(bartPval)  # 0.821
    # t test for means
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp2.flatten())
    print(ttestPval)  # 0.0005

    # Neighbors; groups of 20
    temp1 = np.arange(1, 5).tolist()[::2]
    temp2 = np.arange(1, 5).tolist()[1::2]
    inds1 = [20 * (j - 1) + i for j in temp1 for i in range(20)]
    inds2 = [20 * (j - 1) + i for j in temp2 for i in range(20)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    varNeigh2 = np.var(grp1)
    varNeigh4 = np.var(grp2)
    meanNeigh2 = np.average(grp1)
    meanNeigh4 = np.average(grp2)
    # Bartlett test
    _, bartPval = spstat.bartlett(grp1.flatten(), grp2.flatten())
    print(bartPval)  # 0.478
    # t test for means
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp2.flatten())
    print(ttestPval)  # 0.0003

    # Neighbors; groups of 5
    temp1 = np.arange(1, 17).tolist()[::4]
    temp2 = np.arange(1, 17).tolist()[1::4]
    temp3 = np.arange(1, 17).tolist()[2::4]
    temp4 = np.arange(1, 17).tolist()[3::4]
    inds1 = [5 * (j - 1) + i for j in temp1 for i in range(5)]
    inds2 = [5 * (j - 1) + i for j in temp2 for i in range(5)]
    inds3 = [5 * (j - 1) + i for j in temp3 for i in range(5)]
    inds4 = [5 * (j - 1) + i for j in temp4 for i in range(5)]
    grp1 = resArr[inds1]
    grp2 = resArr[inds2]
    grp3 = resArr[inds3]
    grp4 = resArr[inds4]
    varNGrp1 = np.var(grp1)
    varNGrp2 = np.var(grp2)
    varNGrp3 = np.var(grp3)
    varNGrp4 = np.var(grp4)
    meanNGrp1 = np.average(grp1)
    meanNGrp2 = np.average(grp2)
    meanNGrp3 = np.average(grp3)
    meanNGrp4 = np.average(grp4)
    # Bartlett test
    _, bartPval = spstat.bartlett(grp1.flatten(), grp2.flatten(), grp3.flatten(), grp4.flatten())
    print(bartPval)  # 0.003
    _, bartPval = spstat.bartlett(grp1.flatten(), grp4.flatten())
    print(bartPval)  # 0.002
    # t test for means
    _, ttestPval = spstat.ttest_ind(grp1.flatten(), grp4.flatten(), equal_var=False)
    print(ttestPval)  # 0.

    ##############
    # How do we know 5k is good choice for the target draws? When does U_est stop decreasing?
    bayesNum = 10000
    bayesNeighNum = 4000
    targNumList = [100, 250, 500, 1000, 3000, 5000, 7000]
    dataNum = 2000
    numNeighChain = 10

    numReps = 10
    numchains = 5

    # Iterate through each chain 10 times
    resArr = np.zeros((len(targNumList) * numchains, numReps))
    resInd = -1
    iterStr = ['' for i in range(resArr.shape[0])]
    for targNumInd, targNum in enumerate(targNumList):
        for m in range(numchains):
            resInd += 1
            iterName = str(targNum) + ', ' + str(m)
            print(iterName)
            iterStr[resInd] = str(targNum) + '\n' + str(m)
            for rep in range(numReps):
                dictTemp = CSdict3.copy()
                dictTemp.update({'postSamples': chainArr[m][choice(np.arange(numdraws), size=targNum,
                                                                   replace=False)], 'numPostSamples': targNum})
                # Bayes draws
                setDraws = chainArr[m][choice(np.arange(numdraws), size=bayesNum, replace=False)]
                lossDict.update({'bayesEstNeighborNum': bayesNeighNum})
                lossDict.update({'bayesDraws': setDraws})
                print('Generating loss matrix...')
                tempLossMat = lf.lossMatSetBayesDraws(dictTemp['postSamples'], lossDict.copy(),
                                                      lossDict['bayesDraws'])
                tempLossDict = lossDict.copy()
                tempLossDict.update({'lossMat': tempLossMat})
                # Compile array for Bayes neighbors from random choice of chains
                tempChainArr = chainArr[choice(np.arange(M), size=numNeighChain, replace=False).tolist()]
                for jj in range(numNeighChain):
                    if jj == 0:
                        concChainArr = tempChainArr[0]
                    else:
                        concChainArr = np.vstack((concChainArr, tempChainArr[jj]))
                newBayesDraws, newLossMat = lf.add_cand_neighbors(tempLossDict.copy(), concChainArr,
                                                                  dictTemp['postSamples'])
                tempLossDict.update({'bayesDraws': newBayesDraws, 'lossMat': newLossMat})
                baseLoss = (np.sum(newLossMat, axis=1) / newLossMat.shape[1]).min()
                utilDict.update({'dataDraws': setDraws[
                    choice(np.arange(len(setDraws)), size=dataNum, replace=False)]})
                currCompUtil = baseLoss - sampf.sampling_plan_loss(priordatadict=dictTemp, lossdict=tempLossDict,
                                                                   designlist=[des], numtests=sampBudget,
                                                                   utildict=utilDict)[0]
                resArr[resInd, rep] = currCompUtil
            # Update boxplot
            # lo, hi = 20 * j, 20 * j + 20
            # plt.boxplot(resArr[lo:hi, :].T)
            plt.boxplot(resArr.T)
            plt.xticks(np.arange(1, resArr.shape[0] + 1), iterStr, fontsize=6)
            plt.subplots_adjust(bottom=0.15)
            plt.ylim([0, 0.5])
            plt.title(
                'Inspection of Variance\n$|\Gamma_{targ}|$, Chain Index')
            plt.show()
            plt.close()
    '''26-APR
    resArr100250 = np.array([[0.50140529, 0.55126168, 0.49029986, 0.46464198, 0.45837336,
        0.45066965, 0.41209198, 0.46978659, 0.49934546, 0.46923895],
       [0.39177565, 0.48035052, 0.42346483, 0.47887026, 0.41087836,
        0.37448669, 0.47747731, 0.37189735, 0.5425913 , 0.38353733],
       [0.35260405, 0.40309502, 0.45294672, 0.51255304, 0.39410096,
        0.47334884, 0.4511105 , 0.33374687, 0.39920023, 0.40339657],
       [0.45177538, 0.45366443, 0.45947238, 0.45897926, 0.46577183,
        0.48866144, 0.37979588, 0.5279329 , 0.38170447, 0.4107596 ],
       [0.47404723, 0.50586346, 0.44126569, 0.45439147, 0.43430667,
        0.4608085 , 0.40929905, 0.49413172, 0.45369494, 0.46455937],
       [0.39133431, 0.42041077, 0.34606595, 0.41376936, 0.35776227,
        0.3536425 , 0.35449673, 0.32780737, 0.35771259, 0.32721677],
       [0.32515425, 0.27414385, 0.4419826 , 0.40606446, 0.33779062,
        0.31597167, 0.37809201, 0.37396642, 0.31435042, 0.40189718],
       [0.32933754, 0.35991575, 0.38648917, 0.41096685, 0.37871601,
        0.32775265, 0.37732363, 0.3465906 , 0.3745596 , 0.42102382],
       [0.32043037, 0.44067833, 0.29090313, 0.3569633 , 0.35843298,
        0.39886559, 0.3742737 , 0.32914038, 0.38900235, 0.38801457],
       [0.37563327, 0.36903659, 0.3984997 , 0.3872371 , 0.39459878,
        0.38254198, 0.40526602, 0.44261726, 0.33483897, 0.39376805]])
    resArr1000 = np.array([[0.29543422, 0.23018659, 0.29572667, 0.30400529, 0.28798147,
        0.30749344, 0.31172818, 0.29030707, 0.32264818, 0.34075148],
       [0.31404676, 0.29461163, 0.26086479, 0.37383886, 0.3080653 ,
        0.3024158 , 0.29058796, 0.33923388, 0.32167301, 0.35374918],
       [0.29705226, 0.34588321, 0.34012437, 0.33812139, 0.33470506,
        0.24699048, 0.28337416, 0.34205818, 0.2995167 , 0.35778803],
       [0.30948271, 0.35447861, 0.32132528, 0.29423149, 0.35358318,
        0.25637289, 0.32995915, 0.30879223, 0.3096543 , 0.28401523],
       [0.34666892, 0.30428367, 0.36359256, 0.28827808, 0.32374601,
        0.32332402, 0.32796637, 0.33926794, 0.29788653, 0.37282736]])
    resArr500 = np.array([[0.37407532, 0.30445457, 0.37972112, 0.32858337, 0.35944551,
        0.40163667, 0.37937639, 0.39067011, 0.30510025, 0.31049344],
       [0.38030088, 0.29022886, 0.27924652, 0.30975121, 0.33616545,
        0.31281565, 0.3546127 , 0.37754946, 0.35879472, 0.30920778],
       [0.37779657, 0.36302409, 0.33225466, 0.3178921 , 0.36421046,
        0.37990663, 0.24108357, 0.36107523, 0.35696927, 0.33150821],
       [0.33197066, 0.38297438, 0.38263148, 0.3384268 , 0.31969498,
        0.29847756, 0.29834003, 0.33907476, 0.22759916, 0.30496617],
       [0.30310852, 0.32502465, 0.33992754, 0.26822618, 0.29426995,
        0.27141022, 0.3962556 , 0.33542118, 0.31419785, 0.28735508]])
    '''
    '''26-APR
    resArr = np.array([[0.50140529, 0.55126168, 0.49029986, 0.46464198, 0.45837336,
        0.45066965, 0.41209198, 0.46978659, 0.49934546, 0.46923895],
       [0.39177565, 0.48035052, 0.42346483, 0.47887026, 0.41087836,
        0.37448669, 0.47747731, 0.37189735, 0.5425913 , 0.38353733],
       [0.35260405, 0.40309502, 0.45294672, 0.51255304, 0.39410096,
        0.47334884, 0.4511105 , 0.33374687, 0.39920023, 0.40339657],
       [0.45177538, 0.45366443, 0.45947238, 0.45897926, 0.46577183,
        0.48866144, 0.37979588, 0.5279329 , 0.38170447, 0.4107596 ],
       [0.47404723, 0.50586346, 0.44126569, 0.45439147, 0.43430667,
        0.4608085 , 0.40929905, 0.49413172, 0.45369494, 0.46455937],
       [0.39133431, 0.42041077, 0.34606595, 0.41376936, 0.35776227,
        0.3536425 , 0.35449673, 0.32780737, 0.35771259, 0.32721677],
       [0.32515425, 0.27414385, 0.4419826 , 0.40606446, 0.33779062,
        0.31597167, 0.37809201, 0.37396642, 0.31435042, 0.40189718],
       [0.32933754, 0.35991575, 0.38648917, 0.41096685, 0.37871601,
        0.32775265, 0.37732363, 0.3465906 , 0.3745596 , 0.42102382],
       [0.32043037, 0.44067833, 0.29090313, 0.3569633 , 0.35843298,
        0.39886559, 0.3742737 , 0.32914038, 0.38900235, 0.38801457],
       [0.37563327, 0.36903659, 0.3984997 , 0.3872371 , 0.39459878,
        0.38254198, 0.40526602, 0.44261726, 0.33483897, 0.39376805],
        [0.37407532, 0.30445457, 0.37972112, 0.32858337, 0.35944551,
        0.40163667, 0.37937639, 0.39067011, 0.30510025, 0.31049344],
       [0.38030088, 0.29022886, 0.27924652, 0.30975121, 0.33616545,
        0.31281565, 0.3546127 , 0.37754946, 0.35879472, 0.30920778],
       [0.37779657, 0.36302409, 0.33225466, 0.3178921 , 0.36421046,
        0.37990663, 0.24108357, 0.36107523, 0.35696927, 0.33150821],
       [0.33197066, 0.38297438, 0.38263148, 0.3384268 , 0.31969498,
        0.29847756, 0.29834003, 0.33907476, 0.22759916, 0.30496617],
       [0.30310852, 0.32502465, 0.33992754, 0.26822618, 0.29426995,
        0.27141022, 0.3962556 , 0.33542118, 0.31419785, 0.28735508],
       [0.29543422, 0.23018659, 0.29572667, 0.30400529, 0.28798147,
        0.30749344, 0.31172818, 0.29030707, 0.32264818, 0.34075148],
       [0.31404676, 0.29461163, 0.26086479, 0.37383886, 0.3080653 ,
        0.3024158 , 0.29058796, 0.33923388, 0.32167301, 0.35374918],
       [0.29705226, 0.34588321, 0.34012437, 0.33812139, 0.33470506,
        0.24699048, 0.28337416, 0.34205818, 0.2995167 , 0.35778803],
       [0.30948271, 0.35447861, 0.32132528, 0.29423149, 0.35358318,
        0.25637289, 0.32995915, 0.30879223, 0.3096543 , 0.28401523],
       [0.34666892, 0.30428367, 0.36359256, 0.28827808, 0.32374601,
        0.32332402, 0.32796637, 0.33926794, 0.29788653, 0.37282736],
       [0.25549132, 0.30381592, 0.27637908, 0.28224129, 0.30667664,
        0.30400084, 0.26844848, 0.2729882 , 0.343837  , 0.34685346],
       [0.30411617, 0.33507449, 0.26623957, 0.2632656 , 0.29391671,
        0.36336377, 0.32741422, 0.26356833, 0.31914789, 0.30887769],
       [0.31500317, 0.30318927, 0.30460151, 0.26505258, 0.30563538,
        0.28359129, 0.33600951, 0.28641812, 0.34258986, 0.28458254],
       [0.27512308, 0.32754478, 0.29254634, 0.27998668, 0.27005116,
        0.29594049, 0.31142984, 0.31776369, 0.27967321, 0.31636716],
       [0.31914107, 0.27231412, 0.27666105, 0.28044192, 0.32101495,
        0.30667921, 0.28677659, 0.28632908, 0.2746359 , 0.32261521],
       [0.29074794, 0.30180358, 0.26865983, 0.25916341, 0.30806278,
        0.31409518, 0.29840812, 0.27770024, 0.25819258, 0.2956419 ],
       [0.33695764, 0.22165824, 0.31966694, 0.25550912, 0.31102951,
        0.26036698, 0.30676481, 0.32265597, 0.30638283, 0.267012  ],
       [0.22271734, 0.33251509, 0.30156705, 0.25354403, 0.29238287,
        0.29342667, 0.33750123, 0.30746387, 0.28870626, 0.28220082],
       [0.21499506, 0.26814815, 0.20973981, 0.28426465, 0.27351313,
        0.22992648, 0.281794  , 0.29238153, 0.30806582, 0.31620699],
       [0.32594961, 0.28213277, 0.32208402, 0.25749293, 0.29025579,
        0.27652002, 0.31214433, 0.34222441, 0.28492866, 0.27846235],
       [0.3294513 , 0.31291074, 0.3067303 , 0.33735598, 0.25932852,
        0.29887054, 0.29194411, 0.30744739, 0.28387021, 0.31146712],
       [0.2812424 , 0.2966778 , 0.22064488, 0.2730136 , 0.27604073,
        0.28339152, 0.22185182, 0.32192728, 0.24887353, 0.25056421],
       [0.28677336, 0.29498444, 0.29169857, 0.32083128, 0.28950008,
        0.31983926, 0.35355005, 0.31691794, 0.2487355 , 0.32780415],
       [0.26188433, 0.32234931, 0.31970408, 0.28489519, 0.3214753 ,
        0.26781106, 0.33772272, 0.30779557, 0.30325071, 0.32477542],
       [0.31904626, 0.31036784, 0.33488475, 0.34943184, 0.29876351,
        0.31700563, 0.26504681, 0.33730261, 0.32971048, 0.26672061]])
    '''
    # Form 95% CIs on mean under each number of target draws, for each chain
    CIlist = []
    avglist = []
    for j in range(len(targNumList)):
        inds = [j * 5 + m for m in range(numchains)]
        data = resArr[inds].flatten().tolist()
        currAvg = np.mean(data)
        currCI = spstat.t.interval(alpha=0.95, df=len(data) - 1, loc=np.mean(data), scale=spstat.sem(data))
        CIlist.append(currCI)
    for i in range(len(CIlist)):
        plt.plot((i, i), CIlist[i], linewidth=4, color='black')
    plt.xticks(np.arange(len(targNumList)), [str(targNumList[k]) for k in range(len(targNumList))], fontsize=10)
    plt.title('95% confidence intervals for utility mean vs. $|\Gamma_{targ}|$')
    plt.ylim([0, 0.5])
    plt.ylabel('Utility')
    plt.xlabel('$|\Gamma_{targ}|$')
    plt.show()
    plt.close()

    ##############
    # How should we allocate our budget for Bayes draws (Bayes vs neighbors), and from where should the neighbors be drawn?
    bayesNumList = [5000, 7500, 10000]
    bayesBudget = 11000
    neighSubsetList = [10000, 25000, 50000, 75000, 100000]
    targNum = 5000
    dataNum = 4000

    numReps = 10
    numchains = 5

    # Iterate through each chain 10 times
    resArr = np.zeros((len(bayesNumList) * (len(neighSubsetList)) * numchains, numReps))
    resInd = -1
    iterStr = ['' for i in range(resArr.shape[0])]
    for m in range(numchains):
        for bayesNumInd, bayesNum in enumerate(bayesNumList):
            for neighSubsetInd, neighSubset in enumerate(neighSubsetList):
                resInd += 1
                iterName = str(m) + ', ' + str(bayesNum) + ', ' + str(neighSubset)
                print(iterName)
                iterStr[resInd] = str(m) + '\n' + str(bayesNum) + '\n' + str(neighSubset)
                for rep in range(numReps):
                    dictTemp = CSdict3.copy()
                    dictTemp.update({'postSamples': chainArr[m][choice(np.arange(numdraws), size=targNum,
                                                                       replace=False)], 'numPostSamples': targNum})
                    # Bayes draws
                    setDraws = chainArr[m][choice(np.arange(numdraws), size=bayesNum, replace=False)]
                    bayesNeighNum = bayesBudget - bayesNum
                    lossDict.update({'bayesEstNeighborNum': bayesNeighNum})
                    lossDict.update({'bayesDraws': setDraws})
                    print('Generating loss matrix...')
                    tempLossMat = lf.lossMatSetBayesDraws(dictTemp['postSamples'], lossDict.copy(),
                                                          lossDict['bayesDraws'])
                    tempLossDict = lossDict.copy()
                    tempLossDict.update({'lossMat': tempLossMat})
                    # Choose neighbor subset chain
                    currChain = chainArr[choice(np.arange(M), size=1, replace=False).tolist()][0]
                    subsetChain = currChain[
                        choice(np.arange(currChain.shape[0]), size=neighSubset, replace=False).tolist()]
                    newBayesDraws, newLossMat = lf.add_cand_neighbors(tempLossDict.copy(), subsetChain,
                                                                      dictTemp['postSamples'])
                    tempLossDict.update({'bayesDraws': newBayesDraws, 'lossMat': newLossMat})
                    baseLoss = (np.sum(newLossMat, axis=1) / newLossMat.shape[1]).min()
                    utilDict.update({'dataDraws': setDraws[
                        choice(np.arange(len(setDraws)), size=dataNum, replace=False)]})
                    currCompUtil = baseLoss - sampf.sampling_plan_loss(priordatadict=dictTemp, lossdict=tempLossDict,
                                                                       designlist=[des], numtests=sampBudget,
                                                                       utildict=utilDict)[0]
                    resArr[resInd, rep] = currCompUtil
                # Update boxplot
                for j in range(m + 1):
                    grpInt = 12
                    lo, hi = grpInt * j, grpInt * j + grpInt
                    plt.boxplot(resArr[lo:hi, :].T)
                    plt.xticks(np.arange(1, hi - lo + 1), iterStr[lo:hi], fontsize=6)
                    plt.subplots_adjust(bottom=0.15)
                    plt.ylim([0, 0.5])
                    plt.title(
                        'Inspection of Variance\nChain Index, $|\Gamma_{Bayes}|$, Subset Size for Neighbors')
                    plt.show()
                    plt.close()

    # What is a suitable number of data draws? Show expected loss vs number of draws
    bayesNum = 10000
    bayesNeighNum = 1000
    targNum = 5000
    dataNum = 10000

    numReps = 10
    numchains = 10

    # Iterate through each chain numReps times
    resArr = np.zeros((numReps * numchains, dataNum))
    resInd = -1
    for m in range(numchains):
        for rep in range(numReps):
            resInd += 1
            dictTemp = CSdict3.copy()
            dictTemp.update({'postSamples': chainArr[m][choice(np.arange(numdraws), size=targNum,
                                                               replace=False)], 'numPostSamples': targNum})
            # Bayes draws
            setDraws = chainArr[m][choice(np.arange(numdraws), size=bayesNum, replace=False)]
            lossDict.update({'bayesEstNeighborNum': bayesNeighNum})
            lossDict.update({'bayesDraws': setDraws})
            print('Generating loss matrix...')
            tempLossMat = lf.lossMatSetBayesDraws(dictTemp['postSamples'], lossDict.copy(),
                                                  lossDict['bayesDraws'])
            tempLossDict = lossDict.copy()
            tempLossDict.update({'lossMat': tempLossMat})
            # Choose neighbor subset chain
            newBayesDraws, newLossMat = lf.add_cand_neighbors(tempLossDict.copy(), chainArr[m],
                                                              dictTemp['postSamples'])
            tempLossDict.update({'bayesDraws': newBayesDraws, 'lossMat': newLossMat})
            # Get weights matrix
            utilDict.update({'dataDraws': setDraws[
                choice(np.arange(len(setDraws)), size=dataNum, replace=False)]})
            # baseLoss = (np.sum(newLossMat, axis=1) / newLossMat.shape[1]).min()
            # Generate W
            Ntilde = des.copy()
            sampNodeInd = 0
            for currind in range(numTN):  # Identify the test node we're analyzing
                if Ntilde[currind] > 0:
                    sampNodeInd = currind  # TN of focus
            Ntotal, Qvec = sampBudget, dictTemp['Q'][sampNodeInd]
            datadraws = utilDict['dataDraws']
            numdrawsfordata, numpriordraws = datadraws.shape[0], dictTemp['postSamples'].shape[0]
            zMatTarg = zProbTrVec(numSN, dictTemp['postSamples'], sens=s, spec=r)[:, sampNodeInd,
                       :]  # Matrix of SFP probabilities, as a function of SFP rate draws
            zMatData = zProbTrVec(numSN, datadraws, sens=s, spec=r)[:, sampNodeInd, :]  # Probs. using data draws
            NMat = np.random.multinomial(Ntotal, Qvec, size=numdrawsfordata)  # How many samples from each SN
            YMat = np.random.binomial(NMat, zMatData)  # How many samples were positive
            tempW = np.zeros(shape=(numpriordraws, numdrawsfordata))
            for nodeInd in range(numSN):  # Loop through each SN
                # Get zProbs corresponding to current SN
                bigZtemp = np.transpose(
                    np.reshape(np.tile(zMatTarg[:, nodeInd], numdrawsfordata), (numdrawsfordata, numpriordraws)))
                bigNtemp = np.reshape(np.tile(NMat[:, nodeInd], numpriordraws), (numpriordraws, numdrawsfordata))
                bigYtemp = np.reshape(np.tile(YMat[:, nodeInd], numpriordraws), (numpriordraws, numdrawsfordata))
                combNYtemp = np.reshape(np.tile(sps.comb(NMat[:, nodeInd], YMat[:, nodeInd]), numpriordraws),
                                        (numpriordraws, numdrawsfordata))
                tempW += (bigYtemp * np.log(bigZtemp)) + ((bigNtemp - bigYtemp) * np.log(1 - bigZtemp)) + np.log(
                    combNYtemp)
            wtsMat = np.exp(tempW)  # Turn weights into likelihoods
            # Normalize so each column sums to 1; the likelihood of each data set is accounted for in the data draws
            wtsMat = np.divide(wtsMat * 1, np.reshape(np.tile(np.sum(wtsMat, axis=0), numpriordraws),
                                                      (numpriordraws, numdrawsfordata)))
            wtLossMat = np.matmul(tempLossDict['lossMat'], wtsMat)
            wtLossMins = wtLossMat.min(axis=0)
            wtLossMinsCumul = np.cumsum(wtLossMins) / np.arange(1, 1 + numdrawsfordata)
            resArr[resInd] = wtLossMinsCumul.copy()
    np.save('resArrDataDraws.npy', resArr)
    # chainArr = np.load('chainArr.npy')

    return